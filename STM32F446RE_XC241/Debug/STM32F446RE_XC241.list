
STM32F446RE_XC241.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014854  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  08014a24  08014a24  00024a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080153c4  080153c4  000253c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080153cc  080153cc  000253cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080153d0  080153d0  000253d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080153d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004470  20000010  080153e4  00030010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004480  080153e4  00034480  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b5fa  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d51  00000000  00000000  0004b63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003e8  00000000  00000000  0004f390  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000087cb  00000000  00000000  0004f778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006e6f  00000000  00000000  00057f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005edb2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000588c  00000000  00000000  0005ee30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  000646c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014a0c 	.word	0x08014a0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08014a0c 	.word	0x08014a0c

08000210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000214:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <HAL_Init+0x40>)
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <HAL_Init+0x40>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800021e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <HAL_Init+0x40>)
 8000222:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <HAL_Init+0x40>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800022c:	4a08      	ldr	r2, [pc, #32]	; (8000250 <HAL_Init+0x40>)
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <HAL_Init+0x40>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000238:	2003      	movs	r0, #3
 800023a:	f000 fbaf 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023e:	2000      	movs	r0, #0
 8000240:	f013 f8c2 	bl	80133c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000244:	f013 f894 	bl	8013370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000248:	2300      	movs	r3, #0
}
 800024a:	4618      	mov	r0, r3
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40023c00 	.word	0x40023c00

08000254 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <HAL_DeInit+0x54>)
 800025a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800025e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <HAL_DeInit+0x54>)
 8000262:	2200      	movs	r2, #0
 8000264:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <HAL_DeInit+0x54>)
 8000268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800026c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <HAL_DeInit+0x54>)
 8000270:	2200      	movs	r2, #0
 8000272:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <HAL_DeInit+0x54>)
 8000276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800027a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <HAL_DeInit+0x54>)
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <HAL_DeInit+0x54>)
 8000284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000288:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_DeInit+0x54>)
 800028c:	2200      	movs	r2, #0
 800028e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <HAL_DeInit+0x54>)
 8000292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000296:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <HAL_DeInit+0x54>)
 800029a:	2200      	movs	r2, #0
 800029c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800029e:	f000 f80c 	bl	80002ba <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_MspDeInit+0x62>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <HAL_MspDeInit+0x66>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4619      	mov	r1, r3
 80002da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002de:	fbb3 f3f1 	udiv	r3, r3, r1
 80002e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fb9f 	bl	8000a2a <HAL_SYSTICK_Config>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <HAL_MspDeInit+0x3c>
  {
    return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e00e      	b.n	8000314 <HAL_MspDeInit+0x5a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b0f      	cmp	r3, #15
 80002fa:	d80a      	bhi.n	8000312 <HAL_MspDeInit+0x58>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002fc:	2200      	movs	r2, #0
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 fb55 	bl	80009b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000308:	4a06      	ldr	r2, [pc, #24]	; (8000324 <HAL_MspDeInit+0x6a>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800030e:	2300      	movs	r3, #0
 8000310:	e000      	b.n	8000314 <HAL_MspDeInit+0x5a>
    return HAL_ERROR;
 8000312:	2301      	movs	r3, #1
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000000c 	.word	0x2000000c
 8000320:	20000004 	.word	0x20000004
 8000324:	20000000 	.word	0x20000000

08000328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_IncTick+0x20>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_IncTick+0x24>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4413      	add	r3, r2
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <HAL_IncTick+0x24>)
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000004 	.word	0x20000004
 800034c:	20003ff0 	.word	0x20003ff0

08000350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return uwTick;
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <HAL_GetTick+0x14>)
 8000356:	681b      	ldr	r3, [r3, #0]
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20003ff0 	.word	0x20003ff0

08000368 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <HAL_GetTickPrio+0x14>)
 800036e:	681b      	ldr	r3, [r3, #0]
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000000 	.word	0x20000000

08000380 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800038a:	2300      	movs	r3, #0
 800038c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_SetTickFreq+0x38>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	429a      	cmp	r2, r3
 8000396:	d009      	beq.n	80003ac <HAL_SetTickFreq+0x2c>
  {
    uwTickFreq = Freq;
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <HAL_SetTickFreq+0x38>)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <HAL_SetTickFreq+0x3c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f013 f810 	bl	80133c8 <HAL_InitTick>
 80003a8:	4603      	mov	r3, r0
 80003aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000004 	.word	0x20000004
 80003bc:	20000000 	.word	0x20000000

080003c0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <HAL_GetTickFreq+0x14>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	20000004 	.word	0x20000004

080003d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003e0:	f7ff ffb6 	bl	8000350 <HAL_GetTick>
 80003e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80003f0:	d005      	beq.n	80003fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <HAL_Delay+0x40>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4413      	add	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003fe:	bf00      	nop
 8000400:	f7ff ffa6 	bl	8000350 <HAL_GetTick>
 8000404:	4602      	mov	r2, r0
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	1ad2      	subs	r2, r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	429a      	cmp	r2, r3
 800040e:	d3f7      	bcc.n	8000400 <HAL_Delay+0x28>
  {
  }
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000004 	.word	0x20000004
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <HAL_Delay+0x60>)
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <HAL_Delay+0x60>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f023 0302 	bic.w	r3, r3, #2
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <HAL_Delay+0x80>)
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <HAL_Delay+0x80>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6013      	str	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000e010 	.word	0xe000e010

0800045c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8000460:	4b02      	ldr	r3, [pc, #8]	; (800046c <HAL_GetHalVersion+0x10>)
}
 8000462:	4618      	mov	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	01070600 	.word	0x01070600

08000470 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <HAL_GetREVID+0x14>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	0c1b      	lsrs	r3, r3, #16
}
 800047a:	4618      	mov	r0, r3
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e0042000 	.word	0xe0042000

08000488 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <HAL_GetDEVID+0x18>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e0042000 	.word	0xe0042000

080004a4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6053      	str	r3, [r2, #4]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e0042000 	.word	0xe0042000

080004c4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004c8:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	6053      	str	r3, [r2, #4]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e0042000 	.word	0xe0042000

080004e4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	f043 0302 	orr.w	r3, r3, #2
 80004f2:	6053      	str	r3, [r2, #4]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e0042000 	.word	0xe0042000

08000504 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	f023 0302 	bic.w	r3, r3, #2
 8000512:	6053      	str	r3, [r2, #4]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e0042000 	.word	0xe0042000

08000524 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6053      	str	r3, [r2, #4]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e0042000 	.word	0xe0042000

08000544 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	f023 0304 	bic.w	r3, r3, #4
 8000552:	6053      	str	r3, [r2, #4]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e0042000 	.word	0xe0042000

08000564 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_EnableCompensationCell+0x14>)
 800056a:	2201      	movs	r2, #1
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	42270400 	.word	0x42270400

0800057c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_DisableCompensationCell+0x14>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	42270400 	.word	0x42270400

08000594 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetUIDw0+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	1fff7a10 	.word	0x1fff7a10

080005ac <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetUIDw1+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	1fff7a14 	.word	0x1fff7a14

080005c4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetUIDw2+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	1fff7a18 	.word	0x1fff7a18

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0b      	blt.n	800066a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <__NVIC_EnableIRQ+0x38>)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	095b      	lsrs	r3, r3, #5
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	f002 021f 	and.w	r2, r2, #31
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	2b00      	cmp	r3, #0
 800068c:	db10      	blt.n	80006b0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068e:	490b      	ldr	r1, [pc, #44]	; (80006bc <__NVIC_DisableIRQ+0x40>)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	f002 021f 	and.w	r2, r2, #31
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	3320      	adds	r3, #32
 80006a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	db0e      	blt.n	80006f0 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <__NVIC_GetPendingIRQ+0x40>)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	095b      	lsrs	r3, r3, #5
 80006da:	3340      	adds	r3, #64	; 0x40
 80006dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 031f 	and.w	r3, r3, #31
 80006e6:	fa22 f303 	lsr.w	r3, r2, r3
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	e000      	b.n	80006f2 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80006f0:	2300      	movs	r3, #0
  }
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db0c      	blt.n	8000730 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	4909      	ldr	r1, [pc, #36]	; (800073c <__NVIC_SetPendingIRQ+0x38>)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	095b      	lsrs	r3, r3, #5
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	f002 021f 	and.w	r2, r2, #31
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	3340      	adds	r3, #64	; 0x40
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db0c      	blt.n	800076c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000752:	4909      	ldr	r1, [pc, #36]	; (8000778 <__NVIC_ClearPendingIRQ+0x38>)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	095b      	lsrs	r3, r3, #5
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	f002 021f 	and.w	r2, r2, #31
 8000760:	2001      	movs	r0, #1
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	3360      	adds	r3, #96	; 0x60
 8000768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db0e      	blt.n	80007ac <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <__NVIC_GetActive+0x40>)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	095b      	lsrs	r3, r3, #5
 8000796:	3380      	adds	r3, #128	; 0x80
 8000798:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f003 031f 	and.w	r3, r3, #31
 80007a2:	fa22 f303 	lsr.w	r3, r2, r3
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	e000      	b.n	80007ae <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80007ac:	2300      	movs	r3, #0
  }
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	490d      	ldr	r1, [pc, #52]	; (800080c <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db09      	blt.n	800083a <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000826:	4a0d      	ldr	r2, [pc, #52]	; (800085c <__NVIC_GetPriority+0x48>)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4413      	add	r3, r2
 800082e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000832:	b2db      	uxtb	r3, r3
 8000834:	091b      	lsrs	r3, r3, #4
 8000836:	b2db      	uxtb	r3, r3
 8000838:	e009      	b.n	800084e <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <__NVIC_GetPriority+0x4c>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	4413      	add	r3, r2
 8000846:	7e1b      	ldrb	r3, [r3, #24]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	b2db      	uxtb	r3, r3
  }
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	2201      	movs	r2, #1
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	401a      	ands	r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008aa:	2101      	movs	r1, #1
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	1e59      	subs	r1, r3, #1
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b089      	sub	sp, #36	; 0x24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_DecodePriority+0x32>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_DecodePriority+0x34>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	40da      	lsrs	r2, r3
 8000902:	2101      	movs	r1, #1
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	3b01      	subs	r3, #1
 800090c:	401a      	ands	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000912:	2201      	movs	r2, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	401a      	ands	r2, r3
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	3724      	adds	r7, #36	; 0x24
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000934:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000938:	4905      	ldr	r1, [pc, #20]	; (8000950 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <__NVIC_SystemReset+0x20>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_SystemReset+0x24>)
 8000944:	4313      	orrs	r3, r2
 8000946:	60cb      	str	r3, [r1, #12]
 8000948:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <__NVIC_SystemReset+0x1c>
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	05fa0004 	.word	0x05fa0004

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800097c:	f7ff ff20 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fe19 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff fe2e 	bl	8000624 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff48 	bl	8000864 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff feef 	bl	80007c0 <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe21 	bl	8000640 <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe31 	bl	800067c <__NVIC_DisableIRQ>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000a26:	f7ff ff83 	bl	8000930 <__NVIC_SystemReset>

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff90 	bl	8000958 <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a46:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_MPU_Disable+0x26>)
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MPU_Disable+0x26>)
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a54:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_MPU_Disable+0x2a>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	e000ed90 	.word	0xe000ed90

08000a70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_MPU_Enable+0x34>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <HAL_MPU_Enable+0x38>)
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MPU_Enable+0x38>)
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a8c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a92:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed90 	.word	0xe000ed90
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_MPU_ConfigRegion+0x84>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d028      	beq.n	8000b16 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_MPU_ConfigRegion+0x84>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000acc:	4918      	ldr	r1, [pc, #96]	; (8000b30 <HAL_MPU_ConfigRegion+0x84>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7b1b      	ldrb	r3, [r3, #12]
 8000ad2:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7adb      	ldrb	r3, [r3, #11]
 8000ad8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ada:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7a9b      	ldrb	r3, [r3, #10]
 8000ae0:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ae2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7b5b      	ldrb	r3, [r3, #13]
 8000ae8:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000aea:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7b9b      	ldrb	r3, [r3, #14]
 8000af0:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000af2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7bdb      	ldrb	r3, [r3, #15]
 8000af8:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000afa:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7a5b      	ldrb	r3, [r3, #9]
 8000b00:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b02:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7a1b      	ldrb	r3, [r3, #8]
 8000b08:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b0a:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b10:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b12:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8000b14:	e005      	b.n	8000b22 <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00U;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MPU_ConfigRegion+0x84>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <HAL_MPU_ConfigRegion+0x84>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed90 	.word	0xe000ed90

08000b34 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8000b38:	f7ff fd74 	bl	8000624 <__NVIC_GetPriorityGrouping>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fe5c 	bl	8000814 <__NVIC_GetPriority>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	f7ff feb0 	bl	80008c6 <NVIC_DecodePriority>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fdc1 	bl	8000704 <__NVIC_SetPendingIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd91 	bl	80006c0 <__NVIC_GetPendingIRQ>
 8000b9e:	4603      	mov	r3, r0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fdc2 	bl	8000740 <__NVIC_ClearPendingIRQ>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fdd2 	bl	800077c <__NVIC_GetActive>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d106      	bne.n	8000bfe <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bf0:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bfc:	e005      	b.n	8000c0a <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 0304 	bic.w	r3, r3, #4
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c20:	f000 f802 	bl	8000c28 <HAL_SYSTICK_Callback>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fb84 	bl	8000350 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e099      	b.n	8000d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2202      	movs	r2, #2
 8000c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	6812      	ldr	r2, [r2, #0]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c74:	e00f      	b.n	8000c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c76:	f7ff fb6b 	bl	8000350 <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	d908      	bls.n	8000c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2220      	movs	r2, #32
 8000c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e078      	b.n	8000d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e8      	bne.n	8000c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <HAL_DMA_Init+0x158>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d107      	bne.n	8000d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f023 0307 	bic.w	r3, r3, #7
 8000d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d117      	bne.n	8000d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00e      	beq.n	8000d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 fd57 	bl	80017f0 <DMA_CheckFifoParam>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2240      	movs	r2, #64	; 0x40
 8000d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000d56:	2301      	movs	r3, #1
 8000d58:	e016      	b.n	8000d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fd0e 	bl	8001784 <DMA_CalcBaseAndBitshift>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d70:	223f      	movs	r2, #63	; 0x3f
 8000d72:	409a      	lsls	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	f010803f 	.word	0xf010803f

08000d94 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e050      	b.n	8000e48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d101      	bne.n	8000db6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8000db2:	2302      	movs	r3, #2
 8000db4:	e048      	b.n	8000e48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2221      	movs	r2, #33	; 0x21
 8000df4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fcc4 	bl	8001784 <DMA_CalcBaseAndBitshift>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e28:	223f      	movs	r2, #63	; 0x3f
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d101      	bne.n	8000e70 <HAL_DMA_Start+0x20>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e026      	b.n	8000ebe <HAL_DMA_Start+0x6e>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d115      	bne.n	8000eb0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2202      	movs	r2, #2
 8000e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f000 fc45 	bl	8001728 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	f042 0201 	orr.w	r2, r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e005      	b.n	8000ebc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d101      	bne.n	8000eec <HAL_DMA_Start_IT+0x26>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e048      	b.n	8000f7e <HAL_DMA_Start_IT+0xb8>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d137      	bne.n	8000f70 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 fc07 	bl	8001728 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f1e:	223f      	movs	r2, #63	; 0x3f
 8000f20:	409a      	lsls	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	f042 0216 	orr.w	r2, r2, #22
 8000f34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	6952      	ldr	r2, [r2, #20]
 8000f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f44:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	f042 0208 	orr.w	r2, r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e005      	b.n	8000f7c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff f9dc 	bl	8000350 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d008      	beq.n	8000fb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e052      	b.n	800105e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	6812      	ldr	r2, [r2, #0]
 8000fc2:	f022 0216 	bic.w	r2, r2, #22
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	6952      	ldr	r2, [r2, #20]
 8000fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <HAL_DMA_Abort+0x62>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	f022 0208 	bic.w	r2, r2, #8
 8000ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001008:	e013      	b.n	8001032 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800100a:	f7ff f9a1 	bl	8000350 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b05      	cmp	r3, #5
 8001016:	d90c      	bls.n	8001032 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e015      	b.n	800105e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e4      	bne.n	800100a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	223f      	movs	r2, #63	; 0x3f
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00c      	b.n	800109e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2205      	movs	r2, #5
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b08a      	sub	sp, #40	; 0x28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	460b      	mov	r3, r1
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80010b8:	2300      	movs	r3, #0
 80010ba:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80010bc:	f7ff f948 	bl	8000350 <HAL_GetTick>
 80010c0:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d008      	beq.n	80010e0 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0bf      	b.n	8001260 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0b2      	b.n	8001260 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d106      	bne.n	800110e <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	2220      	movs	r2, #32
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	e005      	b.n	800111a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001112:	2210      	movs	r2, #16
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001126:	e05a      	b.n	80011de <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800112e:	d017      	beq.n	8001160 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <HAL_DMA_PollForTransfer+0x9c>
 8001136:	f7ff f90b 	bl	8000350 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	d90c      	bls.n	8001160 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2220      	movs	r2, #32
 800114a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e07f      	b.n	8001260 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116a:	2208      	movs	r2, #8
 800116c:	409a      	lsls	r2, r3
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	2208      	movs	r2, #8
 8001188:	409a      	lsls	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001192:	2201      	movs	r2, #1
 8001194:	409a      	lsls	r2, r3
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a2:	f043 0202 	orr.w	r2, r3, #2
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	2201      	movs	r2, #1
 80011b0:	409a      	lsls	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ba:	2204      	movs	r2, #4
 80011bc:	409a      	lsls	r2, r3
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ca:	f043 0204 	orr.w	r2, r3, #4
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	2204      	movs	r2, #4
 80011d8:	409a      	lsls	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80011de:	6a3a      	ldr	r2, [r7, #32]
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d105      	bne.n	80011f4 <HAL_DMA_PollForTransfer+0x14a>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d099      	beq.n	8001128 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d018      	beq.n	800122e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d012      	beq.n	800122e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff febc 	bl	8000f86 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	409a      	lsls	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e018      	b.n	8001260 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10e      	bne.n	8001252 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001238:	2230      	movs	r2, #48	; 0x30
 800123a:	409a      	lsls	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001250:	e005      	b.n	800125e <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2210      	movs	r2, #16
 8001258:	409a      	lsls	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800125e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001274:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <HAL_DMA_IRQHandler+0x258>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <HAL_DMA_IRQHandler+0x25c>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0a9b      	lsrs	r3, r3, #10
 8001280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	2208      	movs	r2, #8
 8001294:	409a      	lsls	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01a      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	f022 0204 	bic.w	r2, r2, #4
 80012ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2208      	movs	r2, #8
 80012c2:	409a      	lsls	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	2201      	movs	r2, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d012      	beq.n	800130a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2201      	movs	r2, #1
 80012f8:	409a      	lsls	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	f043 0202 	orr.w	r2, r3, #2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130e:	2204      	movs	r2, #4
 8001310:	409a      	lsls	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d012      	beq.n	8001340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2204      	movs	r2, #4
 800132e:	409a      	lsls	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	f043 0204 	orr.w	r2, r3, #4
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	2210      	movs	r2, #16
 8001346:	409a      	lsls	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d043      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03c      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2210      	movs	r2, #16
 8001364:	409a      	lsls	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d018      	beq.n	80013aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d108      	bne.n	8001398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	2b00      	cmp	r3, #0
 800138c:	d024      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
 8001396:	e01f      	b.n	80013d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01b      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
 80013a8:	e016      	b.n	80013d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f022 0208 	bic.w	r2, r2, #8
 80013c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	2220      	movs	r2, #32
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 808e 	beq.w	8001506 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8086 	beq.w	8001506 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	2220      	movs	r2, #32
 8001400:	409a      	lsls	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b05      	cmp	r3, #5
 8001410:	d136      	bne.n	8001480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	f022 0216 	bic.w	r2, r2, #22
 8001420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	6952      	ldr	r2, [r2, #20]
 800142c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <HAL_DMA_IRQHandler+0x1da>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	f022 0208 	bic.w	r2, r2, #8
 8001450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	223f      	movs	r2, #63	; 0x3f
 8001458:	409a      	lsls	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	2b00      	cmp	r3, #0
 8001474:	d07d      	beq.n	8001572 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	4798      	blx	r3
        }
        return;
 800147e:	e078      	b.n	8001572 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01c      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d108      	bne.n	80014ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d030      	beq.n	8001506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	4798      	blx	r3
 80014ac:	e02b      	b.n	8001506 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d027      	beq.n	8001506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
 80014be:	e022      	b.n	8001506 <HAL_DMA_IRQHandler+0x29e>
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	f022 0210 	bic.w	r2, r2, #16
 80014e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	2b00      	cmp	r3, #0
 800150c:	d032      	beq.n	8001574 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d022      	beq.n	8001560 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3301      	adds	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4293      	cmp	r3, r2
 800153c:	d807      	bhi.n	800154e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f2      	bne.n	8001532 <HAL_DMA_IRQHandler+0x2ca>
 800154c:	e000      	b.n	8001550 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800154e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
 8001570:	e000      	b.n	8001574 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001572:	bf00      	nop
    }
  }
}
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800157a:	b480      	push	{r7}
 800157c:	b087      	sub	sp, #28
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	460b      	mov	r3, r1
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_DMA_RegisterCallback+0x20>
 8001596:	2302      	movs	r3, #2
 8001598:	e03d      	b.n	8001616 <HAL_DMA_RegisterCallback+0x9c>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d12a      	bne.n	8001604 <HAL_DMA_RegisterCallback+0x8a>
  {
    switch (CallbackID)
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d82a      	bhi.n	800160a <HAL_DMA_RegisterCallback+0x90>
 80015b4:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <HAL_DMA_RegisterCallback+0x42>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	080015d5 	.word	0x080015d5
 80015c0:	080015dd 	.word	0x080015dd
 80015c4:	080015e5 	.word	0x080015e5
 80015c8:	080015ed 	.word	0x080015ed
 80015cc:	080015f5 	.word	0x080015f5
 80015d0:	080015fd 	.word	0x080015fd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80015da:	e017      	b.n	800160c <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80015e2:	e013      	b.n	800160c <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80015ea:	e00f      	b.n	800160c <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80015f2:	e00b      	b.n	800160c <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80015fa:	e007      	b.n	800160c <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001602:	e003      	b.n	800160c <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	75fb      	strb	r3, [r7, #23]
 8001608:	e000      	b.n	800160c <HAL_DMA_RegisterCallback+0x92>
      break;
 800160a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_DMA_UnRegisterCallback+0x1e>
 800163c:	2302      	movs	r3, #2
 800163e:	e053      	b.n	80016e8 <HAL_DMA_UnRegisterCallback+0xc6>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d142      	bne.n	80016da <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b06      	cmp	r3, #6
 8001658:	d83b      	bhi.n	80016d2 <HAL_DMA_UnRegisterCallback+0xb0>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <HAL_DMA_UnRegisterCallback+0x3e>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	0800167d 	.word	0x0800167d
 8001664:	08001685 	.word	0x08001685
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001695 	.word	0x08001695
 8001670:	0800169d 	.word	0x0800169d
 8001674:	080016a5 	.word	0x080016a5
 8001678:	080016ad 	.word	0x080016ad
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001682:	e02c      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800168a:	e028      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001692:	e024      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800169a:	e020      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80016a2:	e01c      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80016aa:	e018      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80016d0:	e005      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
      break;
 80016d6:	bf00      	nop
 80016d8:	e001      	b.n	80016de <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001702:	b2db      	uxtb	r3, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001744:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	d108      	bne.n	8001768 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001766:	e007      	b.n	8001778 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	60da      	str	r2, [r3, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	3b10      	subs	r3, #16
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <DMA_CalcBaseAndBitshift+0x64>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <DMA_CalcBaseAndBitshift+0x68>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d909      	bls.n	80017c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	659a      	str	r2, [r3, #88]	; 0x58
 80017c4:	e007      	b.n	80017d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	aaaaaaab 	.word	0xaaaaaaab
 80017ec:	08014a24 	.word	0x08014a24

080017f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11f      	bne.n	800184a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d855      	bhi.n	80018bc <DMA_CheckFifoParam+0xcc>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <DMA_CheckFifoParam+0x28>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001829 	.word	0x08001829
 800181c:	0800183b 	.word	0x0800183b
 8001820:	08001829 	.word	0x08001829
 8001824:	080018bd 	.word	0x080018bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d045      	beq.n	80018c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001838:	e042      	b.n	80018c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001842:	d13f      	bne.n	80018c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e03c      	b.n	80018c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001852:	d121      	bne.n	8001898 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d836      	bhi.n	80018c8 <DMA_CheckFifoParam+0xd8>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <DMA_CheckFifoParam+0x70>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001871 	.word	0x08001871
 8001864:	08001877 	.word	0x08001877
 8001868:	08001871 	.word	0x08001871
 800186c:	08001889 	.word	0x08001889
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
      break;
 8001874:	e02f      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d024      	beq.n	80018cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001886:	e021      	b.n	80018cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001890:	d11e      	bne.n	80018d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001896:	e01b      	b.n	80018d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d902      	bls.n	80018a4 <DMA_CheckFifoParam+0xb4>
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d003      	beq.n	80018aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018a2:	e018      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
      break;
 80018a8:	e015      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00e      	beq.n	80018d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      break;
 80018ba:	e00b      	b.n	80018d4 <DMA_CheckFifoParam+0xe4>
      break;
 80018bc:	bf00      	nop
 80018be:	e00a      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018c0:	bf00      	nop
 80018c2:	e008      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018c4:	bf00      	nop
 80018c6:	e006      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018c8:	bf00      	nop
 80018ca:	e004      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018cc:	bf00      	nop
 80018ce:	e002      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80018d0:	bf00      	nop
 80018d2:	e000      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018d4:	bf00      	nop
    }
  } 
  
  return status; 
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e165      	b.n	8001bcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 8154 	bne.w	8001bc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x4a>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b12      	cmp	r3, #18
 800192c:	d123      	bne.n	8001976 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	69b9      	ldr	r1, [r7, #24]
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d00b      	beq.n	80019ca <HAL_GPIO_Init+0xe6>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019be:	2b11      	cmp	r3, #17
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b12      	cmp	r3, #18
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80ae 	beq.w	8001bc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4a5c      	ldr	r2, [pc, #368]	; (8001be0 <HAL_GPIO_Init+0x2fc>)
 8001a70:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_GPIO_Init+0x2fc>)
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b59      	ldr	r3, [pc, #356]	; (8001be0 <HAL_GPIO_Init+0x2fc>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <HAL_GPIO_Init+0x300>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d025      	beq.n	8001afe <HAL_GPIO_Init+0x21a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x308>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01f      	beq.n	8001afa <HAL_GPIO_Init+0x216>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x212>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_GPIO_Init+0x310>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x20e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_GPIO_Init+0x314>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x20a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x318>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x206>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x31c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x202>
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	e00c      	b.n	8001b00 <HAL_GPIO_Init+0x21c>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e00a      	b.n	8001b00 <HAL_GPIO_Init+0x21c>
 8001aea:	2305      	movs	r3, #5
 8001aec:	e008      	b.n	8001b00 <HAL_GPIO_Init+0x21c>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x21c>
 8001af2:	2303      	movs	r3, #3
 8001af4:	e004      	b.n	8001b00 <HAL_GPIO_Init+0x21c>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_Init+0x21c>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x21c>
 8001afe:	2300      	movs	r3, #0
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	f002 0203 	and.w	r2, r2, #3
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b10:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_GPIO_Init+0x300>)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b42:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b0f      	cmp	r3, #15
 8001bd0:	f67f ae96 	bls.w	8001900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3724      	adds	r7, #36	; 0x24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40021400 	.word	0x40021400
 8001c00:	40021800 	.word	0x40021800
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e0c8      	b.n	8001db6 <HAL_GPIO_DeInit+0x1ae>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	f040 80b8 	bne.w	8001db0 <HAL_GPIO_DeInit+0x1a8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c40:	4a62      	ldr	r2, [pc, #392]	; (8001dcc <HAL_GPIO_DeInit+0x1c4>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_GPIO_DeInit+0x1c8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_DeInit+0xae>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a59      	ldr	r2, [pc, #356]	; (8001dd4 <HAL_GPIO_DeInit+0x1cc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_DeInit+0xaa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_GPIO_DeInit+0x1d0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_DeInit+0xa6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <HAL_GPIO_DeInit+0x1d4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_DeInit+0xa2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a56      	ldr	r2, [pc, #344]	; (8001de0 <HAL_GPIO_DeInit+0x1d8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_DeInit+0x9e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a55      	ldr	r2, [pc, #340]	; (8001de4 <HAL_GPIO_DeInit+0x1dc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_DeInit+0x9a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <HAL_GPIO_DeInit+0x1e0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_DeInit+0x96>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00c      	b.n	8001cb8 <HAL_GPIO_DeInit+0xb0>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e00a      	b.n	8001cb8 <HAL_GPIO_DeInit+0xb0>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_DeInit+0xb0>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_DeInit+0xb0>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_DeInit+0xb0>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_DeInit+0xb0>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_DeInit+0xb0>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	fa03 f202 	lsl.w	r2, r3, r2
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d132      	bne.n	8001d30 <HAL_GPIO_DeInit+0x128>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001cda:	483c      	ldr	r0, [pc, #240]	; (8001dcc <HAL_GPIO_DeInit+0x1c4>)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	493a      	ldr	r1, [pc, #232]	; (8001dcc <HAL_GPIO_DeInit+0x1c4>)
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	0892      	lsrs	r2, r2, #2
 8001ce6:	3202      	adds	r2, #2
 8001ce8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	43d2      	mvns	r2, r2
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001cf8:	493c      	ldr	r1, [pc, #240]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4013      	ands	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d06:	4939      	ldr	r1, [pc, #228]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4013      	ands	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d14:	4935      	ldr	r1, [pc, #212]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001d22:	4932      	ldr	r1, [pc, #200]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_GPIO_DeInit+0x1e4>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2103      	movs	r1, #3
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	401a      	ands	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	08d9      	lsrs	r1, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3108      	adds	r1, #8
 8001d52:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	200f      	movs	r0, #15
 8001d60:	fa00 f303 	lsl.w	r3, r0, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4019      	ands	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2103      	movs	r1, #3
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2103      	movs	r1, #3
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	f67f af33 	bls.w	8001c24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021400 	.word	0x40021400
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	401a      	ands	r2, r3
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d104      	bne.n	8001e76 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	60fb      	str	r3, [r7, #12]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00f fec8 	bl	8011c8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40013c00 	.word	0x40013c00
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_EXTI_IRQHandler+0x6a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e22d      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d075      	beq.n	800203a <HAL_GPIO_EXTI_IRQHandler+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4e:	4ba3      	ldr	r3, [pc, #652]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d00c      	beq.n	8001f74 <HAL_GPIO_EXTI_IRQHandler+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5a:	4ba0      	ldr	r3, [pc, #640]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d112      	bne.n	8001f8c <HAL_GPIO_EXTI_IRQHandler+0xb4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f66:	4b9d      	ldr	r3, [pc, #628]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f72:	d10b      	bne.n	8001f8c <HAL_GPIO_EXTI_IRQHandler+0xb4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	4b99      	ldr	r3, [pc, #612]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05b      	beq.n	8002038 <HAL_GPIO_EXTI_IRQHandler+0x160>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d157      	bne.n	8002038 <HAL_GPIO_EXTI_IRQHandler+0x160>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e208      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d106      	bne.n	8001fa4 <HAL_GPIO_EXTI_IRQHandler+0xcc>
 8001f96:	4a91      	ldr	r2, [pc, #580]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001f98:	4b90      	ldr	r3, [pc, #576]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x108>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_GPIO_EXTI_IRQHandler+0xf0>
 8001fae:	4a8b      	ldr	r2, [pc, #556]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4a88      	ldr	r2, [pc, #544]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fbc:	4b87      	ldr	r3, [pc, #540]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x108>
 8001fc8:	4a84      	ldr	r2, [pc, #528]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fca:	4b84      	ldr	r3, [pc, #528]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4a81      	ldr	r2, [pc, #516]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fd6:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_GPIO_EXTI_IRQHandler+0x138>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe f9b2 	bl	8000350 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_GPIO_EXTI_IRQHandler+0x12a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe f9ae 	bl	8000350 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_GPIO_EXTI_IRQHandler+0x12a>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1cd      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x118>
 800200e:	e014      	b.n	800203a <HAL_GPIO_EXTI_IRQHandler+0x162>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe f99e 	bl	8000350 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_GPIO_EXTI_IRQHandler+0x152>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe f99a 	bl	8000350 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_GPIO_EXTI_IRQHandler+0x152>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1b9      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b6c      	ldr	r3, [pc, #432]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_GPIO_EXTI_IRQHandler+0x140>
 8002036:	e000      	b.n	800203a <HAL_GPIO_EXTI_IRQHandler+0x162>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_GPIO_EXTI_IRQHandler+0x236>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002046:	4b65      	ldr	r3, [pc, #404]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_GPIO_EXTI_IRQHandler+0x192>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002052:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11c      	bne.n	8002098 <HAL_GPIO_EXTI_IRQHandler+0x1c0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_GPIO_EXTI_IRQHandler+0x1c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_EXTI_IRQHandler+0x1aa>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <HAL_GPIO_EXTI_IRQHandler+0x1aa>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e18d      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4956      	ldr	r1, [pc, #344]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002084:	4b55      	ldr	r3, [pc, #340]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	e03a      	b.n	800210e <HAL_GPIO_EXTI_IRQHandler+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_GPIO_EXTI_IRQHandler+0x20a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a0:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_GPIO_EXTI_IRQHandler+0x308>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe f953 	bl	8000350 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_EXTI_IRQHandler+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ae:	f7fe f94f 	bl	8000350 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_GPIO_EXTI_IRQHandler+0x1e8>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e16e      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_GPIO_EXTI_IRQHandler+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4943      	ldr	r1, [pc, #268]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 80020ce:	4b43      	ldr	r3, [pc, #268]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e015      	b.n	800210e <HAL_GPIO_EXTI_IRQHandler+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_GPIO_EXTI_IRQHandler+0x308>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe f932 	bl	8000350 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_GPIO_EXTI_IRQHandler+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe f92e 	bl	8000350 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_GPIO_EXTI_IRQHandler+0x22a>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e14d      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x218>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d030      	beq.n	800217c <HAL_GPIO_EXTI_IRQHandler+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_GPIO_EXTI_IRQHandler+0x278>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x30c>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe f912 	bl	8000350 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_GPIO_EXTI_IRQHandler+0x26a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7fe f90e 	bl	8000350 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_GPIO_EXTI_IRQHandler+0x26a>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e12d      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_GPIO_EXTI_IRQHandler+0x258>
 800214e:	e015      	b.n	800217c <HAL_GPIO_EXTI_IRQHandler+0x2a4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x30c>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7fe f8fb 	bl	8000350 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	e008      	b.n	8002170 <HAL_GPIO_EXTI_IRQHandler+0x298>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215e:	f7fe f8f7 	bl	8000350 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_GPIO_EXTI_IRQHandler+0x298>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e116      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_GPIO_EXTI_IRQHandler+0x286>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a0 	beq.w	80022ca <HAL_GPIO_EXTI_IRQHandler+0x3f2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10f      	bne.n	80021ba <HAL_GPIO_EXTI_IRQHandler+0x2e2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x304>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x310>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d121      	bne.n	800220a <HAL_GPIO_EXTI_IRQHandler+0x332>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x310>)
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x310>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7fe f8bd 	bl	8000350 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e011      	b.n	80021fe <HAL_GPIO_EXTI_IRQHandler+0x326>
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	42470000 	.word	0x42470000
 80021e4:	42470e80 	.word	0x42470e80
 80021e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe f8b0 	bl	8000350 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_GPIO_EXTI_IRQHandler+0x326>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0cf      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x4d0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_GPIO_EXTI_IRQHandler+0x314>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d106      	bne.n	8002220 <HAL_GPIO_EXTI_IRQHandler+0x348>
 8002212:	4a66      	ldr	r2, [pc, #408]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002214:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	e01c      	b.n	800225a <HAL_GPIO_EXTI_IRQHandler+0x382>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d10c      	bne.n	8002242 <HAL_GPIO_EXTI_IRQHandler+0x36a>
 8002228:	4a60      	ldr	r2, [pc, #384]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 800222a:	4b60      	ldr	r3, [pc, #384]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	4a5d      	ldr	r2, [pc, #372]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6713      	str	r3, [r2, #112]	; 0x70
 8002240:	e00b      	b.n	800225a <HAL_GPIO_EXTI_IRQHandler+0x382>
 8002242:	4a5a      	ldr	r2, [pc, #360]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
 800224e:	4a57      	ldr	r2, [pc, #348]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002250:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d015      	beq.n	800228e <HAL_GPIO_EXTI_IRQHandler+0x3b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe f875 	bl	8000350 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0x3a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe f871 	bl	8000350 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0x3a8>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e08e      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ee      	beq.n	800226a <HAL_GPIO_EXTI_IRQHandler+0x392>
 800228c:	e014      	b.n	80022b8 <HAL_GPIO_EXTI_IRQHandler+0x3e0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe f85f 	bl	8000350 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_GPIO_EXTI_IRQHandler+0x3d4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe f85b 	bl	8000350 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_GPIO_EXTI_IRQHandler+0x3d4>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e078      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ee      	bne.n	8002296 <HAL_GPIO_EXTI_IRQHandler+0x3be>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_GPIO_EXTI_IRQHandler+0x3f2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d064      	beq.n	800239c <HAL_GPIO_EXTI_IRQHandler+0x4c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d05c      	beq.n	8002398 <HAL_GPIO_EXTI_IRQHandler+0x4c0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d141      	bne.n	800236a <HAL_GPIO_EXTI_IRQHandler+0x492>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x4d8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe f830 	bl	8000350 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_GPIO_EXTI_IRQHandler+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe f82c 	bl	8000350 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_GPIO_EXTI_IRQHandler+0x42e>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04b      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_GPIO_EXTI_IRQHandler+0x41c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002312:	4926      	ldr	r1, [pc, #152]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	019b      	lsls	r3, r3, #6
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x4d8>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe f805 	bl	8000350 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_GPIO_EXTI_IRQHandler+0x484>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe f801 	bl	8000350 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_GPIO_EXTI_IRQHandler+0x484>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e020      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_GPIO_EXTI_IRQHandler+0x472>
 8002368:	e018      	b.n	800239c <HAL_GPIO_EXTI_IRQHandler+0x4c4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x4d8>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fd ffee 	bl	8000350 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_GPIO_EXTI_IRQHandler+0x4b2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fd ffea 	bl	8000350 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_GPIO_EXTI_IRQHandler+0x4b2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e009      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x4d4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_GPIO_EXTI_IRQHandler+0x4a0>
 8002396:	e001      	b.n	800239c <HAL_GPIO_EXTI_IRQHandler+0x4c4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_GPIO_EXTI_IRQHandler+0x4c6>
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40007000 	.word	0x40007000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470060 	.word	0x42470060

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0ca      	b.n	800255e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d20c      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b64      	ldr	r3, [pc, #400]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b62      	ldr	r3, [pc, #392]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 020f 	and.w	r2, r3, #15
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0b6      	b.n	800255e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	4b52      	ldr	r3, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800242a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	494f      	ldr	r1, [pc, #316]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	4b4f      	ldr	r3, [pc, #316]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d044      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d119      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e07d      	b.n	800255e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d003      	beq.n	8002472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06d      	b.n	800255e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e065      	b.n	800255e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4936      	ldr	r1, [pc, #216]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 0203 	bic.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7fd ff54 	bl	8000350 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7fd ff50 	bl	8000350 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04d      	b.n	800255e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 020f 	and.w	r2, r3, #15
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d90c      	bls.n	80024fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 020f 	and.w	r2, r3, #15
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e030      	b.n	800255e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002508:	4918      	ldr	r1, [pc, #96]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002526:	4911      	ldr	r1, [pc, #68]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800253a:	f001 f979 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 800253e:	4601      	mov	r1, r0
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	5cd3      	ldrb	r3, [r2, r3]
 800254e:	fa21 f303 	lsr.w	r3, r1, r3
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002556:	2000      	movs	r0, #0
 8002558:	f010 ff36 	bl	80133c8 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	080153ac 	.word	0x080153ac
 8002574:	2000000c 	.word	0x2000000c

08002578 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d129      	bne.n	80025de <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	4a2b      	ldr	r2, [pc, #172]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80025a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	481f      	ldr	r0, [pc, #124]	; (8002640 <HAL_RCC_MCOConfig+0xc8>)
 80025c4:	f7ff f98e 	bl	80018e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80025c8:	481c      	ldr	r0, [pc, #112]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	430b      	orrs	r3, r1
 80025d8:	4313      	orrs	r3, r2
 80025da:	6083      	str	r3, [r0, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80025dc:	e029      	b.n	8002632 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	4a16      	ldr	r2, [pc, #88]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80025fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800260c:	2300      	movs	r3, #0
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	4619      	mov	r1, r3
 8002616:	480b      	ldr	r0, [pc, #44]	; (8002644 <HAL_RCC_MCOConfig+0xcc>)
 8002618:	f7ff f964 	bl	80018e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800261c:	4807      	ldr	r0, [pc, #28]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <HAL_RCC_MCOConfig+0xc4>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	00d9      	lsls	r1, r3, #3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	430b      	orrs	r3, r1
 800262e:	4313      	orrs	r3, r2
 8002630:	6083      	str	r3, [r0, #8]
}
 8002632:	bf00      	nop
 8002634:	3730      	adds	r7, #48	; 0x30
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020800 	.word	0x40020800

08002648 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_EnableCSS+0x14>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	4247004c 	.word	0x4247004c

08002660 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_DisableCSS+0x14>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	4247004c 	.word	0x4247004c
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800267c:	b087      	sub	sp, #28
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002680:	2200      	movs	r2, #0
 8002682:	60fa      	str	r2, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	617a      	str	r2, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800268c:	2200      	movs	r2, #0
 800268e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002690:	4a51      	ldr	r2, [pc, #324]	; (80027d8 <HAL_RCC_DisableCSS+0x178>)
 8002692:	6892      	ldr	r2, [r2, #8]
 8002694:	f002 020c 	and.w	r2, r2, #12
 8002698:	2a04      	cmp	r2, #4
 800269a:	d007      	beq.n	80026ac <HAL_RCC_DisableCSS+0x4c>
 800269c:	2a08      	cmp	r2, #8
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_DisableCSS+0x52>
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	f040 8090 	bne.w	80027c6 <HAL_RCC_DisableCSS+0x166>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_RCC_DisableCSS+0x17c>)
 80026a8:	613b      	str	r3, [r7, #16]
       break;
 80026aa:	e08f      	b.n	80027cc <HAL_RCC_DisableCSS+0x16c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCC_DisableCSS+0x180>)
 80026ae:	613b      	str	r3, [r7, #16]
      break;
 80026b0:	e08c      	b.n	80027cc <HAL_RCC_DisableCSS+0x16c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b2:	4a49      	ldr	r2, [pc, #292]	; (80027d8 <HAL_RCC_DisableCSS+0x178>)
 80026b4:	6852      	ldr	r2, [r2, #4]
 80026b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80026ba:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026bc:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <HAL_RCC_DisableCSS+0x178>)
 80026be:	6852      	ldr	r2, [r2, #4]
 80026c0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80026c4:	2a00      	cmp	r2, #0
 80026c6:	d023      	beq.n	8002710 <HAL_RCC_DisableCSS+0xb0>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c8:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <HAL_RCC_DisableCSS+0x178>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	f04f 0400 	mov.w	r4, #0
 80026d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	ea03 0301 	and.w	r3, r3, r1
 80026de:	ea04 0402 	and.w	r4, r4, r2
 80026e2:	4a3f      	ldr	r2, [pc, #252]	; (80027e0 <HAL_RCC_DisableCSS+0x180>)
 80026e4:	fb02 f104 	mul.w	r1, r2, r4
 80026e8:	2200      	movs	r2, #0
 80026ea:	fb02 f203 	mul.w	r2, r2, r3
 80026ee:	440a      	add	r2, r1
 80026f0:	493b      	ldr	r1, [pc, #236]	; (80027e0 <HAL_RCC_DisableCSS+0x180>)
 80026f2:	fba3 0101 	umull	r0, r1, r3, r1
 80026f6:	1853      	adds	r3, r2, r1
 80026f8:	4619      	mov	r1, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f04f 0400 	mov.w	r4, #0
 8002700:	461a      	mov	r2, r3
 8002702:	4623      	mov	r3, r4
 8002704:	f011 ff5a 	bl	80145bc <__aeabi_uldivmod>
 8002708:	4603      	mov	r3, r0
 800270a:	460c      	mov	r4, r1
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e04c      	b.n	80027aa <HAL_RCC_DisableCSS+0x14a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002710:	4a31      	ldr	r2, [pc, #196]	; (80027d8 <HAL_RCC_DisableCSS+0x178>)
 8002712:	6852      	ldr	r2, [r2, #4]
 8002714:	0992      	lsrs	r2, r2, #6
 8002716:	4611      	mov	r1, r2
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002720:	f04f 0600 	mov.w	r6, #0
 8002724:	ea05 0501 	and.w	r5, r5, r1
 8002728:	ea06 0602 	and.w	r6, r6, r2
 800272c:	4629      	mov	r1, r5
 800272e:	4632      	mov	r2, r6
 8002730:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002734:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002738:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800273c:	4651      	mov	r1, sl
 800273e:	465a      	mov	r2, fp
 8002740:	46aa      	mov	sl, r5
 8002742:	46b3      	mov	fp, r6
 8002744:	4655      	mov	r5, sl
 8002746:	465e      	mov	r6, fp
 8002748:	1b4d      	subs	r5, r1, r5
 800274a:	eb62 0606 	sbc.w	r6, r2, r6
 800274e:	4629      	mov	r1, r5
 8002750:	4632      	mov	r2, r6
 8002752:	0194      	lsls	r4, r2, #6
 8002754:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002758:	018b      	lsls	r3, r1, #6
 800275a:	1a5b      	subs	r3, r3, r1
 800275c:	eb64 0402 	sbc.w	r4, r4, r2
 8002760:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002764:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002768:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800276c:	4643      	mov	r3, r8
 800276e:	464c      	mov	r4, r9
 8002770:	4655      	mov	r5, sl
 8002772:	465e      	mov	r6, fp
 8002774:	18ed      	adds	r5, r5, r3
 8002776:	eb46 0604 	adc.w	r6, r6, r4
 800277a:	462b      	mov	r3, r5
 800277c:	4634      	mov	r4, r6
 800277e:	02a2      	lsls	r2, r4, #10
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002792:	4618      	mov	r0, r3
 8002794:	4621      	mov	r1, r4
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	461a      	mov	r2, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	f011 ff0c 	bl	80145bc <__aeabi_uldivmod>
 80027a4:	4603      	mov	r3, r0
 80027a6:	460c      	mov	r4, r1
 80027a8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_DisableCSS+0x178>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	3301      	adds	r3, #1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	613b      	str	r3, [r7, #16]
      break;
 80027c4:	e002      	b.n	80027cc <HAL_RCC_DisableCSS+0x16c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_DisableCSS+0x17c>)
 80027c8:	613b      	str	r3, [r7, #16]
      break;
 80027ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027cc:	693b      	ldr	r3, [r7, #16]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	017d7840 	.word	0x017d7840

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000000c 	.word	0x2000000c

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4601      	mov	r1, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	080153bc 	.word	0x080153bc

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4601      	mov	r1, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	080153bc 	.word	0x080153bc
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	220f      	movs	r2, #15
 8002858:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800285a:	4b45      	ldr	r3, [pc, #276]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002866:	d104      	bne.n	8002872 <HAL_RCC_GetPCLK2Freq+0x4e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	e00e      	b.n	8002890 <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8002872:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287e:	d104      	bne.n	800288a <HAL_RCC_GetPCLK2Freq+0x66>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	e002      	b.n	8002890 <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8002890:	4b37      	ldr	r3, [pc, #220]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d103      	bne.n	80028a4 <HAL_RCC_GetPCLK2Freq+0x80>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	e002      	b.n	80028aa <HAL_RCC_GetPCLK2Freq+0x86>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d103      	bne.n	80028cc <HAL_RCC_GetPCLK2Freq+0xa8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2205      	movs	r2, #5
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	e00c      	b.n	80028e6 <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80028cc:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d103      	bne.n	80028e0 <HAL_RCC_GetPCLK2Freq+0xbc>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	e002      	b.n	80028e6 <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d103      	bne.n	80028fa <HAL_RCC_GetPCLK2Freq+0xd6>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	e002      	b.n	8002900 <HAL_RCC_GetPCLK2Freq+0xdc>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290c:	d103      	bne.n	8002916 <HAL_RCC_GetPCLK2Freq+0xf2>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	619a      	str	r2, [r3, #24]
 8002914:	e002      	b.n	800291c <HAL_RCC_GetPCLK2Freq+0xf8>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800294a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	0c1a      	lsrs	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0e1b      	lsrs	r3, r3, #24
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	220f      	movs	r2, #15
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_GetClockConfig+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 020f 	and.w	r2, r3, #15
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d104      	bne.n	80029f2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80029e8:	f000 f80a 	bl	8002a00 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	701a      	strb	r2, [r3, #0]
  }
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	4002380e 	.word	0x4002380e

08002a00 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d010      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002a48:	496f      	ldr	r1, [pc, #444]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a4a:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a50:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002a76:	4964      	ldr	r1, [pc, #400]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a78:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7e:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa4:	4958      	ldr	r1, [pc, #352]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa6:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d017      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ae0:	4949      	ldr	r1, [pc, #292]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ae2:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afe:	d101      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 808a 	beq.w	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4a39      	ldr	r2, [pc, #228]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b3a:	4a34      	ldr	r2, [pc, #208]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b46:	f7fd fc03 	bl	8000350 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7fd fbff 	bl	8000350 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e278      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6c:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b74:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02f      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d028      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b92:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d114      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fd fbcd 	bl	8000350 <HAL_GetTick>
 8002bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fd fbc9 	bl	8000350 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e240      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be8:	d114      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002bea:	4907      	ldr	r1, [pc, #28]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
 8002c04:	e00c      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	42470e40 	.word	0x42470e40
 8002c14:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c1e:	6093      	str	r3, [r2, #8]
 8002c20:	4947      	ldr	r1, [pc, #284]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c3e:	4a41      	ldr	r2, [pc, #260]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c46:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002c54:	493a      	ldr	r1, [pc, #232]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c56:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c76:	4932      	ldr	r1, [pc, #200]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d011      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c98:	4929      	ldr	r1, [pc, #164]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c9a:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002cc8:	491d      	ldr	r1, [pc, #116]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d011      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002cea:	4915      	ldr	r1, [pc, #84]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d08:	d101      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d005      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d1c:	f040 80ff 	bne.w	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d26:	f7fd fb13 	bl	8000350 <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2c:	e00e      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d2e:	f7fd fb0f 	bl	8000350 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d907      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e188      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d40:	40023800 	.word	0x40023800
 8002d44:	424711e0 	.word	0x424711e0
 8002d48:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ea      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d028      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d124      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d80:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d98:	0e1b      	lsrs	r3, r3, #24
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002da0:	4969      	ldr	r1, [pc, #420]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	019b      	lsls	r3, r3, #6
 8002dac:	431a      	orrs	r2, r3
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	061b      	lsls	r3, r3, #24
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	071b      	lsls	r3, r3, #28
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d035      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df4:	d130      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002df6:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e08:	4b4f      	ldr	r3, [pc, #316]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	0f1b      	lsrs	r3, r3, #28
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002e16:	494c      	ldr	r1, [pc, #304]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	431a      	orrs	r2, r3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e40:	4941      	ldr	r1, [pc, #260]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e48:	f023 021f 	bic.w	r2, r3, #31
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d029      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6c:	d124      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e6e:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e86:	0f1b      	lsrs	r3, r3, #28
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002e8e:	492e      	ldr	r1, [pc, #184]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	019b      	lsls	r3, r3, #6
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	431a      	orrs	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d016      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ec4:	4920      	ldr	r1, [pc, #128]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	019b      	lsls	r3, r3, #6
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	061b      	lsls	r3, r3, #24
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	071b      	lsls	r3, r3, #28
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef8:	f7fd fa2a 	bl	8000350 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f00:	f7fd fa26 	bl	8000350 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e09f      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	f040 8095 	bne.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fd fa10 	bl	8000350 <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f32:	e00f      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002f34:	f7fd fa0c 	bl	8000350 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d908      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e085      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470068 	.word	0x42470068
 8002f50:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f60:	d0e8      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d02b      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d127      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	3301      	adds	r3, #1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002f9c:	492f      	ldr	r1, [pc, #188]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	019b      	lsls	r3, r3, #6
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fc0:	4926      	ldr	r1, [pc, #152]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01d      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fee:	d118      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002ffe:	4917      	ldr	r1, [pc, #92]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	3b01      	subs	r3, #1
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003028:	f7fd f992 	bl	8000350 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003030:	f7fd f98e 	bl	8000350 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e007      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304e:	d1ef      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3730      	adds	r7, #48	; 0x30
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	42470070 	.word	0x42470070

08003064 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003072:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 8003074:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8003082:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003092:	4b56      	ldr	r3, [pc, #344]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005a      	lsls	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80030a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ac:	0e1b      	lsrs	r3, r3, #24
 80030ae:	f003 020f 	and.w	r2, r3, #15
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030b6:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030bc:	0f1b      	lsrs	r3, r3, #28
 80030be:	f003 0207 	and.w	r2, r3, #7
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	615a      	str	r2, [r3, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
 80030c6:	4b49      	ldr	r3, [pc, #292]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80030d4:	4b45      	ldr	r3, [pc, #276]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80030e4:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	3301      	adds	r3, #1
 80030f2:	005a      	lsls	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030f8:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	0e1b      	lsrs	r3, r3, #24
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 8003108:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 800310a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 8003116:	4b35      	ldr	r3, [pc, #212]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 021f 	and.w	r2, r3, #31
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003148:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003150:	4b26      	ldr	r3, [pc, #152]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003156:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003166:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8003178:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 8003186:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319a:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <HAL_RCCEx_GetPeriphCLKConfig+0x172>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	2b07      	cmp	r3, #7
 8003216:	f200 81fa 	bhi.w	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	080033e9 	.word	0x080033e9
 8003224:	08003505 	.word	0x08003505
 8003228:	0800360f 	.word	0x0800360f
 800322c:	08003241 	.word	0x08003241
 8003230:	0800360f 	.word	0x0800360f
 8003234:	0800360f 	.word	0x0800360f
 8003238:	0800360f 	.word	0x0800360f
 800323c:	08003241 	.word	0x08003241
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003240:	4bac      	ldr	r3, [pc, #688]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003246:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800324e:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003256:	f000 80b7 	beq.w	80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800325a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800325e:	d809      	bhi.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8003260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003264:	d04c      	beq.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800326a:	f000 8083 	beq.w	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          }
          break;
        }
      default :
        {
          break;
 8003272:	e0b8      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
      switch (saiclocksource)
 8003274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003278:	d07c      	beq.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800327a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800327e:	f000 80a6 	beq.w	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8003282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003286:	d03b      	beq.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          break;
 8003288:	e0ad      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800328a:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003296:	4b97      	ldr	r3, [pc, #604]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a0:	4a95      	ldr	r2, [pc, #596]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80032aa:	4b92      	ldr	r3, [pc, #584]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	4a91      	ldr	r2, [pc, #580]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80032bc:	4b8d      	ldr	r3, [pc, #564]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	0e1b      	lsrs	r3, r3, #24
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80032ca:	4b8a      	ldr	r3, [pc, #552]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	fb02 f203 	mul.w	r2, r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80032e4:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80032e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	3301      	adds	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	61fb      	str	r3, [r7, #28]
          break;
 80032fe:	e072      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003300:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800330c:	4b79      	ldr	r3, [pc, #484]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800330e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003316:	4a78      	ldr	r2, [pc, #480]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	e008      	b.n	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003320:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332a:	4a74      	ldr	r2, [pc, #464]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003332:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003338:	0e1b      	lsrs	r3, r3, #24
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003340:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	fb02 f203 	mul.w	r2, r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800335a:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800335c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	3301      	adds	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	61fb      	str	r3, [r7, #28]
          break;
 8003372:	e038      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003374:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d108      	bne.n	8003392 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003380:	4b5c      	ldr	r3, [pc, #368]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003388:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	e007      	b.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003392:	4b58      	ldr	r3, [pc, #352]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339a:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80033a2:	4b54      	ldr	r3, [pc, #336]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0f1b      	lsrs	r3, r3, #28
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80033ae:	4b51      	ldr	r3, [pc, #324]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	fb02 f203 	mul.w	r2, r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	61fb      	str	r3, [r7, #28]
          break;
 80033c6:	e00e      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 80033c8:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80033ca:	61fb      	str	r3, [r7, #28]
          break;
 80033cc:	e00b      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033ce:	4b49      	ldr	r3, [pc, #292]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
            frequency = (uint32_t)(HSI_VALUE);
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80033dc:	61fb      	str	r3, [r7, #28]
          break;
 80033de:	e001      	b.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            frequency = (uint32_t)(HSE_VALUE);
 80033e0:	4b46      	ldr	r3, [pc, #280]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80033e2:	61fb      	str	r3, [r7, #28]
          break;
 80033e4:	bf00      	nop
        }
      }
      break;
 80033e6:	e112      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80033ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ee:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80033f2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033fa:	d00c      	beq.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 80033fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003400:	d802      	bhi.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8003406:	e070      	b.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8003408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340c:	d035      	beq.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800340e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003412:	d05d      	beq.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8003414:	e069      	b.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003416:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003418:	61fb      	str	r3, [r7, #28]
          break;
 800341a:	e069      	b.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800341c:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003428:	d109      	bne.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800342a:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800342c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	4a31      	ldr	r2, [pc, #196]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	e008      	b.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003448:	4a2b      	ldr	r2, [pc, #172]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346a:	0f1b      	lsrs	r3, r3, #28
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	61fb      	str	r3, [r7, #28]
          break;
 8003478:	e03a      	b.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003486:	d108      	bne.n	800349a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	e007      	b.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0f1b      	lsrs	r3, r3, #28
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	61fb      	str	r3, [r7, #28]
          break;
 80034ce:	e00f      	b.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034dc:	d102      	bne.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          {
            frequency = HSE_VALUE;
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80034e0:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80034e2:	e005      	b.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
            frequency = HSI_VALUE;
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80034e6:	61fb      	str	r3, [r7, #28]
          break;
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
          break;
 80034ee:	bf00      	nop
        }
      }
      break;
 80034f0:	e08d      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	017d7840 	.word	0x017d7840
 8003500:	00bb8000 	.word	0x00bb8000
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003504:	4b45      	ldr	r3, [pc, #276]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8003506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800350e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003516:	d00c      	beq.n	8003532 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8003518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351c:	d802      	bhi.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8003522:	e070      	b.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003528:	d035      	beq.n	8003596 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800352a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800352e:	d05d      	beq.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003530:	e069      	b.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x430>)
 8003534:	61fb      	str	r3, [r7, #28]
          break;
 8003536:	e069      	b.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003538:	4b38      	ldr	r3, [pc, #224]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003544:	d109      	bne.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003546:	4b35      	ldr	r3, [pc, #212]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8003548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003550:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e008      	b.n	800356c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800355a:	4b30      	ldr	r3, [pc, #192]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800355c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003564:	4a30      	ldr	r2, [pc, #192]	; (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800356e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003580:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8003582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003586:	0f1b      	lsrs	r3, r3, #28
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	61fb      	str	r3, [r7, #28]
          break;
 8003594:	e03a      	b.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a2:	d108      	bne.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e007      	b.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035be:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0f1b      	lsrs	r3, r3, #28
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	61fb      	str	r3, [r7, #28]
          break;
 80035ea:	e00f      	b.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f8:	d102      	bne.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          {
            frequency = HSE_VALUE;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80035fc:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80035fe:	e005      	b.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            frequency = HSI_VALUE;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003602:	61fb      	str	r3, [r7, #28]
          break;
 8003604:	e002      	b.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
          break;
 800360a:	bf00      	nop
        }
      }
      break;
 800360c:	bf00      	nop
    }
  }
  return frequency;
 800360e:	69fb      	ldr	r3, [r7, #28]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3724      	adds	r7, #36	; 0x24
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40023800 	.word	0x40023800
 8003620:	00bb8000 	.word	0x00bb8000
 8003624:	017d7840 	.word	0x017d7840
 8003628:	00f42400 	.word	0x00f42400

0800362c <HAL_RCCEx_SelectLSEMode>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
  * @retval None
  */
void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(Mode));
  if(Mode == RCC_LSE_HIGHDRIVE_MODE)
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCCEx_SelectLSEMode+0x1e>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 800363c:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCCEx_SelectLSEMode+0x38>)
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCCEx_SelectLSEMode+0x38>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	f043 0308 	orr.w	r3, r3, #8
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
 8003648:	e005      	b.n	8003656 <HAL_RCCEx_SelectLSEMode+0x2a>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 800364a:	4a06      	ldr	r2, [pc, #24]	; (8003664 <HAL_RCCEx_SelectLSEMode+0x38>)
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCCEx_SelectLSEMode+0x38>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f023 0308 	bic.w	r3, r3, #8
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8003670:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_RCCEx_EnablePLLI2S+0x98>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8003676:	f7fc fe6b 	bl	8000350 <HAL_GetTick>
 800367a:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800367e:	f7fc fe67 	bl	8000350 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e033      	b.n	80036f8 <HAL_RCCEx_EnablePLLI2S+0x90>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_RCCEx_EnablePLLI2S+0x9c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCCEx_EnablePLLI2S+0x16>
#if defined(STM32F446xx)
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
  /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
  /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
 800369c:	4919      	ldr	r1, [pc, #100]	; (8003704 <HAL_RCCEx_EnablePLLI2S+0x9c>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	019b      	lsls	r3, r3, #6
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	061b      	lsls	r3, r3, #24
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	071b      	lsls	r3, r3, #28
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCCEx_EnablePLLI2S+0x98>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 80036d0:	f7fc fe3e 	bl	8000350 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCCEx_EnablePLLI2S+0x82>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036d8:	f7fc fe3a 	bl	8000350 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_EnablePLLI2S+0x82>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e006      	b.n	80036f8 <HAL_RCCEx_EnablePLLI2S+0x90>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCCEx_EnablePLLI2S+0x9c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCCEx_EnablePLLI2S+0x70>
    }
  }

 return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	42470068 	.word	0x42470068
 8003704:	40023800 	.word	0x40023800

08003708 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8003714:	f7fc fe1c 	bl	8000350 <HAL_GetTick>
 8003718:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371c:	f7fc fe18 	bl	8000350 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e006      	b.n	800373c <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCCEx_DisablePLLI2S+0x40>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	42470068 	.word	0x42470068
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_RCCEx_EnablePLLSAI>:
  * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
  *         contains the configuration information for the PLLSAI
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLSAICFGR_PLLSAIR)
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
#endif /* RCC_PLLSAICFGR_PLLSAIR */

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCCEx_EnablePLLSAI+0x94>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
 800375a:	f7fc fdf9 	bl	8000350 <HAL_GetTick>
 800375e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCCEx_EnablePLLSAI+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003762:	f7fc fdf5 	bl	8000350 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCCEx_EnablePLLSAI+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e031      	b.n	80037d8 <HAL_RCCEx_EnablePLLSAI+0x8c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCCEx_EnablePLLSAI+0x98>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003780:	d0ef      	beq.n	8003762 <HAL_RCCEx_EnablePLLSAI+0x16>
#if defined(STM32F446xx)
  /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */
  /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
  /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIM, PLLSAIInit->PLLSAIN, \
 8003782:	4918      	ldr	r1, [pc, #96]	; (80037e4 <HAL_RCCEx_EnablePLLSAI+0x98>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
#endif /* STM32F446xx */

  /* Enable the PLLSAI */
  __HAL_RCC_PLLSAI_ENABLE();
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_RCCEx_EnablePLLSAI+0x94>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is ready */
  tickstart = HAL_GetTick();
 80037ae:	f7fc fdcf 	bl	8000350 <HAL_GetTick>
 80037b2:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCCEx_EnablePLLSAI+0x7c>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80037b6:	f7fc fdcb 	bl	8000350 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCCEx_EnablePLLSAI+0x7c>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e007      	b.n	80037d8 <HAL_RCCEx_EnablePLLSAI+0x8c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCCEx_EnablePLLSAI+0x98>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d4:	d1ef      	bne.n	80037b6 <HAL_RCCEx_EnablePLLSAI+0x6a>
    }
  }

 return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	42470070 	.word	0x42470070
 80037e4:	40023800 	.word	0x40023800

080037e8 <HAL_RCCEx_DisablePLLSAI>:
/**
  * @brief  Disable PLLSAI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_RCCEx_DisablePLLSAI+0x40>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
 80037f4:	f7fc fdac 	bl	8000350 <HAL_GetTick>
 80037f8:	6078      	str	r0, [r7, #4]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCCEx_DisablePLLSAI+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037fc:	f7fc fda8 	bl	8000350 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCCEx_DisablePLLSAI+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e007      	b.n	800381e <HAL_RCCEx_DisablePLLSAI+0x36>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_RCCEx_DisablePLLSAI+0x44>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800381a:	d0ef      	beq.n	80037fc <HAL_RCCEx_DisablePLLSAI+0x14>
    }
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	42470070 	.word	0x42470070
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	b091      	sub	sp, #68	; 0x44
 8003836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t pllr = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800384c:	4b9e      	ldr	r3, [pc, #632]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b0c      	cmp	r3, #12
 8003856:	f200 812d 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x284>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <HAL_RCC_GetSysClockFreq+0x30>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003895 	.word	0x08003895
 8003864:	08003ab5 	.word	0x08003ab5
 8003868:	08003ab5 	.word	0x08003ab5
 800386c:	08003ab5 	.word	0x08003ab5
 8003870:	0800389b 	.word	0x0800389b
 8003874:	08003ab5 	.word	0x08003ab5
 8003878:	08003ab5 	.word	0x08003ab5
 800387c:	08003ab5 	.word	0x08003ab5
 8003880:	080038a1 	.word	0x080038a1
 8003884:	08003ab5 	.word	0x08003ab5
 8003888:	08003ab5 	.word	0x08003ab5
 800388c:	08003ab5 	.word	0x08003ab5
 8003890:	080039b7 	.word	0x080039b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b8d      	ldr	r3, [pc, #564]	; (8003acc <HAL_RCC_GetSysClockFreq+0x29c>)
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003898:	e10f      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389a:	4b8d      	ldr	r3, [pc, #564]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800389e:	e10c      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a0:	4b89      	ldr	r3, [pc, #548]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038aa:	4b87      	ldr	r3, [pc, #540]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d023      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b84      	ldr	r3, [pc, #528]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	f04f 0400 	mov.w	r4, #0
 80038c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	ea03 0301 	and.w	r3, r3, r1
 80038cc:	ea04 0402 	and.w	r4, r4, r2
 80038d0:	4a7f      	ldr	r2, [pc, #508]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80038d2:	fb02 f104 	mul.w	r1, r2, r4
 80038d6:	2200      	movs	r2, #0
 80038d8:	fb02 f203 	mul.w	r2, r2, r3
 80038dc:	440a      	add	r2, r1
 80038de:	497c      	ldr	r1, [pc, #496]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80038e0:	fba3 0101 	umull	r0, r1, r3, r1
 80038e4:	1853      	adds	r3, r2, r1
 80038e6:	4619      	mov	r1, r3
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	f04f 0400 	mov.w	r4, #0
 80038ee:	461a      	mov	r2, r3
 80038f0:	4623      	mov	r3, r4
 80038f2:	f010 fe63 	bl	80145bc <__aeabi_uldivmod>
 80038f6:	4603      	mov	r3, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fc:	e04d      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fe:	4b72      	ldr	r3, [pc, #456]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	099b      	lsrs	r3, r3, #6
 8003904:	f04f 0400 	mov.w	r4, #0
 8003908:	f240 11ff 	movw	r1, #511	; 0x1ff
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	ea01 0103 	and.w	r1, r1, r3
 8003914:	ea02 0204 	and.w	r2, r2, r4
 8003918:	460b      	mov	r3, r1
 800391a:	4614      	mov	r4, r2
 800391c:	0160      	lsls	r0, r4, #5
 800391e:	6278      	str	r0, [r7, #36]	; 0x24
 8003920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003922:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003926:	6278      	str	r0, [r7, #36]	; 0x24
 8003928:	015b      	lsls	r3, r3, #5
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003930:	1a5b      	subs	r3, r3, r1
 8003932:	eb64 0402 	sbc.w	r4, r4, r2
 8003936:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800393a:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800393e:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003942:	ebb8 0803 	subs.w	r8, r8, r3
 8003946:	eb69 0904 	sbc.w	r9, r9, r4
 800394a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003962:	eb18 0801 	adds.w	r8, r8, r1
 8003966:	eb49 0902 	adc.w	r9, r9, r2
 800396a:	ea4f 2389 	mov.w	r3, r9, lsl #10
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	ea43 5398 	orr.w	r3, r3, r8, lsr #22
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	ea4f 2388 	mov.w	r3, r8, lsl #10
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003982:	4640      	mov	r0, r8
 8003984:	4649      	mov	r1, r9
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	f04f 0400 	mov.w	r4, #0
 800398c:	461a      	mov	r2, r3
 800398e:	4623      	mov	r3, r4
 8003990:	f010 fe14 	bl	80145bc <__aeabi_uldivmod>
 8003994:	4603      	mov	r3, r0
 8003996:	460c      	mov	r4, r1
 8003998:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800399a:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	3301      	adds	r3, #1
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039b4:	e081      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c0:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d023      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1e4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039cc:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	099b      	lsrs	r3, r3, #6
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	ea03 0301 	and.w	r3, r3, r1
 80039e2:	ea04 0402 	and.w	r4, r4, r2
 80039e6:	4a3a      	ldr	r2, [pc, #232]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80039e8:	fb02 f104 	mul.w	r1, r2, r4
 80039ec:	2200      	movs	r2, #0
 80039ee:	fb02 f203 	mul.w	r2, r2, r3
 80039f2:	440a      	add	r2, r1
 80039f4:	4936      	ldr	r1, [pc, #216]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80039f6:	fba3 0101 	umull	r0, r1, r3, r1
 80039fa:	1853      	adds	r3, r2, r1
 80039fc:	4619      	mov	r1, r3
 80039fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	461a      	mov	r2, r3
 8003a06:	4623      	mov	r3, r4
 8003a08:	f010 fdd8 	bl	80145bc <__aeabi_uldivmod>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a12:	e043      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x26c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a14:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	f04f 0400 	mov.w	r4, #0
 8003a1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	ea01 0103 	and.w	r1, r1, r3
 8003a2a:	ea02 0204 	and.w	r2, r2, r4
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4614      	mov	r4, r2
 8003a32:	0160      	lsls	r0, r4, #5
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	015b      	lsls	r3, r3, #5
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a46:	1a5b      	subs	r3, r3, r1
 8003a48:	eb64 0402 	sbc.w	r4, r4, r2
 8003a4c:	01a6      	lsls	r6, r4, #6
 8003a4e:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003a52:	019d      	lsls	r5, r3, #6
 8003a54:	1aed      	subs	r5, r5, r3
 8003a56:	eb66 0604 	sbc.w	r6, r6, r4
 8003a5a:	00f3      	lsls	r3, r6, #3
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	00eb      	lsls	r3, r5, #3
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003a6e:	186d      	adds	r5, r5, r1
 8003a70:	eb46 0602 	adc.w	r6, r6, r2
 8003a74:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003a78:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8003a7c:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003a80:	4655      	mov	r5, sl
 8003a82:	465e      	mov	r6, fp
 8003a84:	4628      	mov	r0, r5
 8003a86:	4631      	mov	r1, r6
 8003a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8a:	f04f 0400 	mov.w	r4, #0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4623      	mov	r3, r4
 8003a92:	f010 fd93 	bl	80145bc <__aeabi_uldivmod>
 8003a96:	4603      	mov	r3, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0f1b      	lsrs	r3, r3, #28
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

      sysclockfreq = pllvco/pllr;
 8003aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x28a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetSysClockFreq+0x29c>)
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3744      	adds	r7, #68	; 0x44
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	017d7840 	.word	0x017d7840

08003ad4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ada:	f7fc fc39 	bl	8000350 <HAL_GetTick>
 8003ade:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ae0:	4a71      	ldr	r2, [pc, #452]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003ae2:	4b71      	ldr	r3, [pc, #452]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fc fc2f 	bl	8000350 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0ce      	b.n	8003c9e <HAL_RCC_DeInit+0x1ca>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b00:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b0c:	4a66      	ldr	r2, [pc, #408]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b0e:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b18:	f7fc fc1a 	bl	8000350 <HAL_GetTick>
 8003b1c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b1e:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b26:	f7fc fc13 	bl	8000350 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0b0      	b.n	8003c9e <HAL_RCC_DeInit+0x1ca>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b3c:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ee      	bne.n	8003b26 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b48:	f7fc fc02 	bl	8000350 <HAL_GetTick>
 8003b4c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003b4e:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b50:	4b55      	ldr	r3, [pc, #340]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003b58:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fc fbf8 	bl	8000350 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e097      	b.n	8003c9e <HAL_RCC_DeInit+0x1ca>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b7a:	f7fc fbe9 	bl	8000350 <HAL_GetTick>
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b80:	4a49      	ldr	r2, [pc, #292]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b82:	4b49      	ldr	r3, [pc, #292]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fc fbdf 	bl	8000350 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e07e      	b.n	8003c9e <HAL_RCC_DeInit+0x1ca>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003ba0:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bac:	f7fc fbd0 	bl	8000350 <HAL_GetTick>
 8003bb0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003bb2:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003bb4:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bc0:	f7fc fbc6 	bl	8000350 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e065      	b.n	8003c9e <HAL_RCC_DeInit+0x1ca>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bde:	f7fc fbb7 	bl	8000350 <HAL_GetTick>
 8003be2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003be4:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003be6:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bf2:	f7fc fbad 	bl	8000350 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e04c      	b.n	8003c9e <HAL_RCC_DeInit+0x1ca>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c12:	4a26      	ldr	r2, [pc, #152]	; (8003cac <HAL_RCC_DeInit+0x1d8>)
 8003c14:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <HAL_RCC_DeInit+0x1d8>)
 8003c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c20:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_RCC_DeInit+0x1dc>)
 8003c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003c26:	4a20      	ldr	r2, [pc, #128]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c28:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c30:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003c32:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c34:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003c54:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003c56:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003c62:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003c7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_RCC_DeInit+0x1d4>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c84:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_DeInit+0x1e0>)
 8003c88:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_RCC_DeInit+0x1e4>)
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f00f fb9b 	bl	80133c8 <HAL_InitTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_DeInit+0x1c8>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_DeInit+0x1ca>
  }
  else
  {
    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	24003010 	.word	0x24003010
 8003cb0:	04003010 	.word	0x04003010
 8003cb4:	2000000c 	.word	0x2000000c
 8003cb8:	00f42400 	.word	0x00f42400

08003cbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8083 	beq.w	8003ddc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cd6:	4b95      	ldr	r3, [pc, #596]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d019      	beq.n	8003d16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ce2:	4b92      	ldr	r3, [pc, #584]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cee:	4b8f      	ldr	r3, [pc, #572]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfa:	d00c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfc:	4b8b      	ldr	r3, [pc, #556]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d112      	bne.n	8003d2e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d16:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d05b      	beq.n	8003dda <HAL_RCC_OscConfig+0x11e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d157      	bne.n	8003dda <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e216      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x8a>
 8003d38:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d3a:	4b7c      	ldr	r3, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e01d      	b.n	8003d82 <HAL_RCC_OscConfig+0xc6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCC_OscConfig+0xae>
 8003d50:	4a76      	ldr	r2, [pc, #472]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d52:	4b76      	ldr	r3, [pc, #472]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4a73      	ldr	r2, [pc, #460]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d5e:	4b73      	ldr	r3, [pc, #460]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e00b      	b.n	8003d82 <HAL_RCC_OscConfig+0xc6>
 8003d6a:	4a70      	ldr	r2, [pc, #448]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4a6d      	ldr	r2, [pc, #436]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d78:	4b6c      	ldr	r3, [pc, #432]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fc fae1 	bl	8000350 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d92:	f7fc fadd 	bl	8000350 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	; 0x64
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1db      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da4:	4b61      	ldr	r3, [pc, #388]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0xd6>
 8003db0:	e014      	b.n	8003ddc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fc facd 	bl	8000350 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dba:	f7fc fac9 	bl	8000350 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1c7      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dcc:	4b57      	ldr	r3, [pc, #348]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0xfe>
 8003dd8:	e000      	b.n	8003ddc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d06f      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003df4:	4b4d      	ldr	r3, [pc, #308]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e00:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0c:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d11c      	bne.n	8003e52 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e18:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d116      	bne.n	8003e52 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e24:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_OscConfig+0x180>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e18f      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3c:	493b      	ldr	r1, [pc, #236]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e50:	e03a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d020      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5a:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fc fa76 	bl	8000350 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fc fa72 	bl	8000350 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e170      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4929      	ldr	r1, [pc, #164]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
 8003e9a:	e015      	b.n	8003ec8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9c:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fc fa55 	bl	8000350 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eaa:	f7fc fa51 	bl	8000350 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e14f      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d037      	beq.n	8003f44 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d016      	beq.n	8003f0a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003edc:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_RCC_OscConfig+0x278>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fc fa35 	bl	8000350 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fc fa31 	bl	8000350 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e12f      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x22e>
 8003f08:	e01c      	b.n	8003f44 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_RCC_OscConfig+0x278>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fc fa1e 	bl	8000350 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f16:	e00f      	b.n	8003f38 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fc fa1a 	bl	8000350 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d908      	bls.n	8003f38 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e118      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470000 	.word	0x42470000
 8003f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	4b8a      	ldr	r3, [pc, #552]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e9      	bne.n	8003f18 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8097 	beq.w	8004080 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f56:	4b83      	ldr	r3, [pc, #524]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10f      	bne.n	8003f82 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	4a7f      	ldr	r2, [pc, #508]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003f68:	4b7e      	ldr	r3, [pc, #504]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b7c      	ldr	r3, [pc, #496]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b79      	ldr	r3, [pc, #484]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8e:	4a76      	ldr	r2, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	4b75      	ldr	r3, [pc, #468]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fc f9d9 	bl	8000350 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fc f9d5 	bl	8000350 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0d3      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x31a>
 8003fc8:	4a66      	ldr	r2, [pc, #408]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003fca:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	e01c      	b.n	8004010 <HAL_RCC_OscConfig+0x354>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x33c>
 8003fde:	4a61      	ldr	r2, [pc, #388]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003fe0:	4b60      	ldr	r3, [pc, #384]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fea:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003fec:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0x354>
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003ffa:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	4a57      	ldr	r2, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8004006:	4b57      	ldr	r3, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d015      	beq.n	8004044 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fc f99a 	bl	8000350 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fc f996 	bl	8000350 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e092      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ee      	beq.n	8004020 <HAL_RCC_OscConfig+0x364>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fc f984 	bl	8000350 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fc f980 	bl	8000350 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e07c      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004062:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ee      	bne.n	800404c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8004076:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d068      	beq.n	800415a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d060      	beq.n	8004156 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d145      	bne.n	8004128 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409c:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_RCC_OscConfig+0x4b0>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fc f955 	bl	8000350 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fc f951 	bl	8000350 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e04f      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c8:	4926      	ldr	r1, [pc, #152]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	3b01      	subs	r3, #1
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	061b      	lsls	r3, r3, #24
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	071b      	lsls	r3, r3, #28
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fa:	4b1c      	ldr	r3, [pc, #112]	; (800416c <HAL_RCC_OscConfig+0x4b0>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fc f926 	bl	8000350 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fc f922 	bl	8000350 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e020      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x44c>
 8004126:	e018      	b.n	800415a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_RCC_OscConfig+0x4b0>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fc f90f 	bl	8000350 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004136:	f7fc f90b 	bl	8000350 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e009      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x4a8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x47a>
 8004154:	e001      	b.n	800415a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000
 800416c:	42470060 	.word	0x42470060

08004170 <HAL_RCC_GetOscConfig>:
  * @note   This function is only available in case of STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices.
  * @note   This function add the PLL/PLLR factor management
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	220f      	movs	r2, #15
 800417c:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800417e:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800418a:	d104      	bne.n	8004196 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	e00e      	b.n	80041b4 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d104      	bne.n	80041ae <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	e002      	b.n	80041b4 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80041b4:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d103      	bne.n	80041c8 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80041ce:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	08db      	lsrs	r3, r3, #3
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d103      	bne.n	80041f0 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2205      	movs	r2, #5
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	e00c      	b.n	800420a <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d103      	bne.n	8004204 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	e002      	b.n	800420a <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d103      	bne.n	800421e <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	615a      	str	r2, [r3, #20]
 800421c:	e002      	b.n	8004224 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d103      	bne.n	800423a <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	619a      	str	r2, [r3, #24]
 8004238:	e002      	b.n	8004240 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800426e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	0c1a      	lsrs	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	0e1b      	lsrs	r3, r3, #24
 8004280:	f003 020f 	and.w	r2, r3, #15
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCC_GetOscConfig+0x134>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0f1b      	lsrs	r3, r3, #28
 800428e:	f003 0207 	and.w	r2, r3, #7
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800

080042a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e01d      	b.n	80042f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f00f fb0a 	bl	80138e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f003 fcfc 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	f241 1311 	movw	r3, #4369	; 0x1111
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <HAL_TIM_Base_DeInit+0x40>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	f240 4344 	movw	r3, #1092	; 0x444
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <HAL_TIM_Base_DeInit+0x40>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f00f fb34 	bl	80139ac <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b06      	cmp	r3, #6
 80043a6:	d007      	beq.n	80043b8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a1a      	ldr	r2, [r3, #32]
 80043e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <HAL_TIM_Base_Stop+0x40>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	f240 4344 	movw	r3, #1092	; 0x444
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <HAL_TIM_Base_Stop+0x40>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	68d2      	ldr	r2, [r2, #12]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b06      	cmp	r3, #6
 800444c:	d007      	beq.n	800445e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6a1a      	ldr	r2, [r3, #32]
 800448a:	f241 1311 	movw	r3, #4369	; 0x1111
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10f      	bne.n	80044b4 <HAL_TIM_Base_Stop_IT+0x48>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6a1a      	ldr	r2, [r3, #32]
 800449a:	f240 4344 	movw	r3, #1092	; 0x444
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_Base_Stop_IT+0x48>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d101      	bne.n	80044e0 <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
 80044de:	e046      	b.n	800456e <HAL_TIM_Base_Start_DMA+0xac>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10b      	bne.n	8004504 <HAL_TIM_Base_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <HAL_TIM_Base_Start_DMA+0x3a>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e038      	b.n	800456e <HAL_TIM_Base_Start_DMA+0xac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    /* nothing to do */
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_TIM_Base_Start_DMA+0xb6>)
 800450a:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <HAL_TIM_Base_Start_DMA+0xba>)
 8004512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_TIM_Base_Start_DMA+0xbe>)
 800451a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA stream */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a18      	ldr	r0, [r3, #32]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	332c      	adds	r3, #44	; 0x2c
 8004528:	461a      	mov	r2, r3
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	f7fc fccb 	bl	8000ec6 <HAL_DMA_Start_IT>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_Base_Start_DMA+0x78>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e019      	b.n	800456e <HAL_TIM_Base_Start_DMA+0xac>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	68d2      	ldr	r2, [r2, #12]
 8004544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004548:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d007      	beq.n	800456c <HAL_TIM_Base_Start_DMA+0xaa>
  {
    __HAL_TIM_ENABLE(htim);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	08007c55 	.word	0x08007c55
 800457c:	08007c79 	.word	0x08007c79
 8004580:	08007a71 	.word	0x08007a71

08004584 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	68d2      	ldr	r2, [r2, #12]
 8004596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459a:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fc fd60 	bl	8001066 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <HAL_TIM_Base_Stop_DMA+0x52>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	f240 4344 	movw	r3, #1092	; 0x444
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_Base_Stop_DMA+0x52>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e01d      	b.n	8004636 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f845 	bl	800469e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f003 fb5c 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1a      	ldr	r2, [r3, #32]
 8004654:	f241 1311 	movw	r3, #4369	; 0x1111
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_TIM_OC_DeInit+0x40>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	f240 4344 	movw	r3, #1092	; 0x444
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_TIM_OC_DeInit+0x40>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f817 	bl	80046b2 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f003 ff9d 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_TIM_OC_Start+0x72>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIM_OC_Start+0x2c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <HAL_TIM_OC_Start+0x76>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_OC_Start+0x30>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_TIM_OC_Start+0x32>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b06      	cmp	r3, #6
 800471c:	d007      	beq.n	800472e <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40010000 	.word	0x40010000
 800473c:	40010400 	.word	0x40010400

08004740 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f003 ff60 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <HAL_TIM_OC_Stop+0xa0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIM_OC_Stop+0x2c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_TIM_OC_Stop+0xa4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_TIM_OC_Stop+0x30>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_TIM_OC_Stop+0x32>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d017      	beq.n	80047a6 <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <HAL_TIM_OC_Stop+0x66>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	f240 4344 	movw	r3, #1092	; 0x444
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_OC_Stop+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <HAL_TIM_OC_Stop+0x96>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	f240 4344 	movw	r3, #1092	; 0x444
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_TIM_OC_Stop+0x96>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40010400 	.word	0x40010400

080047e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d841      	bhi.n	800487c <HAL_TIM_OC_Start_IT+0x94>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <HAL_TIM_OC_Start_IT+0x18>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004835 	.word	0x08004835
 8004804:	0800487d 	.word	0x0800487d
 8004808:	0800487d 	.word	0x0800487d
 800480c:	0800487d 	.word	0x0800487d
 8004810:	08004847 	.word	0x08004847
 8004814:	0800487d 	.word	0x0800487d
 8004818:	0800487d 	.word	0x0800487d
 800481c:	0800487d 	.word	0x0800487d
 8004820:	08004859 	.word	0x08004859
 8004824:	0800487d 	.word	0x0800487d
 8004828:	0800487d 	.word	0x0800487d
 800482c:	0800487d 	.word	0x0800487d
 8004830:	0800486b 	.word	0x0800486b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	f042 0202 	orr.w	r2, r2, #2
 8004842:	60da      	str	r2, [r3, #12]
      break;
 8004844:	e01b      	b.n	800487e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	68d2      	ldr	r2, [r2, #12]
 8004850:	f042 0204 	orr.w	r2, r2, #4
 8004854:	60da      	str	r2, [r3, #12]
      break;
 8004856:	e012      	b.n	800487e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	f042 0208 	orr.w	r2, r2, #8
 8004866:	60da      	str	r2, [r3, #12]
      break;
 8004868:	e009      	b.n	800487e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	68d2      	ldr	r2, [r2, #12]
 8004874:	f042 0210 	orr.w	r2, r2, #16
 8004878:	60da      	str	r2, [r3, #12]
      break;
 800487a:	e000      	b.n	800487e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800487c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f003 fec6 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <HAL_TIM_OC_Start_IT+0x100>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_TIM_OC_Start_IT+0xb8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a14      	ldr	r2, [pc, #80]	; (80048ec <HAL_TIM_OC_Start_IT+0x104>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_OC_Start_IT+0xbc>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_TIM_OC_Start_IT+0xbe>
 80048a4:	2300      	movs	r3, #0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d007      	beq.n	80048dc <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40010400 	.word	0x40010400

080048f0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d841      	bhi.n	8004984 <HAL_TIM_OC_Stop_IT+0x94>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <HAL_TIM_OC_Stop_IT+0x18>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800493d 	.word	0x0800493d
 800490c:	08004985 	.word	0x08004985
 8004910:	08004985 	.word	0x08004985
 8004914:	08004985 	.word	0x08004985
 8004918:	0800494f 	.word	0x0800494f
 800491c:	08004985 	.word	0x08004985
 8004920:	08004985 	.word	0x08004985
 8004924:	08004985 	.word	0x08004985
 8004928:	08004961 	.word	0x08004961
 800492c:	08004985 	.word	0x08004985
 8004930:	08004985 	.word	0x08004985
 8004934:	08004985 	.word	0x08004985
 8004938:	08004973 	.word	0x08004973
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	f022 0202 	bic.w	r2, r2, #2
 800494a:	60da      	str	r2, [r3, #12]
      break;
 800494c:	e01b      	b.n	8004986 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	68d2      	ldr	r2, [r2, #12]
 8004958:	f022 0204 	bic.w	r2, r2, #4
 800495c:	60da      	str	r2, [r3, #12]
      break;
 800495e:	e012      	b.n	8004986 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	68d2      	ldr	r2, [r2, #12]
 800496a:	f022 0208 	bic.w	r2, r2, #8
 800496e:	60da      	str	r2, [r3, #12]
      break;
 8004970:	e009      	b.n	8004986 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	68d2      	ldr	r2, [r2, #12]
 800497c:	f022 0210 	bic.w	r2, r2, #16
 8004980:	60da      	str	r2, [r3, #12]
      break;
 8004982:	e000      	b.n	8004986 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8004984:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2200      	movs	r2, #0
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f003 fe42 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <HAL_TIM_OC_Stop_IT+0x12c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_OC_Stop_IT+0xb8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <HAL_TIM_OC_Stop_IT+0x130>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_OC_Stop_IT+0xbc>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_TIM_OC_Stop_IT+0xbe>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d017      	beq.n	80049e2 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <HAL_TIM_OC_Stop_IT+0xf2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	f240 4344 	movw	r3, #1092	; 0x444
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_OC_Stop_IT+0xf2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <HAL_TIM_OC_Stop_IT+0x122>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	f240 4344 	movw	r3, #1092	; 0x444
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <HAL_TIM_OC_Stop_IT+0x122>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400

08004a24 <HAL_TIM_OC_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	807b      	strh	r3, [r7, #2]
   uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_OC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0f3      	b.n	8004c2a <HAL_TIM_OC_Start_DMA+0x206>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10b      	bne.n	8004a66 <HAL_TIM_OC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_OC_Start_DMA+0x3a>
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_OC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0e5      	b.n	8004c2a <HAL_TIM_OC_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2202      	movs	r2, #2
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	f200 80ad 	bhi.w	8004bc8 <HAL_TIM_OC_Start_DMA+0x1a4>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_TIM_OC_Start_DMA+0x50>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004bc9 	.word	0x08004bc9
 8004a7c:	08004bc9 	.word	0x08004bc9
 8004a80:	08004bc9 	.word	0x08004bc9
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004bc9 	.word	0x08004bc9
 8004a8c:	08004bc9 	.word	0x08004bc9
 8004a90:	08004bc9 	.word	0x08004bc9
 8004a94:	08004b39 	.word	0x08004b39
 8004a98:	08004bc9 	.word	0x08004bc9
 8004a9c:	08004bc9 	.word	0x08004bc9
 8004aa0:	08004bc9 	.word	0x08004bc9
 8004aa4:	08004b81 	.word	0x08004b81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	4a61      	ldr	r2, [pc, #388]	; (8004c34 <HAL_TIM_OC_Start_DMA+0x210>)
 8004aae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	4a60      	ldr	r2, [pc, #384]	; (8004c38 <HAL_TIM_OC_Start_DMA+0x214>)
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	4a5f      	ldr	r2, [pc, #380]	; (8004c3c <HAL_TIM_OC_Start_DMA+0x218>)
 8004abe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3334      	adds	r3, #52	; 0x34
 8004acc:	461a      	mov	r2, r3
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	f7fc f9f9 	bl	8000ec6 <HAL_DMA_Start_IT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_TIM_OC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0a5      	b.n	8004c2a <HAL_TIM_OC_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	68d2      	ldr	r2, [r2, #12]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aec:	60da      	str	r2, [r3, #12]
      break;
 8004aee:	e06c      	b.n	8004bca <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	4a4f      	ldr	r2, [pc, #316]	; (8004c34 <HAL_TIM_OC_Start_DMA+0x210>)
 8004af6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	4a4e      	ldr	r2, [pc, #312]	; (8004c38 <HAL_TIM_OC_Start_DMA+0x214>)
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	4a4d      	ldr	r2, [pc, #308]	; (8004c3c <HAL_TIM_OC_Start_DMA+0x218>)
 8004b06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3338      	adds	r3, #56	; 0x38
 8004b14:	461a      	mov	r2, r3
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	f7fc f9d5 	bl	8000ec6 <HAL_DMA_Start_IT>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_TIM_OC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e081      	b.n	8004c2a <HAL_TIM_OC_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b34:	60da      	str	r2, [r3, #12]
      break;
 8004b36:	e048      	b.n	8004bca <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a3d      	ldr	r2, [pc, #244]	; (8004c34 <HAL_TIM_OC_Start_DMA+0x210>)
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4a3c      	ldr	r2, [pc, #240]	; (8004c38 <HAL_TIM_OC_Start_DMA+0x214>)
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	; (8004c3c <HAL_TIM_OC_Start_DMA+0x218>)
 8004b4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	333c      	adds	r3, #60	; 0x3c
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	f7fc f9b1 	bl	8000ec6 <HAL_DMA_Start_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_OC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e05d      	b.n	8004c2a <HAL_TIM_OC_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	68d2      	ldr	r2, [r2, #12]
 8004b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e024      	b.n	8004bca <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	4a2b      	ldr	r2, [pc, #172]	; (8004c34 <HAL_TIM_OC_Start_DMA+0x210>)
 8004b86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4a2a      	ldr	r2, [pc, #168]	; (8004c38 <HAL_TIM_OC_Start_DMA+0x214>)
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	4a29      	ldr	r2, [pc, #164]	; (8004c3c <HAL_TIM_OC_Start_DMA+0x218>)
 8004b96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3340      	adds	r3, #64	; 0x40
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	f7fc f98d 	bl	8000ec6 <HAL_DMA_Start_IT>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_OC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e039      	b.n	8004c2a <HAL_TIM_OC_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	68d2      	ldr	r2, [r2, #12]
 8004bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bc4:	60da      	str	r2, [r3, #12]
      break;
 8004bc6:	e000      	b.n	8004bca <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    default:
      break;
 8004bc8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fd20 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <HAL_TIM_OC_Start_DMA+0x21c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_OC_Start_DMA+0x1c8>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <HAL_TIM_OC_Start_DMA+0x220>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_OC_Start_DMA+0x1cc>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_TIM_OC_Start_DMA+0x1ce>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_OC_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_OC_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	08007a95 	.word	0x08007a95
 8004c38:	08007b05 	.word	0x08007b05
 8004c3c:	08007a71 	.word	0x08007a71
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40010400 	.word	0x40010400

08004c48 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	d855      	bhi.n	8004d04 <HAL_TIM_OC_Stop_DMA+0xbc>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_TIM_OC_Stop_DMA+0x18>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004d05 	.word	0x08004d05
 8004c68:	08004d05 	.word	0x08004d05
 8004c6c:	08004d05 	.word	0x08004d05
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004d05 	.word	0x08004d05
 8004c78:	08004d05 	.word	0x08004d05
 8004c7c:	08004d05 	.word	0x08004d05
 8004c80:	08004ccd 	.word	0x08004ccd
 8004c84:	08004d05 	.word	0x08004d05
 8004c88:	08004d05 	.word	0x08004d05
 8004c8c:	08004d05 	.word	0x08004d05
 8004c90:	08004ce9 	.word	0x08004ce9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	68d2      	ldr	r2, [r2, #12]
 8004c9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ca2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fc f9dc 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8004cae:	e02a      	b.n	8004d06 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	68d2      	ldr	r2, [r2, #12]
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc f9ce 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8004cca:	e01c      	b.n	8004d06 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	68d2      	ldr	r2, [r2, #12]
 8004cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc f9c0 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8004ce6:	e00e      	b.n	8004d06 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	68d2      	ldr	r2, [r2, #12]
 8004cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fc f9b2 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8004d02:	e000      	b.n	8004d06 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    default:
      break;
 8004d04:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f003 fc82 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a22      	ldr	r2, [pc, #136]	; (8004da4 <HAL_TIM_OC_Stop_DMA+0x15c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIM_OC_Stop_DMA+0xe0>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <HAL_TIM_OC_Stop_DMA+0x160>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_OC_Stop_DMA+0xe4>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_TIM_OC_Stop_DMA+0xe6>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d017      	beq.n	8004d62 <HAL_TIM_OC_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_TIM_OC_Stop_DMA+0x11a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	f240 4344 	movw	r3, #1092	; 0x444
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_OC_Stop_DMA+0x11a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <HAL_TIM_OC_Stop_DMA+0x14a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	f240 4344 	movw	r3, #1092	; 0x444
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_OC_Stop_DMA+0x14a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40010400 	.word	0x40010400

08004dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e01d      	b.n	8004dfa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f845 	bl	8004e62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f002 ff7a 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <HAL_TIM_PWM_DeInit+0x40>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	f240 4344 	movw	r3, #1092	; 0x444
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <HAL_TIM_PWM_DeInit+0x40>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f817 	bl	8004e76 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f003 fbbb 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_TIM_PWM_Start+0x72>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x2c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <HAL_TIM_PWM_Start+0x76>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_PWM_Start+0x30>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_TIM_PWM_Start+0x32>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d007      	beq.n	8004ef2 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40010400 	.word	0x40010400

08004f04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	6839      	ldr	r1, [r7, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f003 fb7e 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a22      	ldr	r2, [pc, #136]	; (8004fac <HAL_TIM_PWM_Stop+0xa8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_PWM_Stop+0x2c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <HAL_TIM_PWM_Stop+0xac>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_PWM_Stop+0x30>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_TIM_PWM_Stop+0x32>
 8004f34:	2300      	movs	r3, #0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d017      	beq.n	8004f6a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a1a      	ldr	r2, [r3, #32]
 8004f40:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <HAL_TIM_PWM_Stop+0x66>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	f240 4344 	movw	r3, #1092	; 0x444
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_PWM_Stop+0x66>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6a1a      	ldr	r2, [r3, #32]
 8004f70:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10f      	bne.n	8004f9a <HAL_TIM_PWM_Stop+0x96>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a1a      	ldr	r2, [r3, #32]
 8004f80:	f240 4344 	movw	r3, #1092	; 0x444
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d107      	bne.n	8004f9a <HAL_TIM_PWM_Stop+0x96>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d841      	bhi.n	8005048 <HAL_TIM_PWM_Start_IT+0x94>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <HAL_TIM_PWM_Start_IT+0x18>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005049 	.word	0x08005049
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005049 	.word	0x08005049
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005049 	.word	0x08005049
 8004fec:	08005025 	.word	0x08005025
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08005037 	.word	0x08005037
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	68d2      	ldr	r2, [r2, #12]
 800500a:	f042 0202 	orr.w	r2, r2, #2
 800500e:	60da      	str	r2, [r3, #12]
      break;
 8005010:	e01b      	b.n	800504a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	68d2      	ldr	r2, [r2, #12]
 800501c:	f042 0204 	orr.w	r2, r2, #4
 8005020:	60da      	str	r2, [r3, #12]
      break;
 8005022:	e012      	b.n	800504a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	68d2      	ldr	r2, [r2, #12]
 800502e:	f042 0208 	orr.w	r2, r2, #8
 8005032:	60da      	str	r2, [r3, #12]
      break;
 8005034:	e009      	b.n	800504a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	68d2      	ldr	r2, [r2, #12]
 8005040:	f042 0210 	orr.w	r2, r2, #16
 8005044:	60da      	str	r2, [r3, #12]
      break;
 8005046:	e000      	b.n	800504a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8005048:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f003 fae0 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_TIM_PWM_Start_IT+0x100>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_TIM_PWM_Start_IT+0xb8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <HAL_TIM_PWM_Start_IT+0x104>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_TIM_PWM_Start_IT+0xbc>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <HAL_TIM_PWM_Start_IT+0xbe>
 8005070:	2300      	movs	r3, #0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b06      	cmp	r3, #6
 8005096:	d007      	beq.n	80050a8 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40010400 	.word	0x40010400

080050bc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b0c      	cmp	r3, #12
 80050ca:	d841      	bhi.n	8005150 <HAL_TIM_PWM_Stop_IT+0x94>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <HAL_TIM_PWM_Stop_IT+0x18>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	08005109 	.word	0x08005109
 80050d8:	08005151 	.word	0x08005151
 80050dc:	08005151 	.word	0x08005151
 80050e0:	08005151 	.word	0x08005151
 80050e4:	0800511b 	.word	0x0800511b
 80050e8:	08005151 	.word	0x08005151
 80050ec:	08005151 	.word	0x08005151
 80050f0:	08005151 	.word	0x08005151
 80050f4:	0800512d 	.word	0x0800512d
 80050f8:	08005151 	.word	0x08005151
 80050fc:	08005151 	.word	0x08005151
 8005100:	08005151 	.word	0x08005151
 8005104:	0800513f 	.word	0x0800513f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	f022 0202 	bic.w	r2, r2, #2
 8005116:	60da      	str	r2, [r3, #12]
      break;
 8005118:	e01b      	b.n	8005152 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	68d2      	ldr	r2, [r2, #12]
 8005124:	f022 0204 	bic.w	r2, r2, #4
 8005128:	60da      	str	r2, [r3, #12]
      break;
 800512a:	e012      	b.n	8005152 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	68d2      	ldr	r2, [r2, #12]
 8005136:	f022 0208 	bic.w	r2, r2, #8
 800513a:	60da      	str	r2, [r3, #12]
      break;
 800513c:	e009      	b.n	8005152 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	68d2      	ldr	r2, [r2, #12]
 8005148:	f022 0210 	bic.w	r2, r2, #16
 800514c:	60da      	str	r2, [r3, #12]
      break;
 800514e:	e000      	b.n	8005152 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8005150:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f003 fa5c 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_TIM_PWM_Stop_IT+0xb8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <HAL_TIM_PWM_Stop_IT+0x130>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d101      	bne.n	8005178 <HAL_TIM_PWM_Stop_IT+0xbc>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_TIM_PWM_Stop_IT+0xbe>
 8005178:	2300      	movs	r3, #0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d017      	beq.n	80051ae <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	f241 1311 	movw	r3, #4369	; 0x1111
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <HAL_TIM_PWM_Stop_IT+0xf2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	f240 4344 	movw	r3, #1092	; 0x444
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d107      	bne.n	80051ae <HAL_TIM_PWM_Stop_IT+0xf2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <HAL_TIM_PWM_Stop_IT+0x122>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	f240 4344 	movw	r3, #1092	; 0x444
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d107      	bne.n	80051de <HAL_TIM_PWM_Stop_IT+0x122>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010400 	.word	0x40010400

080051f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d101      	bne.n	800520e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
 800520c:	e0f3      	b.n	80053f6 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10b      	bne.n	8005232 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start_DMA+0x3a>
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e0e5      	b.n	80053f6 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	f200 80ad 	bhi.w	8005394 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <HAL_TIM_PWM_Start_DMA+0x50>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005275 	.word	0x08005275
 8005244:	08005395 	.word	0x08005395
 8005248:	08005395 	.word	0x08005395
 800524c:	08005395 	.word	0x08005395
 8005250:	080052bd 	.word	0x080052bd
 8005254:	08005395 	.word	0x08005395
 8005258:	08005395 	.word	0x08005395
 800525c:	08005395 	.word	0x08005395
 8005260:	08005305 	.word	0x08005305
 8005264:	08005395 	.word	0x08005395
 8005268:	08005395 	.word	0x08005395
 800526c:	08005395 	.word	0x08005395
 8005270:	0800534d 	.word	0x0800534d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	4a61      	ldr	r2, [pc, #388]	; (8005400 <HAL_TIM_PWM_Start_DMA+0x210>)
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	4a60      	ldr	r2, [pc, #384]	; (8005404 <HAL_TIM_PWM_Start_DMA+0x214>)
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	4a5f      	ldr	r2, [pc, #380]	; (8005408 <HAL_TIM_PWM_Start_DMA+0x218>)
 800528a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3334      	adds	r3, #52	; 0x34
 8005298:	461a      	mov	r2, r3
 800529a:	887b      	ldrh	r3, [r7, #2]
 800529c:	f7fb fe13 	bl	8000ec6 <HAL_DMA_Start_IT>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0a5      	b.n	80053f6 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	68d2      	ldr	r2, [r2, #12]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b8:	60da      	str	r2, [r3, #12]
      break;
 80052ba:	e06c      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	4a4f      	ldr	r2, [pc, #316]	; (8005400 <HAL_TIM_PWM_Start_DMA+0x210>)
 80052c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	4a4e      	ldr	r2, [pc, #312]	; (8005404 <HAL_TIM_PWM_Start_DMA+0x214>)
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	4a4d      	ldr	r2, [pc, #308]	; (8005408 <HAL_TIM_PWM_Start_DMA+0x218>)
 80052d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3338      	adds	r3, #56	; 0x38
 80052e0:	461a      	mov	r2, r3
 80052e2:	887b      	ldrh	r3, [r7, #2]
 80052e4:	f7fb fdef 	bl	8000ec6 <HAL_DMA_Start_IT>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e081      	b.n	80053f6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	68d2      	ldr	r2, [r2, #12]
 80052fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005300:	60da      	str	r2, [r3, #12]
      break;
 8005302:	e048      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	4a3d      	ldr	r2, [pc, #244]	; (8005400 <HAL_TIM_PWM_Start_DMA+0x210>)
 800530a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	4a3c      	ldr	r2, [pc, #240]	; (8005404 <HAL_TIM_PWM_Start_DMA+0x214>)
 8005312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	4a3b      	ldr	r2, [pc, #236]	; (8005408 <HAL_TIM_PWM_Start_DMA+0x218>)
 800531a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	333c      	adds	r3, #60	; 0x3c
 8005328:	461a      	mov	r2, r3
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	f7fb fdcb 	bl	8000ec6 <HAL_DMA_Start_IT>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e05d      	b.n	80053f6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	68d2      	ldr	r2, [r2, #12]
 8005344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005348:	60da      	str	r2, [r3, #12]
      break;
 800534a:	e024      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <HAL_TIM_PWM_Start_DMA+0x210>)
 8005352:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <HAL_TIM_PWM_Start_DMA+0x214>)
 800535a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <HAL_TIM_PWM_Start_DMA+0x218>)
 8005362:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3340      	adds	r3, #64	; 0x40
 8005370:	461a      	mov	r2, r3
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	f7fb fda7 	bl	8000ec6 <HAL_DMA_Start_IT>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e039      	b.n	80053f6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	68d2      	ldr	r2, [r2, #12]
 800538c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005390:	60da      	str	r2, [r3, #12]
      break;
 8005392:	e000      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8005394:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f003 f93a 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a18      	ldr	r2, [pc, #96]	; (800540c <HAL_TIM_PWM_Start_DMA+0x21c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIM_PWM_Start_DMA+0x1c8>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a17      	ldr	r2, [pc, #92]	; (8005410 <HAL_TIM_PWM_Start_DMA+0x220>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d101      	bne.n	80053bc <HAL_TIM_PWM_Start_DMA+0x1cc>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_TIM_PWM_Start_DMA+0x1ce>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b06      	cmp	r3, #6
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	08007a95 	.word	0x08007a95
 8005404:	08007b05 	.word	0x08007b05
 8005408:	08007a71 	.word	0x08007a71
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400

08005414 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b0c      	cmp	r3, #12
 8005422:	d855      	bhi.n	80054d0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8005424:	a201      	add	r2, pc, #4	; (adr r2, 800542c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	08005461 	.word	0x08005461
 8005430:	080054d1 	.word	0x080054d1
 8005434:	080054d1 	.word	0x080054d1
 8005438:	080054d1 	.word	0x080054d1
 800543c:	0800547d 	.word	0x0800547d
 8005440:	080054d1 	.word	0x080054d1
 8005444:	080054d1 	.word	0x080054d1
 8005448:	080054d1 	.word	0x080054d1
 800544c:	08005499 	.word	0x08005499
 8005450:	080054d1 	.word	0x080054d1
 8005454:	080054d1 	.word	0x080054d1
 8005458:	080054d1 	.word	0x080054d1
 800545c:	080054b5 	.word	0x080054b5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	68d2      	ldr	r2, [r2, #12]
 800546a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800546e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	4618      	mov	r0, r3
 8005476:	f7fb fdf6 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 800547a:	e02a      	b.n	80054d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	68d2      	ldr	r2, [r2, #12]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	4618      	mov	r0, r3
 8005492:	f7fb fde8 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8005496:	e01c      	b.n	80054d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	68d2      	ldr	r2, [r2, #12]
 80054a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fb fdda 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 80054b2:	e00e      	b.n	80054d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	68d2      	ldr	r2, [r2, #12]
 80054be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb fdcc 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 80054ce:	e000      	b.n	80054d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80054d0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f003 f89c 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a22      	ldr	r2, [pc, #136]	; (8005570 <HAL_TIM_PWM_Stop_DMA+0x15c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_TIM_PWM_Stop_DMA+0xe0>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a21      	ldr	r2, [pc, #132]	; (8005574 <HAL_TIM_PWM_Stop_DMA+0x160>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d101      	bne.n	80054f8 <HAL_TIM_PWM_Stop_DMA+0xe4>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_TIM_PWM_Stop_DMA+0xe6>
 80054f8:	2300      	movs	r3, #0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d017      	beq.n	800552e <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	f241 1311 	movw	r3, #4369	; 0x1111
 8005508:	4013      	ands	r3, r2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_TIM_PWM_Stop_DMA+0x11a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1a      	ldr	r2, [r3, #32]
 8005514:	f240 4344 	movw	r3, #1092	; 0x444
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_TIM_PWM_Stop_DMA+0x11a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800552c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6a1a      	ldr	r2, [r3, #32]
 8005534:	f241 1311 	movw	r3, #4369	; 0x1111
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <HAL_TIM_PWM_Stop_DMA+0x14a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	f240 4344 	movw	r3, #1092	; 0x444
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d107      	bne.n	800555e <HAL_TIM_PWM_Stop_DMA+0x14a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40010000 	.word	0x40010000
 8005574:	40010400 	.word	0x40010400

08005578 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e01d      	b.n	80055c6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f845 	bl	800562e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f002 fb94 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10f      	bne.n	800560e <HAL_TIM_IC_DeInit+0x40>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	f240 4344 	movw	r3, #1092	; 0x444
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <HAL_TIM_IC_DeInit+0x40>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f817 	bl	8005642 <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f002 ffd5 	bl	8008618 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b06      	cmp	r3, #6
 800567e:	d007      	beq.n	8005690 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2200      	movs	r2, #0
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f002 ffb3 	bl	8008618 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_TIM_IC_Stop+0x48>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	f240 4344 	movw	r3, #1092	; 0x444
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <HAL_TIM_IC_Stop+0x48>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b0c      	cmp	r3, #12
 80056fa:	d841      	bhi.n	8005780 <HAL_TIM_IC_Start_IT+0x94>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <HAL_TIM_IC_Start_IT+0x18>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005739 	.word	0x08005739
 8005708:	08005781 	.word	0x08005781
 800570c:	08005781 	.word	0x08005781
 8005710:	08005781 	.word	0x08005781
 8005714:	0800574b 	.word	0x0800574b
 8005718:	08005781 	.word	0x08005781
 800571c:	08005781 	.word	0x08005781
 8005720:	08005781 	.word	0x08005781
 8005724:	0800575d 	.word	0x0800575d
 8005728:	08005781 	.word	0x08005781
 800572c:	08005781 	.word	0x08005781
 8005730:	08005781 	.word	0x08005781
 8005734:	0800576f 	.word	0x0800576f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	f042 0202 	orr.w	r2, r2, #2
 8005746:	60da      	str	r2, [r3, #12]
      break;
 8005748:	e01b      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	68d2      	ldr	r2, [r2, #12]
 8005754:	f042 0204 	orr.w	r2, r2, #4
 8005758:	60da      	str	r2, [r3, #12]
      break;
 800575a:	e012      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	68d2      	ldr	r2, [r2, #12]
 8005766:	f042 0208 	orr.w	r2, r2, #8
 800576a:	60da      	str	r2, [r3, #12]
      break;
 800576c:	e009      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	68d2      	ldr	r2, [r2, #12]
 8005778:	f042 0210 	orr.w	r2, r2, #16
 800577c:	60da      	str	r2, [r3, #12]
      break;
 800577e:	e000      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005780:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2201      	movs	r2, #1
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f002 ff44 	bl	8008618 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d007      	beq.n	80057b2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b0c      	cmp	r3, #12
 80057ca:	d841      	bhi.n	8005850 <HAL_TIM_IC_Stop_IT+0x94>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_TIM_IC_Stop_IT+0x18>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	08005809 	.word	0x08005809
 80057d8:	08005851 	.word	0x08005851
 80057dc:	08005851 	.word	0x08005851
 80057e0:	08005851 	.word	0x08005851
 80057e4:	0800581b 	.word	0x0800581b
 80057e8:	08005851 	.word	0x08005851
 80057ec:	08005851 	.word	0x08005851
 80057f0:	08005851 	.word	0x08005851
 80057f4:	0800582d 	.word	0x0800582d
 80057f8:	08005851 	.word	0x08005851
 80057fc:	08005851 	.word	0x08005851
 8005800:	08005851 	.word	0x08005851
 8005804:	0800583f 	.word	0x0800583f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	f022 0202 	bic.w	r2, r2, #2
 8005816:	60da      	str	r2, [r3, #12]
      break;
 8005818:	e01b      	b.n	8005852 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	68d2      	ldr	r2, [r2, #12]
 8005824:	f022 0204 	bic.w	r2, r2, #4
 8005828:	60da      	str	r2, [r3, #12]
      break;
 800582a:	e012      	b.n	8005852 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	68d2      	ldr	r2, [r2, #12]
 8005836:	f022 0208 	bic.w	r2, r2, #8
 800583a:	60da      	str	r2, [r3, #12]
      break;
 800583c:	e009      	b.n	8005852 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	68d2      	ldr	r2, [r2, #12]
 8005848:	f022 0210 	bic.w	r2, r2, #16
 800584c:	60da      	str	r2, [r3, #12]
      break;
 800584e:	e000      	b.n	8005852 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005850:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f002 fedc 	bl	8008618 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	f241 1311 	movw	r3, #4369	; 0x1111
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <HAL_TIM_IC_Stop_IT+0xd4>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	f240 4344 	movw	r3, #1092	; 0x444
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d107      	bne.n	8005890 <HAL_TIM_IC_Stop_IT+0xd4>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d101      	bne.n	80058b8 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
 80058b6:	e0dd      	b.n	8005a74 <HAL_TIM_IC_Start_DMA+0x1da>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10b      	bne.n	80058dc <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_TIM_IC_Start_DMA+0x3a>
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0cf      	b.n	8005a74 <HAL_TIM_IC_Start_DMA+0x1da>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	f200 80ae 	bhi.w	8005a40 <HAL_TIM_IC_Start_DMA+0x1a6>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <HAL_TIM_IC_Start_DMA+0x52>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005a41 	.word	0x08005a41
 80058f4:	08005a41 	.word	0x08005a41
 80058f8:	08005a41 	.word	0x08005a41
 80058fc:	08005969 	.word	0x08005969
 8005900:	08005a41 	.word	0x08005a41
 8005904:	08005a41 	.word	0x08005a41
 8005908:	08005a41 	.word	0x08005a41
 800590c:	080059b1 	.word	0x080059b1
 8005910:	08005a41 	.word	0x08005a41
 8005914:	08005a41 	.word	0x08005a41
 8005918:	08005a41 	.word	0x08005a41
 800591c:	080059f9 	.word	0x080059f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	4a55      	ldr	r2, [pc, #340]	; (8005a7c <HAL_TIM_IC_Start_DMA+0x1e2>)
 8005926:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	4a54      	ldr	r2, [pc, #336]	; (8005a80 <HAL_TIM_IC_Start_DMA+0x1e6>)
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	4a53      	ldr	r2, [pc, #332]	; (8005a84 <HAL_TIM_IC_Start_DMA+0x1ea>)
 8005936:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3334      	adds	r3, #52	; 0x34
 8005942:	4619      	mov	r1, r3
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	887b      	ldrh	r3, [r7, #2]
 8005948:	f7fb fabd 	bl	8000ec6 <HAL_DMA_Start_IT>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_TIM_IC_Start_DMA+0xbc>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e08e      	b.n	8005a74 <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	68d2      	ldr	r2, [r2, #12]
 8005960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005964:	60da      	str	r2, [r3, #12]
      break;
 8005966:	e06c      	b.n	8005a42 <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	4a43      	ldr	r2, [pc, #268]	; (8005a7c <HAL_TIM_IC_Start_DMA+0x1e2>)
 800596e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	4a42      	ldr	r2, [pc, #264]	; (8005a80 <HAL_TIM_IC_Start_DMA+0x1e6>)
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	4a41      	ldr	r2, [pc, #260]	; (8005a84 <HAL_TIM_IC_Start_DMA+0x1ea>)
 800597e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3338      	adds	r3, #56	; 0x38
 800598a:	4619      	mov	r1, r3
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	f7fb fa99 	bl	8000ec6 <HAL_DMA_Start_IT>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_TIM_IC_Start_DMA+0x104>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e06a      	b.n	8005a74 <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	68d2      	ldr	r2, [r2, #12]
 80059a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059ac:	60da      	str	r2, [r3, #12]
      break;
 80059ae:	e048      	b.n	8005a42 <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	4a31      	ldr	r2, [pc, #196]	; (8005a7c <HAL_TIM_IC_Start_DMA+0x1e2>)
 80059b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4a30      	ldr	r2, [pc, #192]	; (8005a80 <HAL_TIM_IC_Start_DMA+0x1e6>)
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a2f      	ldr	r2, [pc, #188]	; (8005a84 <HAL_TIM_IC_Start_DMA+0x1ea>)
 80059c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	333c      	adds	r3, #60	; 0x3c
 80059d2:	4619      	mov	r1, r3
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	f7fb fa75 	bl	8000ec6 <HAL_DMA_Start_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_TIM_IC_Start_DMA+0x14c>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e046      	b.n	8005a74 <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	68d2      	ldr	r2, [r2, #12]
 80059f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f4:	60da      	str	r2, [r3, #12]
      break;
 80059f6:	e024      	b.n	8005a42 <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <HAL_TIM_IC_Start_DMA+0x1e2>)
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	4a1e      	ldr	r2, [pc, #120]	; (8005a80 <HAL_TIM_IC_Start_DMA+0x1e6>)
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <HAL_TIM_IC_Start_DMA+0x1ea>)
 8005a0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3340      	adds	r3, #64	; 0x40
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	f7fb fa51 	bl	8000ec6 <HAL_DMA_Start_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_TIM_IC_Start_DMA+0x194>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e022      	b.n	8005a74 <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	68d2      	ldr	r2, [r2, #12]
 8005a38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a3c:	60da      	str	r2, [r3, #12]
      break;
 8005a3e:	e000      	b.n	8005a42 <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    default:
      break;
 8005a40:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2201      	movs	r2, #1
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 fde4 	bl	8008618 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b06      	cmp	r3, #6
 8005a60:	d007      	beq.n	8005a72 <HAL_TIM_IC_Start_DMA+0x1d8>
  {
    __HAL_TIM_ENABLE(htim);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	f042 0201 	orr.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08007b75 	.word	0x08007b75
 8005a80:	08007be5 	.word	0x08007be5
 8005a84:	08007a71 	.word	0x08007a71

08005a88 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d855      	bhi.n	8005b44 <HAL_TIM_IC_Stop_DMA+0xbc>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <HAL_TIM_IC_Stop_DMA+0x18>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005b45 	.word	0x08005b45
 8005aa8:	08005b45 	.word	0x08005b45
 8005aac:	08005b45 	.word	0x08005b45
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005b45 	.word	0x08005b45
 8005ab8:	08005b45 	.word	0x08005b45
 8005abc:	08005b45 	.word	0x08005b45
 8005ac0:	08005b0d 	.word	0x08005b0d
 8005ac4:	08005b45 	.word	0x08005b45
 8005ac8:	08005b45 	.word	0x08005b45
 8005acc:	08005b45 	.word	0x08005b45
 8005ad0:	08005b29 	.word	0x08005b29
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	68d2      	ldr	r2, [r2, #12]
 8005ade:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ae2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fb fabc 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8005aee:	e02a      	b.n	8005b46 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fb faae 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8005b0a:	e01c      	b.n	8005b46 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	68d2      	ldr	r2, [r2, #12]
 8005b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fb faa0 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8005b26:	e00e      	b.n	8005b46 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	68d2      	ldr	r2, [r2, #12]
 8005b32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fb fa92 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8005b42:	e000      	b.n	8005b46 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8005b44:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f002 fd62 	bl	8008618 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10f      	bne.n	8005b84 <HAL_TIM_IC_Stop_DMA+0xfc>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1a      	ldr	r2, [r3, #32]
 8005b6a:	f240 4344 	movw	r3, #1092	; 0x444
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d107      	bne.n	8005b84 <HAL_TIM_IC_Stop_DMA+0xfc>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02d      	b.n	8005c06 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f855 	bl	8005c6e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f002 f884 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	f022 0208 	bic.w	r2, r2, #8
 8005bea:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	6811      	ldr	r1, [r2, #0]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <HAL_TIM_OnePulse_DeInit+0x40>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6a1a      	ldr	r2, [r3, #32]
 8005c34:	f240 4344 	movw	r3, #1092	; 0x444
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <HAL_TIM_OnePulse_DeInit+0x40>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f817 	bl	8005c82 <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f002 fcb5 	bl	8008618 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	2104      	movs	r1, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 fcae 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0c      	ldr	r2, [pc, #48]	; (8005cf4 <HAL_TIM_OnePulse_Start+0x5e>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIM_OnePulse_Start+0x3a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <HAL_TIM_OnePulse_Start+0x62>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIM_OnePulse_Start+0x3e>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_TIM_OnePulse_Start+0x40>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_TIM_OnePulse_Start+0x54>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f002 fc82 	bl	8008618 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2104      	movs	r1, #4
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f002 fc7b 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a21      	ldr	r2, [pc, #132]	; (8005dac <HAL_TIM_OnePulse_Stop+0xb0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_TIM_OnePulse_Stop+0x3a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <HAL_TIM_OnePulse_Stop+0xb4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_OnePulse_Stop+0x3e>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_TIM_OnePulse_Stop+0x40>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_TIM_OnePulse_Stop+0x74>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10f      	bne.n	8005d70 <HAL_TIM_OnePulse_Stop+0x74>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a1a      	ldr	r2, [r3, #32]
 8005d56:	f240 4344 	movw	r3, #1092	; 0x444
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_OnePulse_Stop+0x74>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a1a      	ldr	r2, [r3, #32]
 8005d76:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10f      	bne.n	8005da0 <HAL_TIM_OnePulse_Stop+0xa4>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	f240 4344 	movw	r3, #1092	; 0x444
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_OnePulse_Stop+0xa4>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	68d2      	ldr	r2, [r2, #12]
 8005dc8:	f042 0202 	orr.w	r2, r2, #2
 8005dcc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	68d2      	ldr	r2, [r2, #12]
 8005dd8:	f042 0204 	orr.w	r2, r2, #4
 8005ddc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f002 fc16 	bl	8008618 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2201      	movs	r2, #1
 8005df2:	2104      	movs	r1, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f002 fc0f 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	; (8005e34 <HAL_TIM_OnePulse_Start_IT+0x80>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIM_OnePulse_Start_IT+0x5a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a0b      	ldr	r2, [pc, #44]	; (8005e38 <HAL_TIM_OnePulse_Start_IT+0x84>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_OnePulse_Start_IT+0x5e>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_TIM_OnePulse_Start_IT+0x60>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <HAL_TIM_OnePulse_Start_IT+0x74>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40010400 	.word	0x40010400

08005e3c <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	68d2      	ldr	r2, [r2, #12]
 8005e50:	f022 0202 	bic.w	r2, r2, #2
 8005e54:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	68d2      	ldr	r2, [r2, #12]
 8005e60:	f022 0204 	bic.w	r2, r2, #4
 8005e64:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f002 fbd2 	bl	8008618 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2104      	movs	r1, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f002 fbcb 	bl	8008618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <HAL_TIM_OnePulse_Stop_IT+0xd0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <HAL_TIM_OnePulse_Stop_IT+0xd4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_OnePulse_Stop_IT+0x5e>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_TIM_OnePulse_Stop_IT+0x60>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d017      	beq.n	8005ed0 <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10f      	bne.n	8005ed0 <HAL_TIM_OnePulse_Stop_IT+0x94>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	f240 4344 	movw	r3, #1092	; 0x444
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_OnePulse_Stop_IT+0x94>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10f      	bne.n	8005f00 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	f240 4344 	movw	r3, #1092	; 0x444
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40010400 	.word	0x40010400

08005f14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e083      	b.n	8006030 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f8ab 	bl	8006098 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f001 febb 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fb4:	f023 030c 	bic.w	r3, r3, #12
 8005fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	011a      	lsls	r2, r3, #4
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	031b      	lsls	r3, r3, #12
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	4313      	orrs	r3, r2
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10f      	bne.n	8006078 <HAL_TIM_Encoder_DeInit+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a1a      	ldr	r2, [r3, #32]
 800605e:	f240 4344 	movw	r3, #1092	; 0x444
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d107      	bne.n	8006078 <HAL_TIM_Encoder_DeInit+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f817 	bl	80060ac <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_TIM_Encoder_Start+0x16>
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d008      	beq.n	80060e6 <HAL_TIM_Encoder_Start+0x26>
 80060d4:	e00f      	b.n	80060f6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2201      	movs	r2, #1
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 fa9a 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 80060e4:	e016      	b.n	8006114 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2201      	movs	r2, #1
 80060ec:	2104      	movs	r1, #4
 80060ee:	4618      	mov	r0, r3
 80060f0:	f002 fa92 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 80060f4:	e00e      	b.n	8006114 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2201      	movs	r2, #1
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 fa8a 	bl	8008618 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2201      	movs	r2, #1
 800610a:	2104      	movs	r1, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f002 fa83 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 8006112:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_TIM_Encoder_Stop+0x16>
 800613e:	2b04      	cmp	r3, #4
 8006140:	d008      	beq.n	8006154 <HAL_TIM_Encoder_Stop+0x26>
 8006142:	e00f      	b.n	8006164 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2200      	movs	r2, #0
 800614a:	2100      	movs	r1, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f002 fa63 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 8006152:	e016      	b.n	8006182 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2200      	movs	r2, #0
 800615a:	2104      	movs	r1, #4
 800615c:	4618      	mov	r0, r3
 800615e:	f002 fa5b 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 8006162:	e00e      	b.n	8006182 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2200      	movs	r2, #0
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f002 fa53 	bl	8008618 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	2104      	movs	r1, #4
 800617a:	4618      	mov	r0, r3
 800617c:	f002 fa4c 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 8006180:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	f241 1311 	movw	r3, #4369	; 0x1111
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10f      	bne.n	80061b2 <HAL_TIM_Encoder_Stop+0x84>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	f240 4344 	movw	r3, #1092	; 0x444
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d107      	bne.n	80061b2 <HAL_TIM_Encoder_Stop+0x84>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_TIM_Encoder_Start_IT+0x16>
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d010      	beq.n	80061f2 <HAL_TIM_Encoder_Start_IT+0x36>
 80061d0:	e01f      	b.n	8006212 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2201      	movs	r2, #1
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f002 fa1c 	bl	8008618 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	68d2      	ldr	r2, [r2, #12]
 80061ea:	f042 0202 	orr.w	r2, r2, #2
 80061ee:	60da      	str	r2, [r3, #12]
      break;
 80061f0:	e02e      	b.n	8006250 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	2104      	movs	r1, #4
 80061fa:	4618      	mov	r0, r3
 80061fc:	f002 fa0c 	bl	8008618 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	68d2      	ldr	r2, [r2, #12]
 800620a:	f042 0204 	orr.w	r2, r2, #4
 800620e:	60da      	str	r2, [r3, #12]
      break;
 8006210:	e01e      	b.n	8006250 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2201      	movs	r2, #1
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f002 f9fc 	bl	8008618 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2201      	movs	r2, #1
 8006226:	2104      	movs	r1, #4
 8006228:	4618      	mov	r0, r3
 800622a:	f002 f9f5 	bl	8008618 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	68d2      	ldr	r2, [r2, #12]
 8006238:	f042 0202 	orr.w	r2, r2, #2
 800623c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	68d2      	ldr	r2, [r2, #12]
 8006248:	f042 0204 	orr.w	r2, r2, #4
 800624c:	60da      	str	r2, [r3, #12]
      break;
 800624e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10f      	bne.n	800629a <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f002 f9c8 	bl	8008618 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	68d2      	ldr	r2, [r2, #12]
 8006292:	f022 0202 	bic.w	r2, r2, #2
 8006296:	60da      	str	r2, [r3, #12]
 8006298:	e030      	b.n	80062fc <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b04      	cmp	r3, #4
 800629e:	d10f      	bne.n	80062c0 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2200      	movs	r2, #0
 80062a6:	2104      	movs	r1, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f002 f9b5 	bl	8008618 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	68d2      	ldr	r2, [r2, #12]
 80062b8:	f022 0204 	bic.w	r2, r2, #4
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	e01d      	b.n	80062fc <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2200      	movs	r2, #0
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f002 f9a5 	bl	8008618 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	2104      	movs	r1, #4
 80062d6:	4618      	mov	r0, r3
 80062d8:	f002 f99e 	bl	8008618 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	68d2      	ldr	r2, [r2, #12]
 80062e6:	f022 0202 	bic.w	r2, r2, #2
 80062ea:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6812      	ldr	r2, [r2, #0]
 80062f4:	68d2      	ldr	r2, [r2, #12]
 80062f6:	f022 0204 	bic.w	r2, r2, #4
 80062fa:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	f241 1311 	movw	r3, #4369	; 0x1111
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10f      	bne.n	800632c <HAL_TIM_Encoder_Stop_IT+0xc2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	f240 4344 	movw	r3, #1092	; 0x444
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d107      	bne.n	800632c <HAL_TIM_Encoder_Stop_IT+0xc2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2 The destination Buffer address for IC2.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d101      	bne.n	800635c <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
 800635a:	e0e0      	b.n	800651e <HAL_TIM_Encoder_Start_DMA+0x1e0>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10e      	bne.n	8006386 <HAL_TIM_Encoder_Start_DMA+0x48>
  {
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_TIM_Encoder_Start_DMA+0x36>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <HAL_TIM_Encoder_Start_DMA+0x40>
 8006374:	8b3b      	ldrh	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e0cf      	b.n	800651e <HAL_TIM_Encoder_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b04      	cmp	r3, #4
 800638a:	d037      	beq.n	80063fc <HAL_TIM_Encoder_Start_DMA+0xbe>
 800638c:	2b3c      	cmp	r3, #60	; 0x3c
 800638e:	d068      	beq.n	8006462 <HAL_TIM_Encoder_Start_DMA+0x124>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d000      	beq.n	8006396 <HAL_TIM_Encoder_Start_DMA+0x58>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
      break;
    }

    default:
      break;
 8006394:	e0c2      	b.n	800651c <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	4a63      	ldr	r2, [pc, #396]	; (8006528 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 800639c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	4a62      	ldr	r2, [pc, #392]	; (800652c <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	4a61      	ldr	r2, [pc, #388]	; (8006530 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 80063ac:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3334      	adds	r3, #52	; 0x34
 80063b8:	4619      	mov	r1, r3
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	8b3b      	ldrh	r3, [r7, #24]
 80063be:	f7fa fd82 	bl	8000ec6 <HAL_DMA_Start_IT>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_TIM_Encoder_Start_DMA+0x8e>
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0a8      	b.n	800651e <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	68d2      	ldr	r2, [r2, #12]
 80063d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063da:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f002 f90f 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 80063fa:	e08f      	b.n	800651c <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	4a49      	ldr	r2, [pc, #292]	; (8006528 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 8006402:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	4a48      	ldr	r2, [pc, #288]	; (800652c <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 800640a:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	4a47      	ldr	r2, [pc, #284]	; (8006530 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 8006412:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3338      	adds	r3, #56	; 0x38
 800641e:	4619      	mov	r1, r3
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	8b3b      	ldrh	r3, [r7, #24]
 8006424:	f7fa fd4f 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <HAL_TIM_Encoder_Start_DMA+0xf4>
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e075      	b.n	800651e <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	68d2      	ldr	r2, [r2, #12]
 800643c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006440:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	f042 0201 	orr.w	r2, r2, #1
 8006450:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2201      	movs	r2, #1
 8006458:	2104      	movs	r1, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f002 f8dc 	bl	8008618 <TIM_CCxChannelCmd>
      break;
 8006460:	e05c      	b.n	800651c <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	4a30      	ldr	r2, [pc, #192]	; (8006528 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 8006468:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	4a2f      	ldr	r2, [pc, #188]	; (800652c <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 8006470:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	4a2e      	ldr	r2, [pc, #184]	; (8006530 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 8006478:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3334      	adds	r3, #52	; 0x34
 8006484:	4619      	mov	r1, r3
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	8b3b      	ldrh	r3, [r7, #24]
 800648a:	f7fa fd1c 	bl	8000ec6 <HAL_DMA_Start_IT>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_TIM_Encoder_Start_DMA+0x15a>
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e042      	b.n	800651e <HAL_TIM_Encoder_Start_DMA+0x1e0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	4a22      	ldr	r2, [pc, #136]	; (8006528 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 800649e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	4a21      	ldr	r2, [pc, #132]	; (800652c <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	4a20      	ldr	r2, [pc, #128]	; (8006530 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 80064ae:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3338      	adds	r3, #56	; 0x38
 80064ba:	4619      	mov	r1, r3
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	8b3b      	ldrh	r3, [r7, #24]
 80064c0:	f7fa fd01 	bl	8000ec6 <HAL_DMA_Start_IT>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_TIM_Encoder_Start_DMA+0x190>
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e027      	b.n	800651e <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE(htim);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f002 f896 	bl	8008618 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2201      	movs	r2, #1
 80064f2:	2104      	movs	r1, #4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f002 f88f 	bl	8008618 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	68d2      	ldr	r2, [r2, #12]
 8006504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006508:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	68d2      	ldr	r2, [r2, #12]
 8006514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006518:	60da      	str	r2, [r3, #12]
      break;
 800651a:	bf00      	nop
  }
  /* Return function status */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	08007b75 	.word	0x08007b75
 800652c:	08007be5 	.word	0x08007be5
 8006530:	08007a71 	.word	0x08007a71

08006534 <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d114      	bne.n	800656e <HAL_TIM_Encoder_Stop_DMA+0x3a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2200      	movs	r2, #0
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f002 f863 	bl	8008618 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	68d2      	ldr	r2, [r2, #12]
 800655c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006560:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	4618      	mov	r0, r3
 8006568:	f7fa fd7d 	bl	8001066 <HAL_DMA_Abort_IT>
 800656c:	e03f      	b.n	80065ee <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else if (Channel == TIM_CHANNEL_2)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d114      	bne.n	800659e <HAL_TIM_Encoder_Stop_DMA+0x6a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2200      	movs	r2, #0
 800657a:	2104      	movs	r1, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f002 f84b 	bl	8008618 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	68d2      	ldr	r2, [r2, #12]
 800658c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006590:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	4618      	mov	r0, r3
 8006598:	f7fa fd65 	bl	8001066 <HAL_DMA_Abort_IT>
 800659c:	e027      	b.n	80065ee <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 f836 	bl	8008618 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2200      	movs	r2, #0
 80065b2:	2104      	movs	r1, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f002 f82f 	bl	8008618 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	68d2      	ldr	r2, [r2, #12]
 80065c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065c8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	68d2      	ldr	r2, [r2, #12]
 80065d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d8:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fa fd41 	bl	8001066 <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fa fd3c 	bl	8001066 <HAL_DMA_Abort_IT>
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <HAL_TIM_Encoder_Stop_DMA+0xea>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	f240 4344 	movw	r3, #1092	; 0x444
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <HAL_TIM_Encoder_Stop_DMA+0xea>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b02      	cmp	r3, #2
 8006644:	d122      	bne.n	800668c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d11b      	bne.n	800668c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0202 	mvn.w	r2, #2
 800665c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 f962 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 8006678:	e005      	b.n	8006686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 f954 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f96f 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b04      	cmp	r3, #4
 8006698:	d122      	bne.n	80066e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d11b      	bne.n	80066e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0204 	mvn.w	r2, #4
 80066b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 f938 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 f92a 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 f945 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d122      	bne.n	8006734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d11b      	bne.n	8006734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0208 	mvn.w	r2, #8
 8006704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2204      	movs	r2, #4
 800670a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 f90e 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 8006720:	e005      	b.n	800672e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 f900 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 f91b 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b10      	cmp	r3, #16
 8006740:	d122      	bne.n	8006788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b10      	cmp	r3, #16
 800674e:	d11b      	bne.n	8006788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0210 	mvn.w	r2, #16
 8006758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2208      	movs	r2, #8
 800675e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 f8e4 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 f8d6 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f8f1 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d107      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0201 	mvn.w	r2, #1
 80067ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f00b ff26 	bl	8012600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d10e      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067cc:	2b80      	cmp	r3, #128	; 0x80
 80067ce:	d107      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f003 f906 	bl	80099ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d10e      	bne.n	800680c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d107      	bne.n	800680c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 f8c0 	bl	800798c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b20      	cmp	r3, #32
 8006818:	d10e      	bne.n	8006838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b20      	cmp	r3, #32
 8006826:	d107      	bne.n	8006838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0220 	mvn.w	r2, #32
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f003 f8c6 	bl	80099c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006856:	2302      	movs	r3, #2
 8006858:	e04e      	b.n	80068f8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d839      	bhi.n	80068e4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	080068ad 	.word	0x080068ad
 800687c:	080068e5 	.word	0x080068e5
 8006880:	080068e5 	.word	0x080068e5
 8006884:	080068e5 	.word	0x080068e5
 8006888:	080068bb 	.word	0x080068bb
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068e5 	.word	0x080068e5
 8006894:	080068e5 	.word	0x080068e5
 8006898:	080068c9 	.word	0x080068c9
 800689c:	080068e5 	.word	0x080068e5
 80068a0:	080068e5 	.word	0x080068e5
 80068a4:	080068e5 	.word	0x080068e5
 80068a8:	080068d7 	.word	0x080068d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 fab6 	bl	8007e24 <TIM_OC1_SetConfig>
      break;
 80068b8:	e015      	b.n	80068e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 fb1f 	bl	8007f04 <TIM_OC2_SetConfig>
      break;
 80068c6:	e00e      	b.n	80068e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 fb8e 	bl	8007ff0 <TIM_OC3_SetConfig>
      break;
 80068d4:	e007      	b.n	80068e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 fbfb 	bl	80080d8 <TIM_OC4_SetConfig>
      break;
 80068e2:	e000      	b.n	80068e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80068e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006916:	2302      	movs	r3, #2
 8006918:	e08a      	b.n	8006a30 <HAL_TIM_IC_ConfigChannel+0x130>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	6819      	ldr	r1, [r3, #0]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f001 fca6 	bl	8008290 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	6992      	ldr	r2, [r2, #24]
 800694e:	f022 020c 	bic.w	r2, r2, #12
 8006952:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	6991      	ldr	r1, [r2, #24]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	6892      	ldr	r2, [r2, #8]
 8006962:	430a      	orrs	r2, r1
 8006964:	619a      	str	r2, [r3, #24]
 8006966:	e05a      	b.n	8006a1e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b04      	cmp	r3, #4
 800696c:	d11c      	bne.n	80069a8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6819      	ldr	r1, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f001 fd2a 	bl	80083d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	6992      	ldr	r2, [r2, #24]
 800698c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006990:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	6991      	ldr	r1, [r2, #24]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	6892      	ldr	r2, [r2, #8]
 80069a0:	0212      	lsls	r2, r2, #8
 80069a2:	430a      	orrs	r2, r1
 80069a4:	619a      	str	r2, [r3, #24]
 80069a6:	e03a      	b.n	8006a1e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d11b      	bne.n	80069e6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6819      	ldr	r1, [r3, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f001 fd77 	bl	80084b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	69d2      	ldr	r2, [r2, #28]
 80069cc:	f022 020c 	bic.w	r2, r2, #12
 80069d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	69d1      	ldr	r1, [r2, #28]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	6892      	ldr	r2, [r2, #8]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	61da      	str	r2, [r3, #28]
 80069e4:	e01b      	b.n	8006a1e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6819      	ldr	r1, [r3, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f001 fd97 	bl	8008528 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	69d2      	ldr	r2, [r2, #28]
 8006a04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	69d1      	ldr	r1, [r2, #28]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	6892      	ldr	r2, [r2, #8]
 8006a18:	0212      	lsls	r2, r2, #8
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e0b4      	b.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x184>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	f200 809f 	bhi.w	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006ba9 	.word	0x08006ba9
 8006a78:	08006ba9 	.word	0x08006ba9
 8006a7c:	08006ba9 	.word	0x08006ba9
 8006a80:	08006ae5 	.word	0x08006ae5
 8006a84:	08006ba9 	.word	0x08006ba9
 8006a88:	08006ba9 	.word	0x08006ba9
 8006a8c:	08006ba9 	.word	0x08006ba9
 8006a90:	08006b27 	.word	0x08006b27
 8006a94:	08006ba9 	.word	0x08006ba9
 8006a98:	08006ba9 	.word	0x08006ba9
 8006a9c:	08006ba9 	.word	0x08006ba9
 8006aa0:	08006b67 	.word	0x08006b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 f9ba 	bl	8007e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	6992      	ldr	r2, [r2, #24]
 8006aba:	f042 0208 	orr.w	r2, r2, #8
 8006abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	6992      	ldr	r2, [r2, #24]
 8006aca:	f022 0204 	bic.w	r2, r2, #4
 8006ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	6991      	ldr	r1, [r2, #24]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	6912      	ldr	r2, [r2, #16]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	619a      	str	r2, [r3, #24]
      break;
 8006ae2:	e062      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 fa0a 	bl	8007f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	6992      	ldr	r2, [r2, #24]
 8006afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	6992      	ldr	r2, [r2, #24]
 8006b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	6991      	ldr	r1, [r2, #24]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	6912      	ldr	r2, [r2, #16]
 8006b1e:	0212      	lsls	r2, r2, #8
 8006b20:	430a      	orrs	r2, r1
 8006b22:	619a      	str	r2, [r3, #24]
      break;
 8006b24:	e041      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 fa5f 	bl	8007ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	69d2      	ldr	r2, [r2, #28]
 8006b3c:	f042 0208 	orr.w	r2, r2, #8
 8006b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	69d2      	ldr	r2, [r2, #28]
 8006b4c:	f022 0204 	bic.w	r2, r2, #4
 8006b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	69d1      	ldr	r1, [r2, #28]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	6912      	ldr	r2, [r2, #16]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	61da      	str	r2, [r3, #28]
      break;
 8006b64:	e021      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 fab3 	bl	80080d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	69d2      	ldr	r2, [r2, #28]
 8006b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	69d2      	ldr	r2, [r2, #28]
 8006b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	69d1      	ldr	r1, [r2, #28]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	6912      	ldr	r2, [r2, #16]
 8006ba0:	0212      	lsls	r2, r2, #8
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	61da      	str	r2, [r3, #28]
      break;
 8006ba6:	e000      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006ba8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	; 0x30
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	f000 80af 	beq.w	8006d3a <HAL_TIM_OnePulse_ConfigChannel+0x176>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e0a8      	b.n	8006d3c <HAL_TIM_OnePulse_ConfigChannel+0x178>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_TIM_OnePulse_ConfigChannel+0x66>
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d009      	beq.n	8006c3c <HAL_TIM_OnePulse_ConfigChannel+0x78>

        TIM_OC2_SetConfig(htim->Instance, &temp1);
        break;
      }
      default:
        break;
 8006c28:	e011      	b.n	8006c4e <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f107 0214 	add.w	r2, r7, #20
 8006c32:	4611      	mov	r1, r2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 f8f5 	bl	8007e24 <TIM_OC1_SetConfig>
        break;
 8006c3a:	e008      	b.n	8006c4e <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f107 0214 	add.w	r2, r7, #20
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f95c 	bl	8007f04 <TIM_OC2_SetConfig>
        break;
 8006c4c:	bf00      	nop
    }

    switch (InputChannel)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <HAL_TIM_OnePulse_ConfigChannel+0x96>
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d033      	beq.n	8006cc0 <HAL_TIM_OnePulse_ConfigChannel+0xfc>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
        break;
      }

      default:
        break;
 8006c58:	e065      	b.n	8006d26 <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6999      	ldr	r1, [r3, #24]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	69da      	ldr	r2, [r3, #28]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f001 fb11 	bl	8008290 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	6992      	ldr	r2, [r2, #24]
 8006c78:	f022 020c 	bic.w	r2, r2, #12
 8006c7c:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	6892      	ldr	r2, [r2, #8]
 8006c88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c8c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6892      	ldr	r2, [r2, #8]
 8006c98:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006c9c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	6892      	ldr	r2, [r2, #8]
 8006ca8:	f022 0207 	bic.w	r2, r2, #7
 8006cac:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	6892      	ldr	r2, [r2, #8]
 8006cb8:	f042 0206 	orr.w	r2, r2, #6
 8006cbc:	609a      	str	r2, [r3, #8]
        break;
 8006cbe:	e032      	b.n	8006d26 <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6999      	ldr	r1, [r3, #24]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	f001 fb81 	bl	80083d6 <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	6992      	ldr	r2, [r2, #24]
 8006cde:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ce2:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	6892      	ldr	r2, [r2, #8]
 8006cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006cf2:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	6892      	ldr	r2, [r2, #8]
 8006cfe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006d02:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	6892      	ldr	r2, [r2, #8]
 8006d0e:	f022 0207 	bic.w	r2, r2, #7
 8006d12:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	6892      	ldr	r2, [r2, #8]
 8006d1e:	f042 0206 	orr.w	r2, r2, #6
 8006d22:	609a      	str	r2, [r3, #8]
        break;
 8006d24:	bf00      	nop
    }

    htim->State = HAL_TIM_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e000      	b.n	8006d3c <HAL_TIM_OnePulse_ConfigChannel+0x178>
  }
  else
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
  }
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3730      	adds	r7, #48	; 0x30
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_TIM_DMABurst_WriteStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t *BurstBuffer, uint32_t  BurstLength)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d101      	bne.n	8006d62 <HAL_TIM_DMABurst_WriteStart+0x1e>
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e11b      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d10b      	bne.n	8006d86 <HAL_TIM_DMABurst_WriteStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_DMABurst_WriteStart+0x3a>
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_TIM_DMABurst_WriteStart+0x3a>
    {
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e10d      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2202      	movs	r2, #2
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d071      	beq.n	8006e72 <HAL_TIM_DMABurst_WriteStart+0x12e>
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d92:	d809      	bhi.n	8006da8 <HAL_TIM_DMABurst_WriteStart+0x64>
 8006d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d98:	d030      	beq.n	8006dfc <HAL_TIM_DMABurst_WriteStart+0xb8>
 8006d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9e:	d04b      	beq.n	8006e38 <HAL_TIM_DMABurst_WriteStart+0xf4>
 8006da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da4:	d00c      	beq.n	8006dc0 <HAL_TIM_DMABurst_WriteStart+0x7c>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 8006da6:	e0e5      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
  switch (BurstRequestSrc)
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dac:	f000 809b 	beq.w	8006ee6 <HAL_TIM_DMABurst_WriteStart+0x1a2>
 8006db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db4:	f000 80b4 	beq.w	8006f20 <HAL_TIM_DMABurst_WriteStart+0x1dc>
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d076      	beq.n	8006eac <HAL_TIM_DMABurst_WriteStart+0x168>
      break;
 8006dbe:	e0d9      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	4a77      	ldr	r2, [pc, #476]	; (8006fa4 <HAL_TIM_DMABurst_WriteStart+0x260>)
 8006dc6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	4a76      	ldr	r2, [pc, #472]	; (8006fa8 <HAL_TIM_DMABurst_WriteStart+0x264>)
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	4a75      	ldr	r2, [pc, #468]	; (8006fac <HAL_TIM_DMABurst_WriteStart+0x268>)
 8006dd6:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a18      	ldr	r0, [r3, #32]
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	334c      	adds	r3, #76	; 0x4c
 8006de4:	461a      	mov	r2, r3
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	0a1b      	lsrs	r3, r3, #8
 8006dea:	3301      	adds	r3, #1
 8006dec:	f7fa f86b 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 80b1 	beq.w	8006f5a <HAL_TIM_DMABurst_WriteStart+0x216>
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e0ce      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	4a6b      	ldr	r2, [pc, #428]	; (8006fb0 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 8006e02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	4a6a      	ldr	r2, [pc, #424]	; (8006fb4 <HAL_TIM_DMABurst_WriteStart+0x270>)
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	4a66      	ldr	r2, [pc, #408]	; (8006fac <HAL_TIM_DMABurst_WriteStart+0x268>)
 8006e12:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	334c      	adds	r3, #76	; 0x4c
 8006e20:	461a      	mov	r2, r3
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	0a1b      	lsrs	r3, r3, #8
 8006e26:	3301      	adds	r3, #1
 8006e28:	f7fa f84d 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8095 	beq.w	8006f5e <HAL_TIM_DMABurst_WriteStart+0x21a>
        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0b0      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	4a5c      	ldr	r2, [pc, #368]	; (8006fb0 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 8006e3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	4a5b      	ldr	r2, [pc, #364]	; (8006fb4 <HAL_TIM_DMABurst_WriteStart+0x270>)
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	4a57      	ldr	r2, [pc, #348]	; (8006fac <HAL_TIM_DMABurst_WriteStart+0x268>)
 8006e4e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	334c      	adds	r3, #76	; 0x4c
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	3301      	adds	r3, #1
 8006e64:	f7fa f82f 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d079      	beq.n	8006f62 <HAL_TIM_DMABurst_WriteStart+0x21e>
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e093      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	4a4e      	ldr	r2, [pc, #312]	; (8006fb0 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 8006e78:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	4a4d      	ldr	r2, [pc, #308]	; (8006fb4 <HAL_TIM_DMABurst_WriteStart+0x270>)
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	4a49      	ldr	r2, [pc, #292]	; (8006fac <HAL_TIM_DMABurst_WriteStart+0x268>)
 8006e88:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	334c      	adds	r3, #76	; 0x4c
 8006e96:	461a      	mov	r2, r3
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	0a1b      	lsrs	r3, r3, #8
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f7fa f812 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d05e      	beq.n	8006f66 <HAL_TIM_DMABurst_WriteStart+0x222>
        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e076      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4a3f      	ldr	r2, [pc, #252]	; (8006fb0 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 8006eb2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	4a3e      	ldr	r2, [pc, #248]	; (8006fb4 <HAL_TIM_DMABurst_WriteStart+0x270>)
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	4a3a      	ldr	r2, [pc, #232]	; (8006fac <HAL_TIM_DMABurst_WriteStart+0x268>)
 8006ec2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	334c      	adds	r3, #76	; 0x4c
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	f7f9 fff5 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d043      	beq.n	8006f6a <HAL_TIM_DMABurst_WriteStart+0x226>
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e059      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	4a33      	ldr	r2, [pc, #204]	; (8006fb8 <HAL_TIM_DMABurst_WriteStart+0x274>)
 8006eec:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef2:	4a32      	ldr	r2, [pc, #200]	; (8006fbc <HAL_TIM_DMABurst_WriteStart+0x278>)
 8006ef4:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efa:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <HAL_TIM_DMABurst_WriteStart+0x268>)
 8006efc:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	334c      	adds	r3, #76	; 0x4c
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	0a1b      	lsrs	r3, r3, #8
 8006f10:	3301      	adds	r3, #1
 8006f12:	f7f9 ffd8 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d028      	beq.n	8006f6e <HAL_TIM_DMABurst_WriteStart+0x22a>
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e03c      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <HAL_TIM_DMABurst_WriteStart+0x27c>)
 8006f26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <HAL_TIM_DMABurst_WriteStart+0x280>)
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	4a1d      	ldr	r2, [pc, #116]	; (8006fac <HAL_TIM_DMABurst_WriteStart+0x268>)
 8006f36:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	334c      	adds	r3, #76	; 0x4c
 8006f44:	461a      	mov	r2, r3
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	0a1b      	lsrs	r3, r3, #8
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f7f9 ffbb 	bl	8000ec6 <HAL_DMA_Start_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <HAL_TIM_DMABurst_WriteStart+0x22e>
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01f      	b.n	8006f9a <HAL_TIM_DMABurst_WriteStart+0x256>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e00a      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e008      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8006f62:	bf00      	nop
 8006f64:	e006      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8006f66:	bf00      	nop
 8006f68:	e004      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e002      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8006f72:	bf00      	nop
  }
  /* configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	68d1      	ldr	r1, [r2, #12]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	08007c55 	.word	0x08007c55
 8006fa8:	08007c79 	.word	0x08007c79
 8006fac:	08007a71 	.word	0x08007a71
 8006fb0:	08007a95 	.word	0x08007a95
 8006fb4:	08007b05 	.word	0x08007b05
 8006fb8:	08009a1d 	.word	0x08009a1d
 8006fbc:	08009a41 	.word	0x08009a41
 8006fc0:	08007c9d 	.word	0x08007c9d
 8006fc4:	08007cc1 	.word	0x08007cc1

08006fc8 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fdc:	d02e      	beq.n	800703c <HAL_TIM_DMABurst_WriteStop+0x74>
 8006fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe2:	d809      	bhi.n	8006ff8 <HAL_TIM_DMABurst_WriteStop+0x30>
 8006fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe8:	d018      	beq.n	800701c <HAL_TIM_DMABurst_WriteStop+0x54>
 8006fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fee:	d01d      	beq.n	800702c <HAL_TIM_DMABurst_WriteStop+0x64>
 8006ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff4:	d00a      	beq.n	800700c <HAL_TIM_DMABurst_WriteStop+0x44>
    {
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 8006ff6:	e041      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
  switch (BurstRequestSrc)
 8006ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffc:	d02e      	beq.n	800705c <HAL_TIM_DMABurst_WriteStop+0x94>
 8006ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007002:	d033      	beq.n	800706c <HAL_TIM_DMABurst_WriteStop+0xa4>
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007008:	d020      	beq.n	800704c <HAL_TIM_DMABurst_WriteStop+0x84>
      break;
 800700a:	e037      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	4618      	mov	r0, r3
 8007012:	f7fa f828 	bl	8001066 <HAL_DMA_Abort_IT>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
      break;
 800701a:	e02f      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	4618      	mov	r0, r3
 8007022:	f7fa f820 	bl	8001066 <HAL_DMA_Abort_IT>
 8007026:	4603      	mov	r3, r0
 8007028:	73fb      	strb	r3, [r7, #15]
      break;
 800702a:	e027      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	4618      	mov	r0, r3
 8007032:	f7fa f818 	bl	8001066 <HAL_DMA_Abort_IT>
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
      break;
 800703a:	e01f      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
      status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	4618      	mov	r0, r3
 8007042:	f7fa f810 	bl	8001066 <HAL_DMA_Abort_IT>
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]
      break;
 800704a:	e017      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	4618      	mov	r0, r3
 8007052:	f7fa f808 	bl	8001066 <HAL_DMA_Abort_IT>
 8007056:	4603      	mov	r3, r0
 8007058:	73fb      	strb	r3, [r7, #15]
      break;
 800705a:	e00f      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	4618      	mov	r0, r3
 8007062:	f7fa f800 	bl	8001066 <HAL_DMA_Abort_IT>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
      break;
 800706a:	e007      	b.n	800707c <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	4618      	mov	r0, r3
 8007072:	f7f9 fff8 	bl	8001066 <HAL_DMA_Abort_IT>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
      break;
 800707a:	bf00      	nop
  }

  if (HAL_OK == status)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d108      	bne.n	8007094 <HAL_TIM_DMABurst_WriteStop+0xcc>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	68d1      	ldr	r1, [r2, #12]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	43d2      	mvns	r2, r2
 8007090:	400a      	ands	r2, r1
 8007092:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_TIM_DMABurst_ReadStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d101      	bne.n	80070bc <HAL_TIM_DMABurst_ReadStart+0x1e>
  {
    return HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
 80070ba:	e11b      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d10b      	bne.n	80070e0 <HAL_TIM_DMABurst_ReadStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d104      	bne.n	80070d8 <HAL_TIM_DMABurst_ReadStart+0x3a>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_TIM_DMABurst_ReadStart+0x3a>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e10d      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e6:	d071      	beq.n	80071cc <HAL_TIM_DMABurst_ReadStart+0x12e>
 80070e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ec:	d809      	bhi.n	8007102 <HAL_TIM_DMABurst_ReadStart+0x64>
 80070ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f2:	d030      	beq.n	8007156 <HAL_TIM_DMABurst_ReadStart+0xb8>
 80070f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f8:	d04b      	beq.n	8007192 <HAL_TIM_DMABurst_ReadStart+0xf4>
 80070fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fe:	d00c      	beq.n	800711a <HAL_TIM_DMABurst_ReadStart+0x7c>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 8007100:	e0e5      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
  switch (BurstRequestSrc)
 8007102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007106:	f000 809b 	beq.w	8007240 <HAL_TIM_DMABurst_ReadStart+0x1a2>
 800710a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800710e:	f000 80b4 	beq.w	800727a <HAL_TIM_DMABurst_ReadStart+0x1dc>
 8007112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007116:	d076      	beq.n	8007206 <HAL_TIM_DMABurst_ReadStart+0x168>
      break;
 8007118:	e0d9      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	4a77      	ldr	r2, [pc, #476]	; (80072fc <HAL_TIM_DMABurst_ReadStart+0x25e>)
 8007120:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	4a76      	ldr	r2, [pc, #472]	; (8007300 <HAL_TIM_DMABurst_ReadStart+0x262>)
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	4a75      	ldr	r2, [pc, #468]	; (8007304 <HAL_TIM_DMABurst_ReadStart+0x266>)
 8007130:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a18      	ldr	r0, [r3, #32]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	334c      	adds	r3, #76	; 0x4c
 800713c:	4619      	mov	r1, r3
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	3301      	adds	r3, #1
 8007146:	f7f9 febe 	bl	8000ec6 <HAL_DMA_Start_IT>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80b1 	beq.w	80072b4 <HAL_TIM_DMABurst_ReadStart+0x216>
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e0ce      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	4a6b      	ldr	r2, [pc, #428]	; (8007308 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 800715c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	4a6a      	ldr	r2, [pc, #424]	; (800730c <HAL_TIM_DMABurst_ReadStart+0x26e>)
 8007164:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	4a66      	ldr	r2, [pc, #408]	; (8007304 <HAL_TIM_DMABurst_ReadStart+0x266>)
 800716c:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	334c      	adds	r3, #76	; 0x4c
 8007178:	4619      	mov	r1, r3
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	3301      	adds	r3, #1
 8007182:	f7f9 fea0 	bl	8000ec6 <HAL_DMA_Start_IT>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8095 	beq.w	80072b8 <HAL_TIM_DMABurst_ReadStart+0x21a>
        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e0b0      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	4a5c      	ldr	r2, [pc, #368]	; (8007308 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 8007198:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	4a5b      	ldr	r2, [pc, #364]	; (800730c <HAL_TIM_DMABurst_ReadStart+0x26e>)
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	4a57      	ldr	r2, [pc, #348]	; (8007304 <HAL_TIM_DMABurst_ReadStart+0x266>)
 80071a8:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	334c      	adds	r3, #76	; 0x4c
 80071b4:	4619      	mov	r1, r3
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	3301      	adds	r3, #1
 80071be:	f7f9 fe82 	bl	8000ec6 <HAL_DMA_Start_IT>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d079      	beq.n	80072bc <HAL_TIM_DMABurst_ReadStart+0x21e>
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e093      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	4a4d      	ldr	r2, [pc, #308]	; (8007308 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 80071d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	4a4c      	ldr	r2, [pc, #304]	; (800730c <HAL_TIM_DMABurst_ReadStart+0x26e>)
 80071da:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	4a48      	ldr	r2, [pc, #288]	; (8007304 <HAL_TIM_DMABurst_ReadStart+0x266>)
 80071e2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	334c      	adds	r3, #76	; 0x4c
 80071ee:	4619      	mov	r1, r3
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	0a1b      	lsrs	r3, r3, #8
 80071f6:	3301      	adds	r3, #1
 80071f8:	f7f9 fe65 	bl	8000ec6 <HAL_DMA_Start_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d05e      	beq.n	80072c0 <HAL_TIM_DMABurst_ReadStart+0x222>
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e076      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	4a3f      	ldr	r2, [pc, #252]	; (8007308 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 800720c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	4a3e      	ldr	r2, [pc, #248]	; (800730c <HAL_TIM_DMABurst_ReadStart+0x26e>)
 8007214:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4a3a      	ldr	r2, [pc, #232]	; (8007304 <HAL_TIM_DMABurst_ReadStart+0x266>)
 800721c:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	334c      	adds	r3, #76	; 0x4c
 8007228:	4619      	mov	r1, r3
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	3301      	adds	r3, #1
 8007232:	f7f9 fe48 	bl	8000ec6 <HAL_DMA_Start_IT>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d043      	beq.n	80072c4 <HAL_TIM_DMABurst_ReadStart+0x226>
        return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e059      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	4a32      	ldr	r2, [pc, #200]	; (8007310 <HAL_TIM_DMABurst_ReadStart+0x272>)
 8007246:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724c:	4a31      	ldr	r2, [pc, #196]	; (8007314 <HAL_TIM_DMABurst_ReadStart+0x276>)
 800724e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007254:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <HAL_TIM_DMABurst_ReadStart+0x266>)
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	334c      	adds	r3, #76	; 0x4c
 8007262:	4619      	mov	r1, r3
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	0a1b      	lsrs	r3, r3, #8
 800726a:	3301      	adds	r3, #1
 800726c:	f7f9 fe2b 	bl	8000ec6 <HAL_DMA_Start_IT>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d028      	beq.n	80072c8 <HAL_TIM_DMABurst_ReadStart+0x22a>
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e03c      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	4a26      	ldr	r2, [pc, #152]	; (8007318 <HAL_TIM_DMABurst_ReadStart+0x27a>)
 8007280:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	4a25      	ldr	r2, [pc, #148]	; (800731c <HAL_TIM_DMABurst_ReadStart+0x27e>)
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_TIM_DMABurst_ReadStart+0x266>)
 8007290:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	334c      	adds	r3, #76	; 0x4c
 800729c:	4619      	mov	r1, r3
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	3301      	adds	r3, #1
 80072a6:	f7f9 fe0e 	bl	8000ec6 <HAL_DMA_Start_IT>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <HAL_TIM_DMABurst_ReadStart+0x22e>
        return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e01f      	b.n	80072f4 <HAL_TIM_DMABurst_ReadStart+0x256>
      break;
 80072b4:	bf00      	nop
 80072b6:	e00a      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 80072b8:	bf00      	nop
 80072ba:	e008      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 80072bc:	bf00      	nop
 80072be:	e006      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 80072c0:	bf00      	nop
 80072c2:	e004      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 80072c4:	bf00      	nop
 80072c6:	e002      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 80072cc:	bf00      	nop
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	68d1      	ldr	r1, [r2, #12]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	08007c55 	.word	0x08007c55
 8007300:	08007c79 	.word	0x08007c79
 8007304:	08007a71 	.word	0x08007a71
 8007308:	08007b75 	.word	0x08007b75
 800730c:	08007be5 	.word	0x08007be5
 8007310:	08009a1d 	.word	0x08009a1d
 8007314:	08009a41 	.word	0x08009a41
 8007318:	08007c9d 	.word	0x08007c9d
 800731c:	08007cc1 	.word	0x08007cc1

08007320 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007334:	d02e      	beq.n	8007394 <HAL_TIM_DMABurst_ReadStop+0x74>
 8007336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800733a:	d809      	bhi.n	8007350 <HAL_TIM_DMABurst_ReadStop+0x30>
 800733c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007340:	d018      	beq.n	8007374 <HAL_TIM_DMABurst_ReadStop+0x54>
 8007342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007346:	d01d      	beq.n	8007384 <HAL_TIM_DMABurst_ReadStop+0x64>
 8007348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734c:	d00a      	beq.n	8007364 <HAL_TIM_DMABurst_ReadStop+0x44>
    {
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 800734e:	e041      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
  switch (BurstRequestSrc)
 8007350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007354:	d02e      	beq.n	80073b4 <HAL_TIM_DMABurst_ReadStop+0x94>
 8007356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800735a:	d033      	beq.n	80073c4 <HAL_TIM_DMABurst_ReadStop+0xa4>
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007360:	d020      	beq.n	80073a4 <HAL_TIM_DMABurst_ReadStop+0x84>
      break;
 8007362:	e037      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	4618      	mov	r0, r3
 800736a:	f7f9 fe7c 	bl	8001066 <HAL_DMA_Abort_IT>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
      break;
 8007372:	e02f      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f7f9 fe74 	bl	8001066 <HAL_DMA_Abort_IT>
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]
      break;
 8007382:	e027      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	4618      	mov	r0, r3
 800738a:	f7f9 fe6c 	bl	8001066 <HAL_DMA_Abort_IT>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]
      break;
 8007392:	e01f      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	4618      	mov	r0, r3
 800739a:	f7f9 fe64 	bl	8001066 <HAL_DMA_Abort_IT>
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]
      break;
 80073a2:	e017      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7f9 fe5c 	bl	8001066 <HAL_DMA_Abort_IT>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]
      break;
 80073b2:	e00f      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7f9 fe54 	bl	8001066 <HAL_DMA_Abort_IT>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
      break;
 80073c2:	e007      	b.n	80073d4 <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7f9 fe4c 	bl	8001066 <HAL_DMA_Abort_IT>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
      break;
 80073d2:	bf00      	nop
  }

  if (HAL_OK == status)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <HAL_TIM_DMABurst_ReadStop+0xcc>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	68d1      	ldr	r1, [r2, #12]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	43d2      	mvns	r2, r2
 80073e8:	400a      	ands	r2, r1
 80073ea:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_TIM_GenerateEvent+0x18>
 800740a:	2302      	movs	r3, #2
 800740c:	e014      	b.n	8007438 <HAL_TIM_GenerateEvent+0x42>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_TIM_ConfigOCrefClear+0x1a>
 800745a:	2302      	movs	r3, #2
 800745c:	e0b2      	b.n	80075c4 <HAL_TIM_ConfigOCrefClear+0x180>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (sClearInputConfig->ClearInputSource)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_TIM_ConfigOCrefClear+0x38>
 8007476:	2b01      	cmp	r3, #1
 8007478:	d009      	beq.n	800748e <HAL_TIM_ConfigOCrefClear+0x4a>
                        sClearInputConfig->ClearInputFilter);
      break;
    }

    default:
      break;
 800747a:	e021      	b.n	80074c0 <HAL_TIM_ConfigOCrefClear+0x7c>
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	6892      	ldr	r2, [r2, #8]
 8007486:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800748a:	609a      	str	r2, [r3, #8]
      break;
 800748c:	e018      	b.n	80074c0 <HAL_TIM_ConfigOCrefClear+0x7c>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <HAL_TIM_ConfigOCrefClear+0x66>
          htim->State = HAL_TIM_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e08c      	b.n	80075c4 <HAL_TIM_ConfigOCrefClear+0x180>
      TIM_ETR_SetConfig(htim->Instance,
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	68d9      	ldr	r1, [r3, #12]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f001 f88d 	bl	80085d8 <TIM_ETR_SetConfig>
      break;
 80074be:	bf00      	nop
  }

  switch (Channel)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b0c      	cmp	r3, #12
 80074c4:	d874      	bhi.n	80075b0 <HAL_TIM_ConfigOCrefClear+0x16c>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <HAL_TIM_ConfigOCrefClear+0x88>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	08007501 	.word	0x08007501
 80074d0:	080075b1 	.word	0x080075b1
 80074d4:	080075b1 	.word	0x080075b1
 80074d8:	080075b1 	.word	0x080075b1
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	080075b1 	.word	0x080075b1
 80074e4:	080075b1 	.word	0x080075b1
 80074e8:	080075b1 	.word	0x080075b1
 80074ec:	08007559 	.word	0x08007559
 80074f0:	080075b1 	.word	0x080075b1
 80074f4:	080075b1 	.word	0x080075b1
 80074f8:	080075b1 	.word	0x080075b1
 80074fc:	08007585 	.word	0x08007585
  {
    case TIM_CHANNEL_1:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_TIM_ConfigOCrefClear+0xd6>
      {
        /* Enable the OCREF clear feature for Channel 1 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	6992      	ldr	r2, [r2, #24]
 8007512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007516:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 1 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
      }
      break;
 8007518:	e04b      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	6992      	ldr	r2, [r2, #24]
 8007524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007528:	619a      	str	r2, [r3, #24]
      break;
 800752a:	e042      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    case TIM_CHANNEL_2:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <HAL_TIM_ConfigOCrefClear+0x102>
      {
        /* Enable the OCREF clear feature for Channel 2 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	6992      	ldr	r2, [r2, #24]
 800753e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007542:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 2 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
      }
      break;
 8007544:	e035      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	6992      	ldr	r2, [r2, #24]
 8007550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007554:	619a      	str	r2, [r3, #24]
      break;
 8007556:	e02c      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    case TIM_CHANNEL_3:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d008      	beq.n	8007572 <HAL_TIM_ConfigOCrefClear+0x12e>
      {
        /* Enable the OCREF clear feature for Channel 3 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	6812      	ldr	r2, [r2, #0]
 8007568:	69d2      	ldr	r2, [r2, #28]
 800756a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800756e:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 3 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
      }
      break;
 8007570:	e01f      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	69d2      	ldr	r2, [r2, #28]
 800757c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007580:	61da      	str	r2, [r3, #28]
      break;
 8007582:	e016      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    case TIM_CHANNEL_4:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <HAL_TIM_ConfigOCrefClear+0x15a>
      {
        /* Enable the OCREF clear feature for Channel 4 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	69d2      	ldr	r2, [r2, #28]
 8007596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800759a:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 4 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
      }
      break;
 800759c:	e009      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	6812      	ldr	r2, [r2, #0]
 80075a6:	69d2      	ldr	r2, [r2, #28]
 80075a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075ac:	61da      	str	r2, [r3, #28]
      break;
 80075ae:	e000      	b.n	80075b2 <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    default:
      break;
 80075b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIM_ConfigClockSource+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e0a6      	b.n	8007732 <HAL_TIM_ConfigClockSource+0x166>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007602:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800760a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d067      	beq.n	80076ec <HAL_TIM_ConfigClockSource+0x120>
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d80b      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x6c>
 8007620:	2b10      	cmp	r3, #16
 8007622:	d073      	beq.n	800770c <HAL_TIM_ConfigClockSource+0x140>
 8007624:	2b10      	cmp	r3, #16
 8007626:	d802      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0x62>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d06f      	beq.n	800770c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800762c:	e078      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800762e:	2b20      	cmp	r3, #32
 8007630:	d06c      	beq.n	800770c <HAL_TIM_ConfigClockSource+0x140>
 8007632:	2b30      	cmp	r3, #48	; 0x30
 8007634:	d06a      	beq.n	800770c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007636:	e073      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007638:	2b70      	cmp	r3, #112	; 0x70
 800763a:	d00d      	beq.n	8007658 <HAL_TIM_ConfigClockSource+0x8c>
 800763c:	2b70      	cmp	r3, #112	; 0x70
 800763e:	d804      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x7e>
 8007640:	2b50      	cmp	r3, #80	; 0x50
 8007642:	d033      	beq.n	80076ac <HAL_TIM_ConfigClockSource+0xe0>
 8007644:	2b60      	cmp	r3, #96	; 0x60
 8007646:	d041      	beq.n	80076cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007648:	e06a      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	d066      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x152>
 8007650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007654:	d017      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007656:	e063      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	6899      	ldr	r1, [r3, #8]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f000 ffb6 	bl	80085d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800767a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	609a      	str	r2, [r3, #8]
      break;
 8007684:	e04c      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6899      	ldr	r1, [r3, #8]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f000 ff9f 	bl	80085d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6812      	ldr	r2, [r2, #0]
 80076a2:	6892      	ldr	r2, [r2, #8]
 80076a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076a8:	609a      	str	r2, [r3, #8]
      break;
 80076aa:	e039      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	6859      	ldr	r1, [r3, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	461a      	mov	r2, r3
 80076ba:	f000 fe5d 	bl	8008378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2150      	movs	r1, #80	; 0x50
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 ff6c 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 80076ca:	e029      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	461a      	mov	r2, r3
 80076da:	f000 feb9 	bl	8008450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2160      	movs	r1, #96	; 0x60
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff5c 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 80076ea:	e019      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	6859      	ldr	r1, [r3, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	461a      	mov	r2, r3
 80076fa:	f000 fe3d 	bl	8008378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2140      	movs	r1, #64	; 0x40
 8007704:	4618      	mov	r0, r3
 8007706:	f000 ff4c 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 800770a:	e009      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f000 ff43 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 800771c:	e000      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800771e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007752:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_TIM_SlaveConfigSynchro+0x18>
 8007786:	2302      	movs	r3, #2
 8007788:	e031      	b.n	80077ee <HAL_TIM_SlaveConfigSynchro+0x7c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fcf1 	bl	8008184 <TIM_SlaveTimer_SetConfig>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
      htim->State = HAL_TIM_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e018      	b.n	80077ee <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6812      	ldr	r2, [r2, #0]
 80077c4:	68d2      	ldr	r2, [r2, #12]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ca:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	68d2      	ldr	r2, [r2, #12]
 80077d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077da:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_TIM_SlaveConfigSynchro_IT>:
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
                                                        TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_TIM_SlaveConfigSynchro_IT+0x18>
 800780a:	2302      	movs	r3, #2
 800780c:	e031      	b.n	8007872 <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fcaf 	bl	8008184 <TIM_SlaveTimer_SetConfig>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  {
      htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e018      	b.n	8007872 <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
  }

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	68d2      	ldr	r2, [r2, #12]
 800784a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800784e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	68d2      	ldr	r2, [r2, #12]
 800785a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800785e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800787a:	b480      	push	{r7}
 800787c:	b085      	sub	sp, #20
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b0c      	cmp	r3, #12
 800788c:	d830      	bhi.n	80078f0 <HAL_TIM_ReadCapturedValue+0x76>
 800788e:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <HAL_TIM_ReadCapturedValue+0x1a>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078c9 	.word	0x080078c9
 8007898:	080078f1 	.word	0x080078f1
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	080078f1 	.word	0x080078f1
 80078a4:	080078d3 	.word	0x080078d3
 80078a8:	080078f1 	.word	0x080078f1
 80078ac:	080078f1 	.word	0x080078f1
 80078b0:	080078f1 	.word	0x080078f1
 80078b4:	080078dd 	.word	0x080078dd
 80078b8:	080078f1 	.word	0x080078f1
 80078bc:	080078f1 	.word	0x080078f1
 80078c0:	080078f1 	.word	0x080078f1
 80078c4:	080078e7 	.word	0x080078e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ce:	60fb      	str	r3, [r7, #12]

      break;
 80078d0:	e00f      	b.n	80078f2 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	60fb      	str	r3, [r7, #12]

      break;
 80078da:	e00a      	b.n	80078f2 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	60fb      	str	r3, [r7, #12]

      break;
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	60fb      	str	r3, [r7, #12]

      break;
 80078ee:	e000      	b.n	80078f2 <HAL_TIM_ReadCapturedValue+0x78>
    }

    default:
      break;
 80078f0:	bf00      	nop
  }

  return tmpreg;
 80078f2:	68fb      	ldr	r3, [r7, #12]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  return htim->State;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d6:	b2db      	uxtb	r3, r3
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  return htim->State;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f2:	b2db      	uxtb	r3, r3
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a0e:	b2db      	uxtb	r3, r3
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture handle state.
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2a:	b2db      	uxtb	r3, r3
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode handle state.
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a46:	b2db      	uxtb	r3, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a62:	b2db      	uxtb	r3, r3
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff ff94 	bl	80079b4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d103      	bne.n	8007abc <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	771a      	strb	r2, [r3, #28]
 8007aba:	e019      	b.n	8007af0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d103      	bne.n	8007ace <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	771a      	strb	r2, [r3, #28]
 8007acc:	e010      	b.n	8007af0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d103      	bne.n	8007ae0 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2204      	movs	r2, #4
 8007adc:	771a      	strb	r2, [r3, #28]
 8007ade:	e007      	b.n	8007af0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d102      	bne.n	8007af0 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2208      	movs	r2, #8
 8007aee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff ff37 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b10:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d103      	bne.n	8007b2c <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	771a      	strb	r2, [r3, #28]
 8007b2a:	e019      	b.n	8007b60 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d103      	bne.n	8007b3e <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	771a      	strb	r2, [r3, #28]
 8007b3c:	e010      	b.n	8007b60 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d103      	bne.n	8007b50 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	771a      	strb	r2, [r3, #28]
 8007b4e:	e007      	b.n	8007b60 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d102      	bne.n	8007b60 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7ff ff09 	bl	8007978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]
}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d103      	bne.n	8007b9c <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	771a      	strb	r2, [r3, #28]
 8007b9a:	e019      	b.n	8007bd0 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d103      	bne.n	8007bae <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	771a      	strb	r2, [r3, #28]
 8007bac:	e010      	b.n	8007bd0 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d103      	bne.n	8007bc0 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2204      	movs	r2, #4
 8007bbc:	771a      	strb	r2, [r3, #28]
 8007bbe:	e007      	b.n	8007bd0 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d102      	bne.n	8007bd0 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2208      	movs	r2, #8
 8007bce:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7ff feb3 	bl	800793c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	771a      	strb	r2, [r3, #28]
}
 8007bdc:	bf00      	nop
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d103      	bne.n	8007c0c <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	771a      	strb	r2, [r3, #28]
 8007c0a:	e019      	b.n	8007c40 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d103      	bne.n	8007c1e <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	771a      	strb	r2, [r3, #28]
 8007c1c:	e010      	b.n	8007c40 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d103      	bne.n	8007c30 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	771a      	strb	r2, [r3, #28]
 8007c2e:	e007      	b.n	8007c40 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d102      	bne.n	8007c40 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fe85 	bl	8007950 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f00a fcc8 	bl	8012600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff fe40 	bl	8007914 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff fe6a 	bl	800798c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff fe62 	bl	80079a0 <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a40      	ldr	r2, [pc, #256]	; (8007df8 <TIM_Base_SetConfig+0x114>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d013      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d02:	d00f      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a3d      	ldr	r2, [pc, #244]	; (8007dfc <TIM_Base_SetConfig+0x118>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00b      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a3c      	ldr	r2, [pc, #240]	; (8007e00 <TIM_Base_SetConfig+0x11c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d007      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a3b      	ldr	r2, [pc, #236]	; (8007e04 <TIM_Base_SetConfig+0x120>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a3a      	ldr	r2, [pc, #232]	; (8007e08 <TIM_Base_SetConfig+0x124>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d108      	bne.n	8007d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a2f      	ldr	r2, [pc, #188]	; (8007df8 <TIM_Base_SetConfig+0x114>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d02b      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d44:	d027      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a2c      	ldr	r2, [pc, #176]	; (8007dfc <TIM_Base_SetConfig+0x118>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d023      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a2b      	ldr	r2, [pc, #172]	; (8007e00 <TIM_Base_SetConfig+0x11c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d01f      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a2a      	ldr	r2, [pc, #168]	; (8007e04 <TIM_Base_SetConfig+0x120>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d01b      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a29      	ldr	r2, [pc, #164]	; (8007e08 <TIM_Base_SetConfig+0x124>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d017      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a28      	ldr	r2, [pc, #160]	; (8007e0c <TIM_Base_SetConfig+0x128>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d013      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a27      	ldr	r2, [pc, #156]	; (8007e10 <TIM_Base_SetConfig+0x12c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00f      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a26      	ldr	r2, [pc, #152]	; (8007e14 <TIM_Base_SetConfig+0x130>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a25      	ldr	r2, [pc, #148]	; (8007e18 <TIM_Base_SetConfig+0x134>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a24      	ldr	r2, [pc, #144]	; (8007e1c <TIM_Base_SetConfig+0x138>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a23      	ldr	r2, [pc, #140]	; (8007e20 <TIM_Base_SetConfig+0x13c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d108      	bne.n	8007da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <TIM_Base_SetConfig+0x114>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d003      	beq.n	8007ddc <TIM_Base_SetConfig+0xf8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a0c      	ldr	r2, [pc, #48]	; (8007e08 <TIM_Base_SetConfig+0x124>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d103      	bne.n	8007de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	615a      	str	r2, [r3, #20]
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40010400 	.word	0x40010400
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800
 8007e18:	40001800 	.word	0x40001800
 8007e1c:	40001c00 	.word	0x40001c00
 8007e20:	40002000 	.word	0x40002000

08007e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	f023 0201 	bic.w	r2, r3, #1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f023 0302 	bic.w	r3, r3, #2
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a20      	ldr	r2, [pc, #128]	; (8007efc <TIM_OC1_SetConfig+0xd8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC1_SetConfig+0x64>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <TIM_OC1_SetConfig+0xdc>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d10c      	bne.n	8007ea2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 0308 	bic.w	r3, r3, #8
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f023 0304 	bic.w	r3, r3, #4
 8007ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a15      	ldr	r2, [pc, #84]	; (8007efc <TIM_OC1_SetConfig+0xd8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d003      	beq.n	8007eb2 <TIM_OC1_SetConfig+0x8e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a14      	ldr	r2, [pc, #80]	; (8007f00 <TIM_OC1_SetConfig+0xdc>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d111      	bne.n	8007ed6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	621a      	str	r2, [r3, #32]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400

08007f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f023 0210 	bic.w	r2, r3, #16
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	021b      	lsls	r3, r3, #8
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f023 0320 	bic.w	r3, r3, #32
 8007f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a22      	ldr	r2, [pc, #136]	; (8007fe8 <TIM_OC2_SetConfig+0xe4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d003      	beq.n	8007f6c <TIM_OC2_SetConfig+0x68>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a21      	ldr	r2, [pc, #132]	; (8007fec <TIM_OC2_SetConfig+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d10d      	bne.n	8007f88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a17      	ldr	r2, [pc, #92]	; (8007fe8 <TIM_OC2_SetConfig+0xe4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_OC2_SetConfig+0x94>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a16      	ldr	r2, [pc, #88]	; (8007fec <TIM_OC2_SetConfig+0xe8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d113      	bne.n	8007fc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	621a      	str	r2, [r3, #32]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40010400 	.word	0x40010400

08007ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a21      	ldr	r2, [pc, #132]	; (80080d0 <TIM_OC3_SetConfig+0xe0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <TIM_OC3_SetConfig+0x66>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a20      	ldr	r2, [pc, #128]	; (80080d4 <TIM_OC3_SetConfig+0xe4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d10d      	bne.n	8008072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800805c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a16      	ldr	r2, [pc, #88]	; (80080d0 <TIM_OC3_SetConfig+0xe0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d003      	beq.n	8008082 <TIM_OC3_SetConfig+0x92>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a15      	ldr	r2, [pc, #84]	; (80080d4 <TIM_OC3_SetConfig+0xe4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d113      	bne.n	80080aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	621a      	str	r2, [r3, #32]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40010400 	.word	0x40010400

080080d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800810e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	031b      	lsls	r3, r3, #12
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a12      	ldr	r2, [pc, #72]	; (800817c <TIM_OC4_SetConfig+0xa4>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_OC4_SetConfig+0x68>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a11      	ldr	r2, [pc, #68]	; (8008180 <TIM_OC4_SetConfig+0xa8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d109      	bne.n	8008154 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	019b      	lsls	r3, r3, #6
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	2b30      	cmp	r3, #48	; 0x30
 80081c8:	d05c      	beq.n	8008284 <TIM_SlaveTimer_SetConfig+0x100>
 80081ca:	2b30      	cmp	r3, #48	; 0x30
 80081cc:	d806      	bhi.n	80081dc <TIM_SlaveTimer_SetConfig+0x58>
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d058      	beq.n	8008284 <TIM_SlaveTimer_SetConfig+0x100>
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	d056      	beq.n	8008284 <TIM_SlaveTimer_SetConfig+0x100>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d054      	beq.n	8008284 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80081da:	e054      	b.n	8008286 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80081dc:	2b50      	cmp	r3, #80	; 0x50
 80081de:	d03d      	beq.n	800825c <TIM_SlaveTimer_SetConfig+0xd8>
 80081e0:	2b50      	cmp	r3, #80	; 0x50
 80081e2:	d802      	bhi.n	80081ea <TIM_SlaveTimer_SetConfig+0x66>
 80081e4:	2b40      	cmp	r3, #64	; 0x40
 80081e6:	d010      	beq.n	800820a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80081e8:	e04d      	b.n	8008286 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80081ea:	2b60      	cmp	r3, #96	; 0x60
 80081ec:	d040      	beq.n	8008270 <TIM_SlaveTimer_SetConfig+0xec>
 80081ee:	2b70      	cmp	r3, #112	; 0x70
 80081f0:	d000      	beq.n	80081f4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80081f2:	e048      	b.n	8008286 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68d9      	ldr	r1, [r3, #12]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f000 f9e8 	bl	80085d8 <TIM_ETR_SetConfig>
      break;
 8008208:	e03d      	b.n	8008286 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b05      	cmp	r3, #5
 8008210:	d101      	bne.n	8008216 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e038      	b.n	8008288 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	6a12      	ldr	r2, [r2, #32]
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800823c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	621a      	str	r2, [r3, #32]
      break;
 800825a:	e014      	b.n	8008286 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6899      	ldr	r1, [r3, #8]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	461a      	mov	r2, r3
 800826a:	f000 f885 	bl	8008378 <TIM_TI1_ConfigInputStage>
      break;
 800826e:	e00a      	b.n	8008286 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6899      	ldr	r1, [r3, #8]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	461a      	mov	r2, r3
 800827e:	f000 f8e7 	bl	8008450 <TIM_TI2_ConfigInputStage>
      break;
 8008282:	e000      	b.n	8008286 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008284:	bf00      	nop
  }
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f023 0201 	bic.w	r2, r3, #1
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4a28      	ldr	r2, [pc, #160]	; (800835c <TIM_TI1_SetConfig+0xcc>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d01b      	beq.n	80082f6 <TIM_TI1_SetConfig+0x66>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c4:	d017      	beq.n	80082f6 <TIM_TI1_SetConfig+0x66>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4a25      	ldr	r2, [pc, #148]	; (8008360 <TIM_TI1_SetConfig+0xd0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d013      	beq.n	80082f6 <TIM_TI1_SetConfig+0x66>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a24      	ldr	r2, [pc, #144]	; (8008364 <TIM_TI1_SetConfig+0xd4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00f      	beq.n	80082f6 <TIM_TI1_SetConfig+0x66>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4a23      	ldr	r2, [pc, #140]	; (8008368 <TIM_TI1_SetConfig+0xd8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <TIM_TI1_SetConfig+0x66>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a22      	ldr	r2, [pc, #136]	; (800836c <TIM_TI1_SetConfig+0xdc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_TI1_SetConfig+0x66>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a21      	ldr	r2, [pc, #132]	; (8008370 <TIM_TI1_SetConfig+0xe0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_TI1_SetConfig+0x66>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a20      	ldr	r2, [pc, #128]	; (8008374 <TIM_TI1_SetConfig+0xe4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d101      	bne.n	80082fa <TIM_TI1_SetConfig+0x6a>
 80082f6:	2301      	movs	r3, #1
 80082f8:	e000      	b.n	80082fc <TIM_TI1_SetConfig+0x6c>
 80082fa:	2300      	movs	r3, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d008      	beq.n	8008312 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4313      	orrs	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	e003      	b.n	800831a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f043 0301 	orr.w	r3, r3, #1
 8008318:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	b2db      	uxtb	r3, r3
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f023 030a 	bic.w	r3, r3, #10
 8008334:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f003 030a 	and.w	r3, r3, #10
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	621a      	str	r2, [r3, #32]
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40010000 	.word	0x40010000
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40000c00 	.word	0x40000c00
 800836c:	40010400 	.word	0x40010400
 8008370:	40014000 	.word	0x40014000
 8008374:	40001800 	.word	0x40001800

08008378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	f023 0201 	bic.w	r2, r3, #1
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f023 030a 	bic.w	r3, r3, #10
 80083b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	621a      	str	r2, [r3, #32]
}
 80083ca:	bf00      	nop
 80083cc:	371c      	adds	r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b087      	sub	sp, #28
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	f023 0210 	bic.w	r2, r3, #16
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008402:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	031b      	lsls	r3, r3, #12
 800841a:	b29b      	uxth	r3, r3
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	4313      	orrs	r3, r2
 8008420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008428:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	621a      	str	r2, [r3, #32]
}
 8008444:	bf00      	nop
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	f023 0210 	bic.w	r2, r3, #16
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800847a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	031b      	lsls	r3, r3, #12
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800848c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	621a      	str	r2, [r3, #32]
}
 80084a4:	bf00      	nop
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f023 0303 	bic.w	r3, r3, #3
 80084dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008500:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	621a      	str	r2, [r3, #32]
}
 800851c:	bf00      	nop
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008554:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008566:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	031b      	lsls	r3, r3, #12
 800856c:	b29b      	uxth	r3, r3
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800857a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	031b      	lsls	r3, r3, #12
 8008580:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	f043 0307 	orr.w	r3, r3, #7
 80085c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	609a      	str	r2, [r3, #8]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	021a      	lsls	r2, r3, #8
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	609a      	str	r2, [r3, #8]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	2201      	movs	r2, #1
 800862c:	fa02 f303 	lsl.w	r3, r2, r3
 8008630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1a      	ldr	r2, [r3, #32]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	43db      	mvns	r3, r3
 800863a:	401a      	ands	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1a      	ldr	r2, [r3, #32]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 031f 	and.w	r3, r3, #31
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	fa01 f303 	lsl.w	r3, r1, r3
 8008650:	431a      	orrs	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop

08008664 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08a      	sub	sp, #40	; 0x28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e086      	b.n	8008786 <HAL_TIMEx_HallSensor_Init+0x122>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f8ae 	bl	80087ee <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2202      	movs	r2, #2
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f7ff fb1d 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6819      	ldr	r1, [r3, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	2203      	movs	r2, #3
 80086b8:	f7ff fdea 	bl	8008290 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6812      	ldr	r2, [r2, #0]
 80086c4:	6992      	ldr	r2, [r2, #24]
 80086c6:	f022 020c 	bic.w	r2, r2, #12
 80086ca:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	6991      	ldr	r1, [r2, #24]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	6852      	ldr	r2, [r2, #4]
 80086da:	430a      	orrs	r2, r1
 80086dc:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6812      	ldr	r2, [r2, #0]
 80086e6:	6852      	ldr	r2, [r2, #4]
 80086e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086ec:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	6892      	ldr	r2, [r2, #8]
 80086f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086fc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6812      	ldr	r2, [r2, #0]
 8008706:	6892      	ldr	r2, [r2, #8]
 8008708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800870c:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	6892      	ldr	r2, [r2, #8]
 8008718:	f022 0207 	bic.w	r2, r2, #7
 800871c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	6892      	ldr	r2, [r2, #8]
 8008728:	f042 0204 	orr.w	r2, r2, #4
 800872c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008732:	2300      	movs	r3, #0
 8008734:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008736:	2370      	movs	r3, #112	; 0x70
 8008738:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800873a:	2300      	movs	r3, #0
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800873e:	2300      	movs	r3, #0
 8008740:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f107 020c 	add.w	r2, r7, #12
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff fbd4 	bl	8007f04 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	6852      	ldr	r2, [r2, #4]
 8008766:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800876a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	6852      	ldr	r2, [r2, #4]
 8008776:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800877a:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3728      	adds	r7, #40	; 0x28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6a1a      	ldr	r2, [r3, #32]
 80087a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10f      	bne.n	80087ce <HAL_TIMEx_HallSensor_DeInit+0x40>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6a1a      	ldr	r2, [r3, #32]
 80087b4:	f240 4344 	movw	r3, #1092	; 0x444
 80087b8:	4013      	ands	r3, r2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <HAL_TIMEx_HallSensor_DeInit+0x40>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	f022 0201 	bic.w	r2, r2, #1
 80087cc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->HallSensor_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f817 	bl	8008802 <HAL_TIMEx_HallSensor_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2201      	movs	r2, #1
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff fef6 	bl	8008618 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b06      	cmp	r3, #6
 800883c:	d007      	beq.n	800884e <HAL_TIMEx_HallSensor_Start+0x38>
  {
    __HAL_TIM_ENABLE(htim);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	6812      	ldr	r2, [r2, #0]
 8008848:	f042 0201 	orr.w	r2, r2, #1
 800884c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2200      	movs	r2, #0
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fed5 	bl	8008618 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6a1a      	ldr	r2, [r3, #32]
 8008874:	f241 1311 	movw	r3, #4369	; 0x1111
 8008878:	4013      	ands	r3, r2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10f      	bne.n	800889e <HAL_TIMEx_HallSensor_Stop+0x46>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6a1a      	ldr	r2, [r3, #32]
 8008884:	f240 4344 	movw	r3, #1092	; 0x444
 8008888:	4013      	ands	r3, r2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d107      	bne.n	800889e <HAL_TIMEx_HallSensor_Stop+0x46>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	f022 0201 	bic.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6812      	ldr	r2, [r2, #0]
 80088b8:	68d2      	ldr	r2, [r2, #12]
 80088ba:	f042 0202 	orr.w	r2, r2, #2
 80088be:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2201      	movs	r2, #1
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fea5 	bl	8008618 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b06      	cmp	r3, #6
 80088de:	d007      	beq.n	80088f0 <HAL_TIMEx_HallSensor_Start_IT+0x48>
  {
    __HAL_TIM_ENABLE(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	6812      	ldr	r2, [r2, #0]
 80088ea:	f042 0201 	orr.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fe84 	bl	8008618 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6812      	ldr	r2, [r2, #0]
 8008918:	68d2      	ldr	r2, [r2, #12]
 800891a:	f022 0202 	bic.w	r2, r2, #2
 800891e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6a1a      	ldr	r2, [r3, #32]
 8008926:	f241 1311 	movw	r3, #4369	; 0x1111
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10f      	bne.n	8008950 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6a1a      	ldr	r2, [r3, #32]
 8008936:	f240 4344 	movw	r3, #1092	; 0x444
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d107      	bne.n	8008950 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6812      	ldr	r2, [r2, #0]
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	4613      	mov	r3, r2
 8008966:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d101      	bne.n	8008978 <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8008974:	2302      	movs	r3, #2
 8008976:	e04d      	b.n	8008a14 <HAL_TIMEx_HallSensor_Start_DMA+0xba>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b01      	cmp	r3, #1
 8008982:	d10b      	bne.n	800899c <HAL_TIMEx_HallSensor_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d104      	bne.n	8008994 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e03f      	b.n	8008a14 <HAL_TIMEx_HallSensor_Start_DMA+0xba>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    /* nothing to do */
  }
  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2201      	movs	r2, #1
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff fe37 	bl	8008618 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callbacks */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	4a1b      	ldr	r2, [pc, #108]	; (8008a1c <HAL_TIMEx_HallSensor_Start_DMA+0xc2>)
 80089b0:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	4a1a      	ldr	r2, [pc, #104]	; (8008a20 <HAL_TIMEx_HallSensor_Start_DMA+0xc6>)
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	4a19      	ldr	r2, [pc, #100]	; (8008a24 <HAL_TIMEx_HallSensor_Start_DMA+0xca>)
 80089c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA stream for Capture 1*/
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3334      	adds	r3, #52	; 0x34
 80089cc:	4619      	mov	r1, r3
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	f7f8 fa78 	bl	8000ec6 <HAL_DMA_Start_IT>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_TIMEx_HallSensor_Start_DMA+0x86>
  {
    return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e019      	b.n	8008a14 <HAL_TIMEx_HallSensor_Start_DMA+0xba>
  }
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	68d2      	ldr	r2, [r2, #12]
 80089ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2b06      	cmp	r3, #6
 8008a00:	d007      	beq.n	8008a12 <HAL_TIMEx_HallSensor_Start_DMA+0xb8>
  {
    __HAL_TIM_ENABLE(htim);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	6812      	ldr	r2, [r2, #0]
 8008a0c:	f042 0201 	orr.w	r2, r2, #1
 8008a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	08007b75 	.word	0x08007b75
 8008a20:	08007be5 	.word	0x08007be5
 8008a24:	08007a71 	.word	0x08007a71

08008a28 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fded 	bl	8008618 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6812      	ldr	r2, [r2, #0]
 8008a46:	68d2      	ldr	r2, [r2, #12]
 8008a48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a4c:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7f8 fb07 	bl	8001066 <HAL_DMA_Abort_IT>
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6a1a      	ldr	r2, [r3, #32]
 8008a5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10f      	bne.n	8008a88 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6a1a      	ldr	r2, [r3, #32]
 8008a6e:	f240 4344 	movw	r3, #1092	; 0x444
 8008a72:	4013      	ands	r3, r2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d107      	bne.n	8008a88 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	f022 0201 	bic.w	r2, r2, #1
 8008a86:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2204      	movs	r2, #4
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 ffdd 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ab8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b06      	cmp	r3, #6
 8008aca:	d007      	beq.n	8008adc <HAL_TIMEx_OCN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	f042 0201 	orr.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2200      	movs	r2, #0
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 ffb3 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6a1a      	ldr	r2, [r3, #32]
 8008b04:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b08:	4013      	ands	r3, r2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10f      	bne.n	8008b2e <HAL_TIMEx_OCN_Stop+0x48>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	f240 4344 	movw	r3, #1092	; 0x444
 8008b18:	4013      	ands	r3, r2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d107      	bne.n	8008b2e <HAL_TIMEx_OCN_Stop+0x48>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6a1a      	ldr	r2, [r3, #32]
 8008b34:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b38:	4013      	ands	r3, r2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10f      	bne.n	8008b5e <HAL_TIMEx_OCN_Stop+0x78>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	f240 4344 	movw	r3, #1092	; 0x444
 8008b48:	4013      	ands	r3, r2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d107      	bne.n	8008b5e <HAL_TIMEx_OCN_Stop+0x78>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	f022 0201 	bic.w	r2, r2, #1
 8008b5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d00d      	beq.n	8008b94 <HAL_TIMEx_OCN_Start_IT+0x2c>
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d014      	beq.n	8008ba6 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d000      	beq.n	8008b82 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8008b80:	e01a      	b.n	8008bb8 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6812      	ldr	r2, [r2, #0]
 8008b8a:	68d2      	ldr	r2, [r2, #12]
 8008b8c:	f042 0202 	orr.w	r2, r2, #2
 8008b90:	60da      	str	r2, [r3, #12]
      break;
 8008b92:	e011      	b.n	8008bb8 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6812      	ldr	r2, [r2, #0]
 8008b9c:	68d2      	ldr	r2, [r2, #12]
 8008b9e:	f042 0204 	orr.w	r2, r2, #4
 8008ba2:	60da      	str	r2, [r3, #12]
      break;
 8008ba4:	e008      	b.n	8008bb8 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6812      	ldr	r2, [r2, #0]
 8008bae:	68d2      	ldr	r2, [r2, #12]
 8008bb0:	f042 0208 	orr.w	r2, r2, #8
 8008bb4:	60da      	str	r2, [r3, #12]
      break;
 8008bb6:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	68d2      	ldr	r2, [r2, #12]
 8008bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2204      	movs	r2, #4
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 ff47 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008be4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b06      	cmp	r3, #6
 8008bf6:	d007      	beq.n	8008c08 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d00d      	beq.n	8008c3e <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8008c22:	2b08      	cmp	r3, #8
 8008c24:	d014      	beq.n	8008c50 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d000      	beq.n	8008c2c <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8008c2a:	e01a      	b.n	8008c62 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	68d2      	ldr	r2, [r2, #12]
 8008c36:	f022 0202 	bic.w	r2, r2, #2
 8008c3a:	60da      	str	r2, [r3, #12]
      break;
 8008c3c:	e011      	b.n	8008c62 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	68d2      	ldr	r2, [r2, #12]
 8008c48:	f022 0204 	bic.w	r2, r2, #4
 8008c4c:	60da      	str	r2, [r3, #12]
      break;
 8008c4e:	e008      	b.n	8008c62 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6812      	ldr	r2, [r2, #0]
 8008c58:	68d2      	ldr	r2, [r2, #12]
 8008c5a:	f022 0208 	bic.w	r2, r2, #8
 8008c5e:	60da      	str	r2, [r3, #12]
      break;
 8008c60:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2200      	movs	r2, #0
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fefa 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	f240 4344 	movw	r3, #1092	; 0x444
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d107      	bne.n	8008c94 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6812      	ldr	r2, [r2, #0]
 8008c8c:	68d2      	ldr	r2, [r2, #12]
 8008c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c92:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6a1a      	ldr	r2, [r3, #32]
 8008c9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10f      	bne.n	8008cc4 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6a1a      	ldr	r2, [r3, #32]
 8008caa:	f240 4344 	movw	r3, #1092	; 0x444
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	6812      	ldr	r2, [r2, #0]
 8008cbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6a1a      	ldr	r2, [r3, #32]
 8008cca:	f241 1311 	movw	r3, #4369	; 0x1111
 8008cce:	4013      	ands	r3, r2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10f      	bne.n	8008cf4 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6a1a      	ldr	r2, [r3, #32]
 8008cda:	f240 4344 	movw	r3, #1092	; 0x444
 8008cde:	4013      	ands	r3, r2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d107      	bne.n	8008cf4 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6812      	ldr	r2, [r2, #0]
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	f022 0201 	bic.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b086      	sub	sp, #24
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d101      	bne.n	8008d1c <HAL_TIMEx_OCN_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e0a6      	b.n	8008e6a <HAL_TIMEx_OCN_Start_DMA+0x16c>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d10b      	bne.n	8008d40 <HAL_TIMEx_OCN_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d104      	bne.n	8008d38 <HAL_TIMEx_OCN_Start_DMA+0x3a>
 8008d2e:	887b      	ldrh	r3, [r7, #2]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <HAL_TIMEx_OCN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e098      	b.n	8008e6a <HAL_TIMEx_OCN_Start_DMA+0x16c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do  */
  }

  switch (Channel)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d028      	beq.n	8008d98 <HAL_TIMEx_OCN_Start_DMA+0x9a>
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	d04a      	beq.n	8008de0 <HAL_TIMEx_OCN_Start_DMA+0xe2>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d000      	beq.n	8008d50 <HAL_TIMEx_OCN_Start_DMA+0x52>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 8008d4e:	e06b      	b.n	8008e28 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	4a47      	ldr	r2, [pc, #284]	; (8008e74 <HAL_TIMEx_OCN_Start_DMA+0x176>)
 8008d56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	4a46      	ldr	r2, [pc, #280]	; (8008e78 <HAL_TIMEx_OCN_Start_DMA+0x17a>)
 8008d5e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	4a45      	ldr	r2, [pc, #276]	; (8008e7c <HAL_TIMEx_OCN_Start_DMA+0x17e>)
 8008d66:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3334      	adds	r3, #52	; 0x34
 8008d74:	461a      	mov	r2, r3
 8008d76:	887b      	ldrh	r3, [r7, #2]
 8008d78:	f7f8 f8a5 	bl	8000ec6 <HAL_DMA_Start_IT>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_TIMEx_OCN_Start_DMA+0x88>
        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e071      	b.n	8008e6a <HAL_TIMEx_OCN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	6812      	ldr	r2, [r2, #0]
 8008d8e:	68d2      	ldr	r2, [r2, #12]
 8008d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d94:	60da      	str	r2, [r3, #12]
      break;
 8008d96:	e047      	b.n	8008e28 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	4a35      	ldr	r2, [pc, #212]	; (8008e74 <HAL_TIMEx_OCN_Start_DMA+0x176>)
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	4a34      	ldr	r2, [pc, #208]	; (8008e78 <HAL_TIMEx_OCN_Start_DMA+0x17a>)
 8008da6:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	4a33      	ldr	r2, [pc, #204]	; (8008e7c <HAL_TIMEx_OCN_Start_DMA+0x17e>)
 8008dae:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3338      	adds	r3, #56	; 0x38
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	887b      	ldrh	r3, [r7, #2]
 8008dc0:	f7f8 f881 	bl	8000ec6 <HAL_DMA_Start_IT>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_TIMEx_OCN_Start_DMA+0xd0>
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e04d      	b.n	8008e6a <HAL_TIMEx_OCN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	6812      	ldr	r2, [r2, #0]
 8008dd6:	68d2      	ldr	r2, [r2, #12]
 8008dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ddc:	60da      	str	r2, [r3, #12]
      break;
 8008dde:	e023      	b.n	8008e28 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	4a23      	ldr	r2, [pc, #140]	; (8008e74 <HAL_TIMEx_OCN_Start_DMA+0x176>)
 8008de6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a22      	ldr	r2, [pc, #136]	; (8008e78 <HAL_TIMEx_OCN_Start_DMA+0x17a>)
 8008dee:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	4a21      	ldr	r2, [pc, #132]	; (8008e7c <HAL_TIMEx_OCN_Start_DMA+0x17e>)
 8008df6:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	333c      	adds	r3, #60	; 0x3c
 8008e04:	461a      	mov	r2, r3
 8008e06:	887b      	ldrh	r3, [r7, #2]
 8008e08:	f7f8 f85d 	bl	8000ec6 <HAL_DMA_Start_IT>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <HAL_TIMEx_OCN_Start_DMA+0x118>
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e029      	b.n	8008e6a <HAL_TIMEx_OCN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	68d2      	ldr	r2, [r2, #12]
 8008e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e24:	60da      	str	r2, [r3, #12]
      break;
 8008e26:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 fe17 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	6812      	ldr	r2, [r2, #0]
 8008e3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2b06      	cmp	r3, #6
 8008e56:	d007      	beq.n	8008e68 <HAL_TIMEx_OCN_Start_DMA+0x16a>
  {
    __HAL_TIM_ENABLE(htim);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	6812      	ldr	r2, [r2, #0]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	08007a95 	.word	0x08007a95
 8008e78:	08007b05 	.word	0x08007b05
 8008e7c:	08007a71 	.word	0x08007a71

08008e80 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d012      	beq.n	8008eb6 <HAL_TIMEx_OCN_Stop_DMA+0x36>
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d01e      	beq.n	8008ed2 <HAL_TIMEx_OCN_Stop_DMA+0x52>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d000      	beq.n	8008e9a <HAL_TIMEx_OCN_Stop_DMA+0x1a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 8008e98:	e029      	b.n	8008eee <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6812      	ldr	r2, [r2, #0]
 8008ea2:	68d2      	ldr	r2, [r2, #12]
 8008ea4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ea8:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7f8 f8d9 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8008eb4:	e01b      	b.n	8008eee <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6812      	ldr	r2, [r2, #0]
 8008ebe:	68d2      	ldr	r2, [r2, #12]
 8008ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ec4:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7f8 f8cb 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8008ed0:	e00d      	b.n	8008eee <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	68d2      	ldr	r2, [r2, #12]
 8008edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ee0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f8 f8bd 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8008eec:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 fdb4 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6a1a      	ldr	r2, [r3, #32]
 8008f02:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f06:	4013      	ands	r3, r2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10f      	bne.n	8008f2c <HAL_TIMEx_OCN_Stop_DMA+0xac>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a1a      	ldr	r2, [r3, #32]
 8008f12:	f240 4344 	movw	r3, #1092	; 0x444
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d107      	bne.n	8008f2c <HAL_TIMEx_OCN_Stop_DMA+0xac>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	6812      	ldr	r2, [r2, #0]
 8008f24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6a1a      	ldr	r2, [r3, #32]
 8008f32:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <HAL_TIMEx_OCN_Stop_DMA+0xdc>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6a1a      	ldr	r2, [r3, #32]
 8008f42:	f240 4344 	movw	r3, #1092	; 0x444
 8008f46:	4013      	ands	r3, r2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d107      	bne.n	8008f5c <HAL_TIMEx_OCN_Stop_DMA+0xdc>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	f022 0201 	bic.w	r2, r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fd6f 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	d007      	beq.n	8008fb8 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6812      	ldr	r2, [r2, #0]
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	f042 0201 	orr.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fd45 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6a1a      	ldr	r2, [r3, #32]
 8008fe0:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10f      	bne.n	800900a <HAL_TIMEx_PWMN_Stop+0x48>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6a1a      	ldr	r2, [r3, #32]
 8008ff0:	f240 4344 	movw	r3, #1092	; 0x444
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d107      	bne.n	800900a <HAL_TIMEx_PWMN_Stop+0x48>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	6812      	ldr	r2, [r2, #0]
 8009002:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009008:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6a1a      	ldr	r2, [r3, #32]
 8009010:	f241 1311 	movw	r3, #4369	; 0x1111
 8009014:	4013      	ands	r3, r2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10f      	bne.n	800903a <HAL_TIMEx_PWMN_Stop+0x78>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6a1a      	ldr	r2, [r3, #32]
 8009020:	f240 4344 	movw	r3, #1092	; 0x444
 8009024:	4013      	ands	r3, r2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d107      	bne.n	800903a <HAL_TIMEx_PWMN_Stop+0x78>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	6812      	ldr	r2, [r2, #0]
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	f022 0201 	bic.w	r2, r2, #1
 8009038:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b04      	cmp	r3, #4
 8009052:	d00d      	beq.n	8009070 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 8009054:	2b08      	cmp	r3, #8
 8009056:	d014      	beq.n	8009082 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d000      	beq.n	800905e <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800905c:	e01a      	b.n	8009094 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	6812      	ldr	r2, [r2, #0]
 8009066:	68d2      	ldr	r2, [r2, #12]
 8009068:	f042 0202 	orr.w	r2, r2, #2
 800906c:	60da      	str	r2, [r3, #12]
      break;
 800906e:	e011      	b.n	8009094 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6812      	ldr	r2, [r2, #0]
 8009078:	68d2      	ldr	r2, [r2, #12]
 800907a:	f042 0204 	orr.w	r2, r2, #4
 800907e:	60da      	str	r2, [r3, #12]
      break;
 8009080:	e008      	b.n	8009094 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6812      	ldr	r2, [r2, #0]
 800908a:	68d2      	ldr	r2, [r2, #12]
 800908c:	f042 0208 	orr.w	r2, r2, #8
 8009090:	60da      	str	r2, [r3, #12]
      break;
 8009092:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6812      	ldr	r2, [r2, #0]
 800909c:	68d2      	ldr	r2, [r2, #12]
 800909e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090a2:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2204      	movs	r2, #4
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fcd9 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80090bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b06      	cmp	r3, #6
 80090d2:	d007      	beq.n	80090e4 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6812      	ldr	r2, [r2, #0]
 80090dc:	6812      	ldr	r2, [r2, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d00d      	beq.n	800911a <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 80090fe:	2b08      	cmp	r3, #8
 8009100:	d014      	beq.n	800912c <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d000      	beq.n	8009108 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8009106:	e01a      	b.n	800913e <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6812      	ldr	r2, [r2, #0]
 8009110:	68d2      	ldr	r2, [r2, #12]
 8009112:	f022 0202 	bic.w	r2, r2, #2
 8009116:	60da      	str	r2, [r3, #12]
      break;
 8009118:	e011      	b.n	800913e <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	68d2      	ldr	r2, [r2, #12]
 8009124:	f022 0204 	bic.w	r2, r2, #4
 8009128:	60da      	str	r2, [r3, #12]
      break;
 800912a:	e008      	b.n	800913e <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	68d2      	ldr	r2, [r2, #12]
 8009136:	f022 0208 	bic.w	r2, r2, #8
 800913a:	60da      	str	r2, [r3, #12]
      break;
 800913c:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fc8c 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	f240 4344 	movw	r3, #1092	; 0x444
 800915a:	4013      	ands	r3, r2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d107      	bne.n	8009170 <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	68d2      	ldr	r2, [r2, #12]
 800916a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800916e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	f241 1311 	movw	r3, #4369	; 0x1111
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10f      	bne.n	80091a0 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6a1a      	ldr	r2, [r3, #32]
 8009186:	f240 4344 	movw	r3, #1092	; 0x444
 800918a:	4013      	ands	r3, r2
 800918c:	2b00      	cmp	r3, #0
 800918e:	d107      	bne.n	80091a0 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6812      	ldr	r2, [r2, #0]
 8009198:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800919a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800919e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6a1a      	ldr	r2, [r3, #32]
 80091a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10f      	bne.n	80091d0 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6a1a      	ldr	r2, [r3, #32]
 80091b6:	f240 4344 	movw	r3, #1092	; 0x444
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d107      	bne.n	80091d0 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	6812      	ldr	r2, [r2, #0]
 80091ca:	f022 0201 	bic.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b086      	sub	sp, #24
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
 80091e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d101      	bne.n	80091f8 <HAL_TIMEx_PWMN_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80091f4:	2302      	movs	r3, #2
 80091f6:	e0a6      	b.n	8009346 <HAL_TIMEx_PWMN_Start_DMA+0x16c>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b01      	cmp	r3, #1
 8009202:	d10b      	bne.n	800921c <HAL_TIMEx_PWMN_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d104      	bne.n	8009214 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
 800920a:	887b      	ldrh	r3, [r7, #2]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e098      	b.n	8009346 <HAL_TIMEx_PWMN_Start_DMA+0x16c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (Channel)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b04      	cmp	r3, #4
 8009220:	d028      	beq.n	8009274 <HAL_TIMEx_PWMN_Start_DMA+0x9a>
 8009222:	2b08      	cmp	r3, #8
 8009224:	d04a      	beq.n	80092bc <HAL_TIMEx_PWMN_Start_DMA+0xe2>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d000      	beq.n	800922c <HAL_TIMEx_PWMN_Start_DMA+0x52>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 800922a:	e06b      	b.n	8009304 <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	4a47      	ldr	r2, [pc, #284]	; (8009350 <HAL_TIMEx_PWMN_Start_DMA+0x176>)
 8009232:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	4a46      	ldr	r2, [pc, #280]	; (8009354 <HAL_TIMEx_PWMN_Start_DMA+0x17a>)
 800923a:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	4a45      	ldr	r2, [pc, #276]	; (8009358 <HAL_TIMEx_PWMN_Start_DMA+0x17e>)
 8009242:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3334      	adds	r3, #52	; 0x34
 8009250:	461a      	mov	r2, r3
 8009252:	887b      	ldrh	r3, [r7, #2]
 8009254:	f7f7 fe37 	bl	8000ec6 <HAL_DMA_Start_IT>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <HAL_TIMEx_PWMN_Start_DMA+0x88>
        return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e071      	b.n	8009346 <HAL_TIMEx_PWMN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	6812      	ldr	r2, [r2, #0]
 800926a:	68d2      	ldr	r2, [r2, #12]
 800926c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009270:	60da      	str	r2, [r3, #12]
      break;
 8009272:	e047      	b.n	8009304 <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	4a35      	ldr	r2, [pc, #212]	; (8009350 <HAL_TIMEx_PWMN_Start_DMA+0x176>)
 800927a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009280:	4a34      	ldr	r2, [pc, #208]	; (8009354 <HAL_TIMEx_PWMN_Start_DMA+0x17a>)
 8009282:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	4a33      	ldr	r2, [pc, #204]	; (8009358 <HAL_TIMEx_PWMN_Start_DMA+0x17e>)
 800928a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3338      	adds	r3, #56	; 0x38
 8009298:	461a      	mov	r2, r3
 800929a:	887b      	ldrh	r3, [r7, #2]
 800929c:	f7f7 fe13 	bl	8000ec6 <HAL_DMA_Start_IT>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <HAL_TIMEx_PWMN_Start_DMA+0xd0>
        return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e04d      	b.n	8009346 <HAL_TIMEx_PWMN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	6812      	ldr	r2, [r2, #0]
 80092b2:	68d2      	ldr	r2, [r2, #12]
 80092b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092b8:	60da      	str	r2, [r3, #12]
      break;
 80092ba:	e023      	b.n	8009304 <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	4a23      	ldr	r2, [pc, #140]	; (8009350 <HAL_TIMEx_PWMN_Start_DMA+0x176>)
 80092c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	4a22      	ldr	r2, [pc, #136]	; (8009354 <HAL_TIMEx_PWMN_Start_DMA+0x17a>)
 80092ca:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	4a21      	ldr	r2, [pc, #132]	; (8009358 <HAL_TIMEx_PWMN_Start_DMA+0x17e>)
 80092d2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	333c      	adds	r3, #60	; 0x3c
 80092e0:	461a      	mov	r2, r3
 80092e2:	887b      	ldrh	r3, [r7, #2]
 80092e4:	f7f7 fdef 	bl	8000ec6 <HAL_DMA_Start_IT>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <HAL_TIMEx_PWMN_Start_DMA+0x118>
        return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e029      	b.n	8009346 <HAL_TIMEx_PWMN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	68d2      	ldr	r2, [r2, #12]
 80092fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009300:	60da      	str	r2, [r3, #12]
      break;
 8009302:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2204      	movs	r2, #4
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fba9 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800931c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009320:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b06      	cmp	r3, #6
 8009332:	d007      	beq.n	8009344 <HAL_TIMEx_PWMN_Start_DMA+0x16a>
  {
    __HAL_TIM_ENABLE(htim);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	6812      	ldr	r2, [r2, #0]
 800933e:	f042 0201 	orr.w	r2, r2, #1
 8009342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	08007a95 	.word	0x08007a95
 8009354:	08007b05 	.word	0x08007b05
 8009358:	08007a71 	.word	0x08007a71

0800935c <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b04      	cmp	r3, #4
 800936a:	d012      	beq.n	8009392 <HAL_TIMEx_PWMN_Stop_DMA+0x36>
 800936c:	2b08      	cmp	r3, #8
 800936e:	d01e      	beq.n	80093ae <HAL_TIMEx_PWMN_Stop_DMA+0x52>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d000      	beq.n	8009376 <HAL_TIMEx_PWMN_Stop_DMA+0x1a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 8009374:	e029      	b.n	80093ca <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	68d2      	ldr	r2, [r2, #12]
 8009380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009384:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	4618      	mov	r0, r3
 800938c:	f7f7 fe6b 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 8009390:	e01b      	b.n	80093ca <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	68d2      	ldr	r2, [r2, #12]
 800939c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093a0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f7 fe5d 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 80093ac:	e00d      	b.n	80093ca <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6812      	ldr	r2, [r2, #0]
 80093b6:	68d2      	ldr	r2, [r2, #12]
 80093b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093bc:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f7 fe4f 	bl	8001066 <HAL_DMA_Abort_IT>
      break;
 80093c8:	bf00      	nop
  }

  /* Disable the complementary PWM output */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2200      	movs	r2, #0
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fb46 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6a1a      	ldr	r2, [r3, #32]
 80093de:	f241 1311 	movw	r3, #4369	; 0x1111
 80093e2:	4013      	ands	r3, r2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10f      	bne.n	8009408 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6a1a      	ldr	r2, [r3, #32]
 80093ee:	f240 4344 	movw	r3, #1092	; 0x444
 80093f2:	4013      	ands	r3, r2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d107      	bne.n	8009408 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6812      	ldr	r2, [r2, #0]
 8009400:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009406:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6a1a      	ldr	r2, [r3, #32]
 800940e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009412:	4013      	ands	r3, r2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10f      	bne.n	8009438 <HAL_TIMEx_PWMN_Stop_DMA+0xdc>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6a1a      	ldr	r2, [r3, #32]
 800941e:	f240 4344 	movw	r3, #1092	; 0x444
 8009422:	4013      	ands	r3, r2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d107      	bne.n	8009438 <HAL_TIMEx_PWMN_Stop_DMA+0xdc>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6812      	ldr	r2, [r2, #0]
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	f022 0201 	bic.w	r2, r2, #1
 8009436:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2204      	movs	r2, #4
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fb01 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	6812      	ldr	r2, [r2, #0]
 800946a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800946c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009470:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2200      	movs	r2, #0
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fae8 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6a1a      	ldr	r2, [r3, #32]
 800949a:	f241 1311 	movw	r3, #4369	; 0x1111
 800949e:	4013      	ands	r3, r2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10f      	bne.n	80094c4 <HAL_TIMEx_OnePulseN_Stop+0x48>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6a1a      	ldr	r2, [r3, #32]
 80094aa:	f240 4344 	movw	r3, #1092	; 0x444
 80094ae:	4013      	ands	r3, r2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d107      	bne.n	80094c4 <HAL_TIMEx_OnePulseN_Stop+0x48>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6812      	ldr	r2, [r2, #0]
 80094bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80094be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6a1a      	ldr	r2, [r3, #32]
 80094ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80094ce:	4013      	ands	r3, r2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10f      	bne.n	80094f4 <HAL_TIMEx_OnePulseN_Stop+0x78>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6a1a      	ldr	r2, [r3, #32]
 80094da:	f240 4344 	movw	r3, #1092	; 0x444
 80094de:	4013      	ands	r3, r2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d107      	bne.n	80094f4 <HAL_TIMEx_OnePulseN_Stop+0x78>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6812      	ldr	r2, [r2, #0]
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	f022 0201 	bic.w	r2, r2, #1
 80094f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6812      	ldr	r2, [r2, #0]
 8009510:	68d2      	ldr	r2, [r2, #12]
 8009512:	f042 0202 	orr.w	r2, r2, #2
 8009516:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6812      	ldr	r2, [r2, #0]
 8009520:	68d2      	ldr	r2, [r2, #12]
 8009522:	f042 0204 	orr.w	r2, r2, #4
 8009526:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2204      	movs	r2, #4
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 fa97 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009544:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	68d2      	ldr	r2, [r2, #12]
 8009564:	f022 0202 	bic.w	r2, r2, #2
 8009568:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	68d2      	ldr	r2, [r2, #12]
 8009574:	f022 0204 	bic.w	r2, r2, #4
 8009578:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fa6e 	bl	8009a64 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6a1a      	ldr	r2, [r3, #32]
 800958e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009592:	4013      	ands	r3, r2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10f      	bne.n	80095b8 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6a1a      	ldr	r2, [r3, #32]
 800959e:	f240 4344 	movw	r3, #1092	; 0x444
 80095a2:	4013      	ands	r3, r2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d107      	bne.n	80095b8 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	6812      	ldr	r2, [r2, #0]
 80095b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80095b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80095b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6a1a      	ldr	r2, [r3, #32]
 80095be:	f241 1311 	movw	r3, #4369	; 0x1111
 80095c2:	4013      	ands	r3, r2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10f      	bne.n	80095e8 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6a1a      	ldr	r2, [r3, #32]
 80095ce:	f240 4344 	movw	r3, #1092	; 0x444
 80095d2:	4013      	ands	r3, r2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d107      	bne.n	80095e8 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6812      	ldr	r2, [r2, #0]
 80095e0:	6812      	ldr	r2, [r2, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_TIMEx_ConfigCommutEvent+0x1a>
 8009608:	2302      	movs	r3, #2
 800960a:	e04c      	b.n	80096a6 <HAL_TIMEx_ConfigCommutEvent+0xb4>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d008      	beq.n	800962c <HAL_TIMEx_ConfigCommutEvent+0x3a>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b10      	cmp	r3, #16
 800961e:	d005      	beq.n	800962c <HAL_TIMEx_ConfigCommutEvent+0x3a>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b20      	cmp	r3, #32
 8009624:	d002      	beq.n	800962c <HAL_TIMEx_ConfigCommutEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b30      	cmp	r3, #48	; 0x30
 800962a:	d10f      	bne.n	800964c <HAL_TIMEx_ConfigCommutEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	6892      	ldr	r2, [r2, #8]
 8009636:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800963a:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	6891      	ldr	r1, [r2, #8]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	430a      	orrs	r2, r1
 800964a:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	6812      	ldr	r2, [r2, #0]
 8009654:	6852      	ldr	r2, [r2, #4]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	6812      	ldr	r2, [r2, #0]
 8009664:	6852      	ldr	r2, [r2, #4]
 8009666:	f022 0204 	bic.w	r2, r2, #4
 800966a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	6812      	ldr	r2, [r2, #0]
 8009674:	6851      	ldr	r1, [r2, #4]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	430a      	orrs	r2, r1
 800967a:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	6812      	ldr	r2, [r2, #0]
 8009684:	68d2      	ldr	r2, [r2, #12]
 8009686:	f022 0220 	bic.w	r2, r2, #32
 800968a:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	6812      	ldr	r2, [r2, #0]
 8009694:	68d2      	ldr	r2, [r2, #12]
 8009696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800969a:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e04c      	b.n	8009766 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d005      	beq.n	80096ec <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d002      	beq.n	80096ec <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b30      	cmp	r3, #48	; 0x30
 80096ea:	d10f      	bne.n	800970c <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	6892      	ldr	r2, [r2, #8]
 80096f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80096fa:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	6812      	ldr	r2, [r2, #0]
 8009704:	6891      	ldr	r1, [r2, #8]
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	430a      	orrs	r2, r1
 800970a:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	6852      	ldr	r2, [r2, #4]
 8009716:	f042 0201 	orr.w	r2, r2, #1
 800971a:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	6852      	ldr	r2, [r2, #4]
 8009726:	f022 0204 	bic.w	r2, r2, #4
 800972a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	6812      	ldr	r2, [r2, #0]
 8009734:	6851      	ldr	r1, [r2, #4]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	430a      	orrs	r2, r1
 800973a:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	6812      	ldr	r2, [r2, #0]
 8009744:	68d2      	ldr	r2, [r2, #12]
 8009746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800974a:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	6812      	ldr	r2, [r2, #0]
 8009754:	68d2      	ldr	r2, [r2, #12]
 8009756:	f042 0220 	orr.w	r2, r2, #32
 800975a:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <HAL_TIMEx_ConfigCommutEvent_DMA>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009784:	2b01      	cmp	r3, #1
 8009786:	d101      	bne.n	800978c <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 8009788:	2302      	movs	r3, #2
 800978a:	e058      	b.n	800983e <HAL_TIMEx_ConfigCommutEvent_DMA+0xcc>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d008      	beq.n	80097ac <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b10      	cmp	r3, #16
 800979e:	d005      	beq.n	80097ac <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d002      	beq.n	80097ac <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b30      	cmp	r3, #48	; 0x30
 80097aa:	d10f      	bne.n	80097cc <HAL_TIMEx_ConfigCommutEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	6812      	ldr	r2, [r2, #0]
 80097b4:	6892      	ldr	r2, [r2, #8]
 80097b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80097ba:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	6891      	ldr	r1, [r2, #8]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	6852      	ldr	r2, [r2, #4]
 80097d6:	f042 0201 	orr.w	r2, r2, #1
 80097da:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	6812      	ldr	r2, [r2, #0]
 80097e4:	6852      	ldr	r2, [r2, #4]
 80097e6:	f022 0204 	bic.w	r2, r2, #4
 80097ea:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	6812      	ldr	r2, [r2, #0]
 80097f4:	6851      	ldr	r1, [r2, #4]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009800:	4a12      	ldr	r2, [pc, #72]	; (800984c <HAL_TIMEx_ConfigCommutEvent_DMA+0xda>)
 8009802:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009808:	4a11      	ldr	r2, [pc, #68]	; (8009850 <HAL_TIMEx_ConfigCommutEvent_DMA+0xde>)
 800980a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009810:	4a10      	ldr	r2, [pc, #64]	; (8009854 <HAL_TIMEx_ConfigCommutEvent_DMA+0xe2>)
 8009812:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	68d2      	ldr	r2, [r2, #12]
 800981e:	f022 0220 	bic.w	r2, r2, #32
 8009822:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	68d2      	ldr	r2, [r2, #12]
 800982e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009832:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	08009a1d 	.word	0x08009a1d
 8009850:	08009a41 	.word	0x08009a41
 8009854:	08007a71 	.word	0x08007a71

08009858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800986c:	2302      	movs	r3, #2
 800986e:	e032      	b.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098a8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d101      	bne.n	80098fe <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80098fa:	2302      	movs	r3, #2
 80098fc:	e03d      	b.n	800997a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4313      	orrs	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	4313      	orrs	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009986:	b480      	push	{r7}
 8009988:	b083      	sub	sp, #12
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <HAL_TIMEx_RemapConfig+0x18>
 800999a:	2302      	movs	r3, #2
 800999c:	e00c      	b.n	80099b8 <HAL_TIMEx_RemapConfig+0x32>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Set the Timer remapping configuration */
    WRITE_REG(htim->Instance->OR, Remap);
  }
#else
  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* LPTIM_OR_TIM1_ITR2_RMP &&  LPTIM_OR_TIM5_ITR1_RMP && LPTIM_OR_TIM5_ITR1_RMP */

  __HAL_UNLOCK(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  return htim->State;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a0e:	b2db      	uxtb	r3, r3
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f7ff ffc6 	bl	80099c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff ffbe 	bl	80099d8 <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009a5c:	bf00      	nop
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f003 031f 	and.w	r3, r3, #31
 8009a76:	2204      	movs	r2, #4
 8009a78:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a1a      	ldr	r2, [r3, #32]
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	43db      	mvns	r3, r3
 8009a86:	401a      	ands	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a1a      	ldr	r2, [r3, #32]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f003 031f 	and.w	r3, r3, #31
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	621a      	str	r2, [r3, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop

08009ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e03f      	b.n	8009b42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f009 fff6 	bl	8013ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2224      	movs	r2, #36	; 0x24
 8009ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6812      	ldr	r2, [r2, #0]
 8009aec:	68d2      	ldr	r2, [r2, #12]
 8009aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 fce8 	bl	800b4ca <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	6912      	ldr	r2, [r2, #16]
 8009b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	6952      	ldr	r2, [r2, #20]
 8009b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	68d2      	ldr	r2, [r2, #12]
 8009b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2220      	movs	r2, #32
 8009b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e047      	b.n	8009bec <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f009 ffa9 	bl	8013ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2224      	movs	r2, #36	; 0x24
 8009b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6812      	ldr	r2, [r2, #0]
 8009b86:	68d2      	ldr	r2, [r2, #12]
 8009b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f001 fc9b 	bl	800b4ca <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6812      	ldr	r2, [r2, #0]
 8009b9c:	6912      	ldr	r2, [r2, #16]
 8009b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ba2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	6812      	ldr	r2, [r2, #0]
 8009bac:	6952      	ldr	r2, [r2, #20]
 8009bae:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009bb2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6812      	ldr	r2, [r2, #0]
 8009bbc:	6952      	ldr	r2, [r2, #20]
 8009bbe:	f042 0208 	orr.w	r2, r2, #8
 8009bc2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	68d2      	ldr	r2, [r2, #12]
 8009bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bd2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e057      	b.n	8009cb8 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f009 ff53 	bl	8013ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2224      	movs	r2, #36	; 0x24
 8009c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	6812      	ldr	r2, [r2, #0]
 8009c32:	68d2      	ldr	r2, [r2, #12]
 8009c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 fc45 	bl	800b4ca <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6812      	ldr	r2, [r2, #0]
 8009c48:	6912      	ldr	r2, [r2, #16]
 8009c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	6812      	ldr	r2, [r2, #0]
 8009c58:	6952      	ldr	r2, [r2, #20]
 8009c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c5e:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6812      	ldr	r2, [r2, #0]
 8009c68:	6912      	ldr	r2, [r2, #16]
 8009c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c6e:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	6812      	ldr	r2, [r2, #0]
 8009c78:	6912      	ldr	r2, [r2, #16]
 8009c7a:	f022 0220 	bic.w	r2, r2, #32
 8009c7e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6812      	ldr	r2, [r2, #0]
 8009c88:	6911      	ldr	r1, [r2, #16]
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	6812      	ldr	r2, [r2, #0]
 8009c98:	68d2      	ldr	r2, [r2, #12]
 8009c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e05f      	b.n	8009d98 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d106      	bne.n	8009cf2 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f009 feeb 	bl	8013ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2224      	movs	r2, #36	; 0x24
 8009cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	6812      	ldr	r2, [r2, #0]
 8009d02:	68d2      	ldr	r2, [r2, #12]
 8009d04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d08:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f001 fbdd 	bl	800b4ca <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	6812      	ldr	r2, [r2, #0]
 8009d18:	6912      	ldr	r2, [r2, #16]
 8009d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	6812      	ldr	r2, [r2, #0]
 8009d28:	6952      	ldr	r2, [r2, #20]
 8009d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d2e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	6812      	ldr	r2, [r2, #0]
 8009d38:	6912      	ldr	r2, [r2, #16]
 8009d3a:	f022 020f 	bic.w	r2, r2, #15
 8009d3e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	6911      	ldr	r1, [r2, #16]
 8009d4a:	7afa      	ldrb	r2, [r7, #11]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	6812      	ldr	r2, [r2, #0]
 8009d58:	68d2      	ldr	r2, [r2, #12]
 8009d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d5e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	68d1      	ldr	r1, [r2, #12]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	6812      	ldr	r2, [r2, #0]
 8009d78:	68d2      	ldr	r2, [r2, #12]
 8009d7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e01e      	b.n	8009df0 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2224      	movs	r2, #36	; 0x24
 8009db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6812      	ldr	r2, [r2, #0]
 8009dc2:	68d2      	ldr	r2, [r2, #12]
 8009dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dc8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f009 ff0a 	bl	8013be4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	f040 8082 	bne.w	8009f46 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <HAL_UART_Transmit+0x2e>
 8009e48:	88fb      	ldrh	r3, [r7, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e07a      	b.n	8009f48 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <HAL_UART_Transmit+0x40>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e073      	b.n	8009f48 <HAL_UART_Transmit+0x128>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2221      	movs	r2, #33	; 0x21
 8009e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009e76:	f7f6 fa6b 	bl	8000350 <HAL_GetTick>
 8009e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	88fa      	ldrh	r2, [r7, #6]
 8009e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	88fa      	ldrh	r2, [r7, #6]
 8009e86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e88:	e041      	b.n	8009f0e <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	3b01      	subs	r3, #1
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea0:	d121      	bne.n	8009ee6 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2180      	movs	r1, #128	; 0x80
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f001 f908 	bl	800b0c2 <UART_WaitOnFlagUntilTimeout>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e045      	b.n	8009f48 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	8812      	ldrh	r2, [r2, #0]
 8009ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ecc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d103      	bne.n	8009ede <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	3302      	adds	r3, #2
 8009eda:	60bb      	str	r3, [r7, #8]
 8009edc:	e017      	b.n	8009f0e <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	60bb      	str	r3, [r7, #8]
 8009ee4:	e013      	b.n	8009f0e <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2200      	movs	r2, #0
 8009eee:	2180      	movs	r1, #128	; 0x80
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f001 f8e6 	bl	800b0c2 <UART_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e023      	b.n	8009f48 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	1c59      	adds	r1, r3, #1
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1b8      	bne.n	8009e8a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2140      	movs	r1, #64	; 0x40
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f001 f8cd 	bl	800b0c2 <UART_WaitOnFlagUntilTimeout>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e00a      	b.n	8009f48 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e000      	b.n	8009f48 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8009f46:	2302      	movs	r3, #2
  }
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	f040 8090 	bne.w	800a092 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <HAL_UART_Receive+0x2e>
 8009f78:	88fb      	ldrh	r3, [r7, #6]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e088      	b.n	800a094 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d101      	bne.n	8009f90 <HAL_UART_Receive+0x40>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e081      	b.n	800a094 <HAL_UART_Receive+0x144>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2222      	movs	r2, #34	; 0x22
 8009fa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009fa6:	f7f6 f9d3 	bl	8000350 <HAL_GetTick>
 8009faa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	88fa      	ldrh	r2, [r7, #6]
 8009fb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	88fa      	ldrh	r2, [r7, #6]
 8009fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009fb8:	e05c      	b.n	800a074 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd0:	d12b      	bne.n	800a02a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2120      	movs	r1, #32
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f001 f870 	bl	800b0c2 <UART_WaitOnFlagUntilTimeout>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e053      	b.n	800a094 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10c      	bne.n	800a012 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a004:	b29a      	uxth	r2, r3
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	3302      	adds	r3, #2
 800a00e:	60bb      	str	r3, [r7, #8]
 800a010:	e030      	b.n	800a074 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	b29b      	uxth	r3, r3
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	3301      	adds	r3, #1
 800a026:	60bb      	str	r3, [r7, #8]
 800a028:	e024      	b.n	800a074 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2200      	movs	r2, #0
 800a032:	2120      	movs	r1, #32
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f001 f844 	bl	800b0c2 <UART_WaitOnFlagUntilTimeout>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e027      	b.n	800a094 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d108      	bne.n	800a05e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	60ba      	str	r2, [r7, #8]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	6812      	ldr	r2, [r2, #0]
 800a056:	6852      	ldr	r2, [r2, #4]
 800a058:	b2d2      	uxtb	r2, r2
 800a05a:	701a      	strb	r2, [r3, #0]
 800a05c:	e00a      	b.n	800a074 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	60ba      	str	r2, [r7, #8]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	6812      	ldr	r2, [r2, #0]
 800a068:	6852      	ldr	r2, [r2, #4]
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a070:	b2d2      	uxtb	r2, r2
 800a072:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a078:	b29b      	uxth	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d19d      	bne.n	8009fba <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2220      	movs	r2, #32
 800a082:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	e000      	b.n	800a094 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a092:	2302      	movs	r3, #2
  }
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b20      	cmp	r3, #32
 800a0b4:	d130      	bne.n	800a118 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <HAL_UART_Transmit_IT+0x26>
 800a0bc:	88fb      	ldrh	r3, [r7, #6]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e029      	b.n	800a11a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d101      	bne.n	800a0d4 <HAL_UART_Transmit_IT+0x38>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e022      	b.n	800a11a <HAL_UART_Transmit_IT+0x7e>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	88fa      	ldrh	r2, [r7, #6]
 800a0e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2221      	movs	r2, #33	; 0x21
 800a0f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	68d2      	ldr	r2, [r2, #12]
 800a10e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a112:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e000      	b.n	800a11a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a118:	2302      	movs	r3, #2
  }
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	4613      	mov	r3, r2
 800a132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b20      	cmp	r3, #32
 800a13e:	d140      	bne.n	800a1c2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d002      	beq.n	800a14c <HAL_UART_Receive_IT+0x26>
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e039      	b.n	800a1c4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a156:	2b01      	cmp	r3, #1
 800a158:	d101      	bne.n	800a15e <HAL_UART_Receive_IT+0x38>
 800a15a:	2302      	movs	r3, #2
 800a15c:	e032      	b.n	800a1c4 <HAL_UART_Receive_IT+0x9e>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	88fa      	ldrh	r2, [r7, #6]
 800a170:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	88fa      	ldrh	r2, [r7, #6]
 800a176:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2222      	movs	r2, #34	; 0x22
 800a182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	68d2      	ldr	r2, [r2, #12]
 800a198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a19c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	6952      	ldr	r2, [r2, #20]
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
 800a1ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	68d2      	ldr	r2, [r2, #12]
 800a1b8:	f042 0220 	orr.w	r2, r2, #32
 800a1bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e000      	b.n	800a1c4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a1c2:	2302      	movs	r3, #2
  }
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d153      	bne.n	800a292 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <HAL_UART_Transmit_DMA+0x26>
 800a1f0:	88fb      	ldrh	r3, [r7, #6]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e04c      	b.n	800a294 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a200:	2b01      	cmp	r3, #1
 800a202:	d101      	bne.n	800a208 <HAL_UART_Transmit_DMA+0x38>
 800a204:	2302      	movs	r3, #2
 800a206:	e045      	b.n	800a294 <HAL_UART_Transmit_DMA+0xc4>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	88fa      	ldrh	r2, [r7, #6]
 800a21a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	88fa      	ldrh	r2, [r7, #6]
 800a220:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2221      	movs	r2, #33	; 0x21
 800a22c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a234:	4a19      	ldr	r2, [pc, #100]	; (800a29c <HAL_UART_Transmit_DMA+0xcc>)
 800a236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23c:	4a18      	ldr	r2, [pc, #96]	; (800a2a0 <HAL_UART_Transmit_DMA+0xd0>)
 800a23e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a244:	4a17      	ldr	r2, [pc, #92]	; (800a2a4 <HAL_UART_Transmit_DMA+0xd4>)
 800a246:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24c:	2200      	movs	r2, #0
 800a24e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a250:	f107 0308 	add.w	r3, r7, #8
 800a254:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3304      	adds	r3, #4
 800a264:	461a      	mov	r2, r3
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	f7f6 fe2d 	bl	8000ec6 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a274:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	6812      	ldr	r2, [r2, #0]
 800a286:	6952      	ldr	r2, [r2, #20]
 800a288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a28c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	e000      	b.n	800a294 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a292:	2302      	movs	r3, #2
  }
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	0800af3d 	.word	0x0800af3d
 800a2a0:	0800af8f 	.word	0x0800af8f
 800a2a4:	0800b02f 	.word	0x0800b02f

0800a2a8 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d166      	bne.n	800a390 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <HAL_UART_Receive_DMA+0x26>
 800a2c8:	88fb      	ldrh	r3, [r7, #6]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e05f      	b.n	800a392 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d101      	bne.n	800a2e0 <HAL_UART_Receive_DMA+0x38>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e058      	b.n	800a392 <HAL_UART_Receive_DMA+0xea>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	88fa      	ldrh	r2, [r7, #6]
 800a2f2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2222      	movs	r2, #34	; 0x22
 800a2fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a306:	4a25      	ldr	r2, [pc, #148]	; (800a39c <HAL_UART_Receive_DMA+0xf4>)
 800a308:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30e:	4a24      	ldr	r2, [pc, #144]	; (800a3a0 <HAL_UART_Receive_DMA+0xf8>)
 800a310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	4a23      	ldr	r2, [pc, #140]	; (800a3a4 <HAL_UART_Receive_DMA+0xfc>)
 800a318:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31e:	2200      	movs	r2, #0
 800a320:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a322:	f107 0308 	add.w	r3, r7, #8
 800a326:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3304      	adds	r3, #4
 800a332:	4619      	mov	r1, r3
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	f7f6 fdc4 	bl	8000ec6 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a33e:	2300      	movs	r3, #0
 800a340:	613b      	str	r3, [r7, #16]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	613b      	str	r3, [r7, #16]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	613b      	str	r3, [r7, #16]
 800a352:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	6812      	ldr	r2, [r2, #0]
 800a364:	68d2      	ldr	r2, [r2, #12]
 800a366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a36a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	6812      	ldr	r2, [r2, #0]
 800a374:	6952      	ldr	r2, [r2, #20]
 800a376:	f042 0201 	orr.w	r2, r2, #1
 800a37a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	6812      	ldr	r2, [r2, #0]
 800a384:	6952      	ldr	r2, [r2, #20]
 800a386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a38a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	e000      	b.n	800a392 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a390:	2302      	movs	r3, #2
  }
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	0800afab 	.word	0x0800afab
 800a3a0:	0800b013 	.word	0x0800b013
 800a3a4:	0800b02f 	.word	0x0800b02f

0800a3a8 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <HAL_UART_DMAPause+0x1a>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e050      	b.n	800a464 <HAL_UART_DMAPause+0xbc>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d4:	2b80      	cmp	r3, #128	; 0x80
 800a3d6:	bf0c      	ite	eq
 800a3d8:	2301      	moveq	r3, #1
 800a3da:	2300      	movne	r3, #0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b21      	cmp	r3, #33	; 0x21
 800a3ea:	d10a      	bne.n	800a402 <HAL_UART_DMAPause+0x5a>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d007      	beq.n	800a402 <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6812      	ldr	r2, [r2, #0]
 800a3fa:	6952      	ldr	r2, [r2, #20]
 800a3fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a400:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40c:	2b40      	cmp	r3, #64	; 0x40
 800a40e:	bf0c      	ite	eq
 800a410:	2301      	moveq	r3, #1
 800a412:	2300      	movne	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b22      	cmp	r3, #34	; 0x22
 800a422:	d11a      	bne.n	800a45a <HAL_UART_DMAPause+0xb2>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d017      	beq.n	800a45a <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6812      	ldr	r2, [r2, #0]
 800a432:	68d2      	ldr	r2, [r2, #12]
 800a434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a438:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6812      	ldr	r2, [r2, #0]
 800a442:	6952      	ldr	r2, [r2, #20]
 800a444:	f022 0201 	bic.w	r2, r2, #1
 800a448:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	6952      	ldr	r2, [r2, #20]
 800a454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a458:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d101      	bne.n	800a486 <HAL_UART_DMAResume+0x16>
 800a482:	2302      	movs	r3, #2
 800a484:	e03f      	b.n	800a506 <HAL_UART_DMAResume+0x96>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b21      	cmp	r3, #33	; 0x21
 800a498:	d107      	bne.n	800a4aa <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6812      	ldr	r2, [r2, #0]
 800a4a2:	6952      	ldr	r2, [r2, #20]
 800a4a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4a8:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b22      	cmp	r3, #34	; 0x22
 800a4b4:	d122      	bne.n	800a4fc <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60fb      	str	r3, [r7, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	60fb      	str	r3, [r7, #12]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	68d2      	ldr	r2, [r2, #12]
 800a4d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4da:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	6952      	ldr	r2, [r2, #20]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	6952      	ldr	r2, [r2, #20]
 800a4f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4fa:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a528:	2b80      	cmp	r3, #128	; 0x80
 800a52a:	bf0c      	ite	eq
 800a52c:	2301      	moveq	r3, #1
 800a52e:	2300      	movne	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b21      	cmp	r3, #33	; 0x21
 800a53e:	d116      	bne.n	800a56e <HAL_UART_DMAStop+0x5c>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d013      	beq.n	800a56e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	6952      	ldr	r2, [r2, #20]
 800a550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a554:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a562:	4618      	mov	r0, r3
 800a564:	f7f6 fd0f 	bl	8000f86 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fdf4 	bl	800b156 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a578:	2b40      	cmp	r3, #64	; 0x40
 800a57a:	bf0c      	ite	eq
 800a57c:	2301      	moveq	r3, #1
 800a57e:	2300      	movne	r3, #0
 800a580:	b2db      	uxtb	r3, r3
 800a582:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b22      	cmp	r3, #34	; 0x22
 800a58e:	d116      	bne.n	800a5be <HAL_UART_DMAStop+0xac>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d013      	beq.n	800a5be <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6812      	ldr	r2, [r2, #0]
 800a59e:	6952      	ldr	r2, [r2, #20]
 800a5a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5a4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7f6 fce7 	bl	8000f86 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fde2 	bl	800b182 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	6812      	ldr	r2, [r2, #0]
 800a5d8:	68d2      	ldr	r2, [r2, #12]
 800a5da:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800a5de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6812      	ldr	r2, [r2, #0]
 800a5e8:	6952      	ldr	r2, [r2, #20]
 800a5ea:	f022 0201 	bic.w	r2, r2, #1
 800a5ee:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5fa:	2b80      	cmp	r3, #128	; 0x80
 800a5fc:	d124      	bne.n	800a648 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6812      	ldr	r2, [r2, #0]
 800a606:	6952      	ldr	r2, [r2, #20]
 800a608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a60c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a612:	2b00      	cmp	r3, #0
 800a614:	d018      	beq.n	800a648 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	2200      	movs	r2, #0
 800a61c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	4618      	mov	r0, r3
 800a624:	f7f6 fcaf 	bl	8000f86 <HAL_DMA_Abort>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00c      	beq.n	800a648 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	4618      	mov	r0, r3
 800a634:	f7f7 f86c 	bl	8001710 <HAL_DMA_GetError>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	d104      	bne.n	800a648 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2210      	movs	r2, #16
 800a642:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e03d      	b.n	800a6c4 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a652:	2b40      	cmp	r3, #64	; 0x40
 800a654:	d124      	bne.n	800a6a0 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	6952      	ldr	r2, [r2, #20]
 800a660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a664:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d018      	beq.n	800a6a0 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	2200      	movs	r2, #0
 800a674:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7f6 fc83 	bl	8000f86 <HAL_DMA_Abort>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00c      	beq.n	800a6a0 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f7 f840 	bl	8001710 <HAL_DMA_GetError>
 800a690:	4603      	mov	r3, r0
 800a692:	2b20      	cmp	r3, #32
 800a694:	d104      	bne.n	800a6a0 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2210      	movs	r2, #16
 800a69a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e011      	b.n	800a6c4 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	6812      	ldr	r2, [r2, #0]
 800a6dc:	68d2      	ldr	r2, [r2, #12]
 800a6de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a6e2:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ee:	2b80      	cmp	r3, #128	; 0x80
 800a6f0:	d124      	bne.n	800a73c <HAL_UART_AbortTransmit+0x70>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	6812      	ldr	r2, [r2, #0]
 800a6fa:	6952      	ldr	r2, [r2, #20]
 800a6fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a700:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a706:	2b00      	cmp	r3, #0
 800a708:	d018      	beq.n	800a73c <HAL_UART_AbortTransmit+0x70>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70e:	2200      	movs	r2, #0
 800a710:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a716:	4618      	mov	r0, r3
 800a718:	f7f6 fc35 	bl	8000f86 <HAL_DMA_Abort>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00c      	beq.n	800a73c <HAL_UART_AbortTransmit+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a726:	4618      	mov	r0, r3
 800a728:	f7f6 fff2 	bl	8001710 <HAL_DMA_GetError>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d104      	bne.n	800a73c <HAL_UART_AbortTransmit+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2210      	movs	r2, #16
 800a736:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e007      	b.n	800a74c <HAL_UART_AbortTransmit+0x80>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	68d2      	ldr	r2, [r2, #12]
 800a766:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a76a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6812      	ldr	r2, [r2, #0]
 800a774:	6952      	ldr	r2, [r2, #20]
 800a776:	f022 0201 	bic.w	r2, r2, #1
 800a77a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a786:	2b40      	cmp	r3, #64	; 0x40
 800a788:	d124      	bne.n	800a7d4 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	6812      	ldr	r2, [r2, #0]
 800a792:	6952      	ldr	r2, [r2, #20]
 800a794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a798:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d018      	beq.n	800a7d4 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f6 fbe9 	bl	8000f86 <HAL_DMA_Abort>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00c      	beq.n	800a7d4 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f6 ffa6 	bl	8001710 <HAL_DMA_GetError>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d104      	bne.n	800a7d4 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2210      	movs	r2, #16
 800a7ce:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e007      	b.n	800a7e4 <HAL_UART_AbortReceive+0x90>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2220      	movs	r2, #32
 800a7de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	6812      	ldr	r2, [r2, #0]
 800a800:	68d2      	ldr	r2, [r2, #12]
 800a802:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800a806:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	6952      	ldr	r2, [r2, #20]
 800a812:	f022 0201 	bic.w	r2, r2, #1
 800a816:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00f      	beq.n	800a840 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a82a:	2b80      	cmp	r3, #128	; 0x80
 800a82c:	d104      	bne.n	800a838 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	4a3e      	ldr	r2, [pc, #248]	; (800a92c <HAL_UART_Abort_IT+0x140>)
 800a834:	651a      	str	r2, [r3, #80]	; 0x50
 800a836:	e003      	b.n	800a840 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83c:	2200      	movs	r2, #0
 800a83e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00f      	beq.n	800a868 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a852:	2b40      	cmp	r3, #64	; 0x40
 800a854:	d104      	bne.n	800a860 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	4a35      	ldr	r2, [pc, #212]	; (800a930 <HAL_UART_Abort_IT+0x144>)
 800a85c:	651a      	str	r2, [r3, #80]	; 0x50
 800a85e:	e003      	b.n	800a868 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a864:	2200      	movs	r2, #0
 800a866:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a872:	2b80      	cmp	r3, #128	; 0x80
 800a874:	d11a      	bne.n	800a8ac <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6812      	ldr	r2, [r2, #0]
 800a87e:	6952      	ldr	r2, [r2, #20]
 800a880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a884:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	4618      	mov	r0, r3
 800a894:	f7f6 fbe7 	bl	8001066 <HAL_DMA_Abort_IT>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d004      	beq.n	800a8a8 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	651a      	str	r2, [r3, #80]	; 0x50
 800a8a6:	e001      	b.n	800a8ac <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b6:	2b40      	cmp	r3, #64	; 0x40
 800a8b8:	d11c      	bne.n	800a8f4 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	6812      	ldr	r2, [r2, #0]
 800a8c2:	6952      	ldr	r2, [r2, #20]
 800a8c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8c8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d010      	beq.n	800a8f4 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f6 fbc5 	bl	8001066 <HAL_DMA_Abort_IT>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d006      	beq.n	800a8f0 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	e001      	b.n	800a8f4 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d113      	bne.n	800a922 <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2220      	movs	r2, #32
 800a910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f9df 	bl	800ace0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	0800b1e7 	.word	0x0800b1e7
 800a930:	0800b241 	.word	0x0800b241

0800a934 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	68d2      	ldr	r2, [r2, #12]
 800a946:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a94a:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a956:	2b80      	cmp	r3, #128	; 0x80
 800a958:	d12a      	bne.n	800a9b0 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6812      	ldr	r2, [r2, #0]
 800a962:	6952      	ldr	r2, [r2, #20]
 800a964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a968:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d013      	beq.n	800a99a <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a976:	4a16      	ldr	r2, [pc, #88]	; (800a9d0 <HAL_UART_AbortTransmit_IT+0x9c>)
 800a978:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97e:	4618      	mov	r0, r3
 800a980:	f7f6 fb71 	bl	8001066 <HAL_DMA_Abort_IT>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d01c      	beq.n	800a9c4 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
 800a998:	e014      	b.n	800a9c4 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f9a3 	bl	800acf4 <HAL_UART_AbortTransmitCpltCallback>
 800a9ae:	e009      	b.n	800a9c4 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f998 	bl	800acf4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	0800b29b 	.word	0x0800b29b

0800a9d4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6812      	ldr	r2, [r2, #0]
 800a9e4:	68d2      	ldr	r2, [r2, #12]
 800a9e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a9ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	6952      	ldr	r2, [r2, #20]
 800a9f6:	f022 0201 	bic.w	r2, r2, #1
 800a9fa:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa06:	2b40      	cmp	r3, #64	; 0x40
 800aa08:	d12a      	bne.n	800aa60 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	6812      	ldr	r2, [r2, #0]
 800aa12:	6952      	ldr	r2, [r2, #20]
 800aa14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa18:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d013      	beq.n	800aa4a <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa26:	4a16      	ldr	r2, [pc, #88]	; (800aa80 <HAL_UART_AbortReceive_IT+0xac>)
 800aa28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7f6 fb19 	bl	8001066 <HAL_DMA_Abort_IT>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d01c      	beq.n	800aa74 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	e014      	b.n	800aa74 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2220      	movs	r2, #32
 800aa54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f955 	bl	800ad08 <HAL_UART_AbortReceiveCpltCallback>
 800aa5e:	e009      	b.n	800aa74 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2220      	movs	r2, #32
 800aa6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f94a 	bl	800ad08 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	0800b2c5 	.word	0x0800b2c5

0800aa84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10d      	bne.n	800aad6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	f003 0320 	and.w	r3, r3, #32
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d008      	beq.n	800aad6 <HAL_UART_IRQHandler+0x52>
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fc7a 	bl	800b3c8 <UART_Receive_IT>
      return;
 800aad4:	e0cc      	b.n	800ac70 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 80ab 	beq.w	800ac34 <HAL_UART_IRQHandler+0x1b0>
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d105      	bne.n	800aaf4 <HAL_UART_IRQHandler+0x70>
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 80a0 	beq.w	800ac34 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <HAL_UART_IRQHandler+0x90>
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0c:	f043 0201 	orr.w	r2, r3, #1
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00a      	beq.n	800ab34 <HAL_UART_IRQHandler+0xb0>
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2c:	f043 0202 	orr.w	r2, r3, #2
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <HAL_UART_IRQHandler+0xd0>
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4c:	f043 0204 	orr.w	r2, r3, #4
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	f003 0308 	and.w	r3, r3, #8
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <HAL_UART_IRQHandler+0xf0>
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d005      	beq.n	800ab74 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6c:	f043 0208 	orr.w	r2, r3, #8
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d078      	beq.n	800ac6e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	f003 0320 	and.w	r3, r3, #32
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <HAL_UART_IRQHandler+0x112>
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	f003 0320 	and.w	r3, r3, #32
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fc19 	bl	800b3c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba0:	2b40      	cmp	r3, #64	; 0x40
 800aba2:	bf0c      	ite	eq
 800aba4:	2301      	moveq	r3, #1
 800aba6:	2300      	movne	r3, #0
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb0:	f003 0308 	and.w	r3, r3, #8
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d102      	bne.n	800abbe <HAL_UART_IRQHandler+0x13a>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d031      	beq.n	800ac22 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fadf 	bl	800b182 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abce:	2b40      	cmp	r3, #64	; 0x40
 800abd0:	d123      	bne.n	800ac1a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	6952      	ldr	r2, [r2, #20]
 800abdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abe0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d013      	beq.n	800ac12 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abee:	4a22      	ldr	r2, [pc, #136]	; (800ac78 <HAL_UART_IRQHandler+0x1f4>)
 800abf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f6 fa35 	bl	8001066 <HAL_DMA_Abort_IT>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d016      	beq.n	800ac30 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac10:	e00e      	b.n	800ac30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f85a 	bl	800accc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac18:	e00a      	b.n	800ac30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f856 	bl	800accc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac20:	e006      	b.n	800ac30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f852 	bl	800accc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ac2e:	e01e      	b.n	800ac6e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac30:	bf00      	nop
    return;
 800ac32:	e01c      	b.n	800ac6e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d008      	beq.n	800ac50 <HAL_UART_IRQHandler+0x1cc>
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fb50 	bl	800b2ee <UART_Transmit_IT>
    return;
 800ac4e:	e00f      	b.n	800ac70 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <HAL_UART_IRQHandler+0x1ec>
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fb97 	bl	800b398 <UART_EndTransmit_IT>
    return;
 800ac6a:	bf00      	nop
 800ac6c:	e000      	b.n	800ac70 <HAL_UART_IRQHandler+0x1ec>
    return;
 800ac6e:	bf00      	nop
  }
}
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	0800b1bf 	.word	0x0800b1bf
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d101      	bne.n	800ad32 <HAL_LIN_SendBreak+0x16>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e018      	b.n	800ad64 <HAL_LIN_SendBreak+0x48>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2224      	movs	r2, #36	; 0x24
 800ad3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6812      	ldr	r2, [r2, #0]
 800ad4a:	68d2      	ldr	r2, [r2, #12]
 800ad4c:	f042 0201 	orr.w	r2, r2, #1
 800ad50:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d101      	bne.n	800ad86 <HAL_MultiProcessor_EnterMuteMode+0x16>
 800ad82:	2302      	movs	r3, #2
 800ad84:	e018      	b.n	800adb8 <HAL_MultiProcessor_EnterMuteMode+0x48>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2224      	movs	r2, #36	; 0x24
 800ad92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	68d2      	ldr	r2, [r2, #12]
 800ada0:	f042 0202 	orr.w	r2, r2, #2
 800ada4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800add2:	2b01      	cmp	r3, #1
 800add4:	d101      	bne.n	800adda <HAL_MultiProcessor_ExitMuteMode+0x16>
 800add6:	2302      	movs	r3, #2
 800add8:	e018      	b.n	800ae0c <HAL_MultiProcessor_ExitMuteMode+0x48>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2224      	movs	r2, #36	; 0x24
 800ade6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6812      	ldr	r2, [r2, #0]
 800adf2:	68d2      	ldr	r2, [r2, #12]
 800adf4:	f022 0202 	bic.w	r2, r2, #2
 800adf8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d101      	bne.n	800ae32 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e020      	b.n	800ae74 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2224      	movs	r2, #36	; 0x24
 800ae3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f023 030c 	bic.w	r3, r3, #12
 800ae50:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f043 0308 	orr.w	r3, r3, #8
 800ae58:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d101      	bne.n	800ae9a <HAL_HalfDuplex_EnableReceiver+0x1a>
 800ae96:	2302      	movs	r3, #2
 800ae98:	e020      	b.n	800aedc <HAL_HalfDuplex_EnableReceiver+0x5c>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2224      	movs	r2, #36	; 0x24
 800aea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f023 030c 	bic.w	r3, r3, #12
 800aeb8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f043 0304 	orr.w	r3, r3, #4
 800aec0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2220      	movs	r2, #32
 800aece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	2300      	movs	r3, #0
 800aef6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	b2db      	uxtb	r3, r3
 800af14:	4313      	orrs	r3, r2
 800af16:	b2db      	uxtb	r3, r3
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af54:	2b00      	cmp	r3, #0
 800af56:	d113      	bne.n	800af80 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	6812      	ldr	r2, [r2, #0]
 800af66:	6952      	ldr	r2, [r2, #20]
 800af68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af6c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	6812      	ldr	r2, [r2, #0]
 800af76:	68d2      	ldr	r2, [r2, #12]
 800af78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af7c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af7e:	e002      	b.n	800af86 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f008 feb3 	bl	8013cec <HAL_UART_TxCpltCallback>
}
 800af86:	bf00      	nop
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f7ff fe77 	bl	800ac90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa2:	bf00      	nop
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d11e      	bne.n	800b004 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	6812      	ldr	r2, [r2, #0]
 800afd4:	68d2      	ldr	r2, [r2, #12]
 800afd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afda:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	6952      	ldr	r2, [r2, #20]
 800afe6:	f022 0201 	bic.w	r2, r2, #1
 800afea:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	6812      	ldr	r2, [r2, #0]
 800aff4:	6952      	ldr	r2, [r2, #20]
 800aff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800affa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2220      	movs	r2, #32
 800b000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f008 fe25 	bl	8013c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b00a:	bf00      	nop
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7ff fe49 	bl	800acb8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b036:	2300      	movs	r3, #0
 800b038:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04a:	2b80      	cmp	r3, #128	; 0x80
 800b04c:	bf0c      	ite	eq
 800b04e:	2301      	moveq	r3, #1
 800b050:	2300      	movne	r3, #0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b21      	cmp	r3, #33	; 0x21
 800b060:	d108      	bne.n	800b074 <UART_DMAError+0x46>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d005      	beq.n	800b074 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2200      	movs	r2, #0
 800b06c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b06e:	68b8      	ldr	r0, [r7, #8]
 800b070:	f000 f871 	bl	800b156 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07e:	2b40      	cmp	r3, #64	; 0x40
 800b080:	bf0c      	ite	eq
 800b082:	2301      	moveq	r3, #1
 800b084:	2300      	movne	r3, #0
 800b086:	b2db      	uxtb	r3, r3
 800b088:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b22      	cmp	r3, #34	; 0x22
 800b094:	d108      	bne.n	800b0a8 <UART_DMAError+0x7a>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d005      	beq.n	800b0a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b0a2:	68b8      	ldr	r0, [r7, #8]
 800b0a4:	f000 f86d 	bl	800b182 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ac:	f043 0210 	orr.w	r2, r3, #16
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0b4:	68b8      	ldr	r0, [r7, #8]
 800b0b6:	f7ff fe09 	bl	800accc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	603b      	str	r3, [r7, #0]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0d2:	e02c      	b.n	800b12e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0da:	d028      	beq.n	800b12e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d007      	beq.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0e2:	f7f5 f935 	bl	8000350 <HAL_GetTick>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	1ad2      	subs	r2, r2, r3
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d91d      	bls.n	800b12e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	6812      	ldr	r2, [r2, #0]
 800b0fa:	68d2      	ldr	r2, [r2, #12]
 800b0fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b100:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	6812      	ldr	r2, [r2, #0]
 800b10a:	6952      	ldr	r2, [r2, #20]
 800b10c:	f022 0201 	bic.w	r2, r2, #1
 800b110:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2220      	movs	r2, #32
 800b116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e00f      	b.n	800b14e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	401a      	ands	r2, r3
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	bf0c      	ite	eq
 800b13e:	2301      	moveq	r3, #1
 800b140:	2300      	movne	r3, #0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	461a      	mov	r2, r3
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d0c3      	beq.n	800b0d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b156:	b480      	push	{r7}
 800b158:	b083      	sub	sp, #12
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	6812      	ldr	r2, [r2, #0]
 800b166:	68d2      	ldr	r2, [r2, #12]
 800b168:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b16c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2220      	movs	r2, #32
 800b172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b176:	bf00      	nop
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	6812      	ldr	r2, [r2, #0]
 800b192:	68d2      	ldr	r2, [r2, #12]
 800b194:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b198:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	6812      	ldr	r2, [r2, #0]
 800b1a2:	6952      	ldr	r2, [r2, #20]
 800b1a4:	f022 0201 	bic.w	r2, r2, #1
 800b1a8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b1b2:	bf00      	nop
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff fd77 	bl	800accc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1de:	bf00      	nop
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d114      	bne.n	800b238 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2220      	movs	r2, #32
 800b224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2220      	movs	r2, #32
 800b22c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f7ff fd55 	bl	800ace0 <HAL_UART_AbortCpltCallback>
 800b236:	e000      	b.n	800b23a <UART_DMATxAbortCallback+0x54>
      return;
 800b238:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	2200      	movs	r2, #0
 800b254:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b264:	2b00      	cmp	r3, #0
 800b266:	d114      	bne.n	800b292 <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2220      	movs	r2, #32
 800b27e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2220      	movs	r2, #32
 800b286:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f7ff fd28 	bl	800ace0 <HAL_UART_AbortCpltCallback>
 800b290:	e000      	b.n	800b294 <UART_DMARxAbortCallback+0x54>
      return;
 800b292:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff fd1c 	bl	800acf4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2bc:	bf00      	nop
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2220      	movs	r2, #32
 800b2dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7ff fd11 	bl	800ad08 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b21      	cmp	r3, #33	; 0x21
 800b300:	d143      	bne.n	800b38a <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b30a:	d119      	bne.n	800b340 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	8812      	ldrh	r2, [r2, #0]
 800b31a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b31e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d105      	bne.n	800b334 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a1b      	ldr	r3, [r3, #32]
 800b32c:	1c9a      	adds	r2, r3, #2
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	621a      	str	r2, [r3, #32]
 800b332:	e00e      	b.n	800b352 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	621a      	str	r2, [r3, #32]
 800b33e:	e008      	b.n	800b352 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	1c58      	adds	r0, r3, #1
 800b34a:	6879      	ldr	r1, [r7, #4]
 800b34c:	6208      	str	r0, [r1, #32]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b356:	b29b      	uxth	r3, r3
 800b358:	3b01      	subs	r3, #1
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	4619      	mov	r1, r3
 800b360:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10f      	bne.n	800b386 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	6812      	ldr	r2, [r2, #0]
 800b36e:	68d2      	ldr	r2, [r2, #12]
 800b370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b374:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	6812      	ldr	r2, [r2, #0]
 800b37e:	68d2      	ldr	r2, [r2, #12]
 800b380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b384:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	e000      	b.n	800b38c <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b38a:	2302      	movs	r3, #2
  }
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	68d2      	ldr	r2, [r2, #12]
 800b3aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2220      	movs	r2, #32
 800b3b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f008 fc97 	bl	8013cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	2b22      	cmp	r3, #34	; 0x22
 800b3da:	d171      	bne.n	800b4c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e4:	d123      	bne.n	800b42e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10e      	bne.n	800b412 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40a:	1c9a      	adds	r2, r3, #2
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	629a      	str	r2, [r3, #40]	; 0x28
 800b410:	e029      	b.n	800b466 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	629a      	str	r2, [r3, #40]	; 0x28
 800b42c:	e01b      	b.n	800b466 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10a      	bne.n	800b44c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43a:	1c59      	adds	r1, r3, #1
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	6291      	str	r1, [r2, #40]	; 0x28
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6812      	ldr	r2, [r2, #0]
 800b444:	6852      	ldr	r2, [r2, #4]
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
 800b44a:	e00c      	b.n	800b466 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b450:	1c59      	adds	r1, r3, #1
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6291      	str	r1, [r2, #40]	; 0x28
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	6812      	ldr	r2, [r2, #0]
 800b45a:	6852      	ldr	r2, [r2, #4]
 800b45c:	b2d2      	uxtb	r2, r2
 800b45e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b29b      	uxth	r3, r3
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	4619      	mov	r1, r3
 800b474:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b476:	2b00      	cmp	r3, #0
 800b478:	d120      	bne.n	800b4bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	6812      	ldr	r2, [r2, #0]
 800b482:	68d2      	ldr	r2, [r2, #12]
 800b484:	f022 0220 	bic.w	r2, r2, #32
 800b488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6812      	ldr	r2, [r2, #0]
 800b492:	68d2      	ldr	r2, [r2, #12]
 800b494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b498:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6812      	ldr	r2, [r2, #0]
 800b4a2:	6952      	ldr	r2, [r2, #20]
 800b4a4:	f022 0201 	bic.w	r2, r2, #1
 800b4a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2220      	movs	r2, #32
 800b4ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f008 fbce 	bl	8013c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e002      	b.n	800b4c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e000      	b.n	800b4c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b4c0:	2302      	movs	r3, #2
  }
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	6812      	ldr	r2, [r2, #0]
 800b4da:	6912      	ldr	r2, [r2, #16]
 800b4dc:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	68d2      	ldr	r2, [r2, #12]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b50e:	f023 030c 	bic.w	r3, r3, #12
 800b512:	68f9      	ldr	r1, [r7, #12]
 800b514:	430b      	orrs	r3, r1
 800b516:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	6812      	ldr	r2, [r2, #0]
 800b520:	6952      	ldr	r2, [r2, #20]
 800b522:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	6992      	ldr	r2, [r2, #24]
 800b52a:	430a      	orrs	r2, r1
 800b52c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b536:	f040 80e4 	bne.w	800b702 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4aac      	ldr	r2, [pc, #688]	; (800b7f0 <UART_SetConfig+0x326>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d004      	beq.n	800b54e <UART_SetConfig+0x84>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4aaa      	ldr	r2, [pc, #680]	; (800b7f4 <UART_SetConfig+0x32a>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d16c      	bne.n	800b628 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681c      	ldr	r4, [r3, #0]
 800b552:	f7f7 f967 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b556:	4602      	mov	r2, r0
 800b558:	4613      	mov	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	009a      	lsls	r2, r3, #2
 800b560:	441a      	add	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	fbb2 f3f3 	udiv	r3, r2, r3
 800b56c:	4aa2      	ldr	r2, [pc, #648]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	095b      	lsrs	r3, r3, #5
 800b574:	011d      	lsls	r5, r3, #4
 800b576:	f7f7 f955 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b57a:	4602      	mov	r2, r0
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	009a      	lsls	r2, r3, #2
 800b584:	441a      	add	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b590:	f7f7 f948 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b594:	4602      	mov	r2, r0
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009a      	lsls	r2, r3, #2
 800b59e:	441a      	add	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5aa:	4a93      	ldr	r2, [pc, #588]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b0:	095b      	lsrs	r3, r3, #5
 800b5b2:	2264      	movs	r2, #100	; 0x64
 800b5b4:	fb02 f303 	mul.w	r3, r2, r3
 800b5b8:	1af3      	subs	r3, r6, r3
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	3332      	adds	r3, #50	; 0x32
 800b5be:	4a8e      	ldr	r2, [pc, #568]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c4:	095b      	lsrs	r3, r3, #5
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5cc:	441d      	add	r5, r3
 800b5ce:	f7f7 f929 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	009a      	lsls	r2, r3, #2
 800b5dc:	441a      	add	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5e8:	f7f7 f91c 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009a      	lsls	r2, r3, #2
 800b5f6:	441a      	add	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b602:	4a7d      	ldr	r2, [pc, #500]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b604:	fba2 2303 	umull	r2, r3, r2, r3
 800b608:	095b      	lsrs	r3, r3, #5
 800b60a:	2264      	movs	r2, #100	; 0x64
 800b60c:	fb02 f303 	mul.w	r3, r2, r3
 800b610:	1af3      	subs	r3, r6, r3
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	3332      	adds	r3, #50	; 0x32
 800b616:	4a78      	ldr	r2, [pc, #480]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b618:	fba2 2303 	umull	r2, r3, r2, r3
 800b61c:	095b      	lsrs	r3, r3, #5
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	442b      	add	r3, r5
 800b624:	60a3      	str	r3, [r4, #8]
 800b626:	e155      	b.n	800b8d4 <UART_SetConfig+0x40a>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681c      	ldr	r4, [r3, #0]
 800b62c:	f7f7 f8e6 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b630:	4602      	mov	r2, r0
 800b632:	4613      	mov	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	009a      	lsls	r2, r3, #2
 800b63a:	441a      	add	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	fbb2 f3f3 	udiv	r3, r2, r3
 800b646:	4a6c      	ldr	r2, [pc, #432]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b648:	fba2 2303 	umull	r2, r3, r2, r3
 800b64c:	095b      	lsrs	r3, r3, #5
 800b64e:	011d      	lsls	r5, r3, #4
 800b650:	f7f7 f8d4 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b654:	4602      	mov	r2, r0
 800b656:	4613      	mov	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4413      	add	r3, r2
 800b65c:	009a      	lsls	r2, r3, #2
 800b65e:	441a      	add	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	fbb2 f6f3 	udiv	r6, r2, r3
 800b66a:	f7f7 f8c7 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b66e:	4602      	mov	r2, r0
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009a      	lsls	r2, r3, #2
 800b678:	441a      	add	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	fbb2 f3f3 	udiv	r3, r2, r3
 800b684:	4a5c      	ldr	r2, [pc, #368]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b686:	fba2 2303 	umull	r2, r3, r2, r3
 800b68a:	095b      	lsrs	r3, r3, #5
 800b68c:	2264      	movs	r2, #100	; 0x64
 800b68e:	fb02 f303 	mul.w	r3, r2, r3
 800b692:	1af3      	subs	r3, r6, r3
 800b694:	00db      	lsls	r3, r3, #3
 800b696:	3332      	adds	r3, #50	; 0x32
 800b698:	4a57      	ldr	r2, [pc, #348]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b69a:	fba2 2303 	umull	r2, r3, r2, r3
 800b69e:	095b      	lsrs	r3, r3, #5
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b6a6:	441d      	add	r5, r3
 800b6a8:	f7f7 f8a8 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	009a      	lsls	r2, r3, #2
 800b6b6:	441a      	add	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6c2:	f7f7 f89b 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	009a      	lsls	r2, r3, #2
 800b6d0:	441a      	add	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6dc:	4a46      	ldr	r2, [pc, #280]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b6de:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e2:	095b      	lsrs	r3, r3, #5
 800b6e4:	2264      	movs	r2, #100	; 0x64
 800b6e6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ea:	1af3      	subs	r3, r6, r3
 800b6ec:	00db      	lsls	r3, r3, #3
 800b6ee:	3332      	adds	r3, #50	; 0x32
 800b6f0:	4a41      	ldr	r2, [pc, #260]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f6:	095b      	lsrs	r3, r3, #5
 800b6f8:	f003 0307 	and.w	r3, r3, #7
 800b6fc:	442b      	add	r3, r5
 800b6fe:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800b700:	e0e8      	b.n	800b8d4 <UART_SetConfig+0x40a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a3a      	ldr	r2, [pc, #232]	; (800b7f0 <UART_SetConfig+0x326>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d004      	beq.n	800b716 <UART_SetConfig+0x24c>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a38      	ldr	r2, [pc, #224]	; (800b7f4 <UART_SetConfig+0x32a>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d172      	bne.n	800b7fc <UART_SetConfig+0x332>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681c      	ldr	r4, [r3, #0]
 800b71a:	f7f7 f883 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b71e:	4602      	mov	r2, r0
 800b720:	4613      	mov	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	009a      	lsls	r2, r3, #2
 800b728:	441a      	add	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	fbb2 f3f3 	udiv	r3, r2, r3
 800b734:	4a30      	ldr	r2, [pc, #192]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b736:	fba2 2303 	umull	r2, r3, r2, r3
 800b73a:	095b      	lsrs	r3, r3, #5
 800b73c:	011d      	lsls	r5, r3, #4
 800b73e:	f7f7 f871 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b742:	4602      	mov	r2, r0
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009a      	lsls	r2, r3, #2
 800b74c:	441a      	add	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	fbb2 f6f3 	udiv	r6, r2, r3
 800b758:	f7f7 f864 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b75c:	4602      	mov	r2, r0
 800b75e:	4613      	mov	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	009a      	lsls	r2, r3, #2
 800b766:	441a      	add	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b772:	4a21      	ldr	r2, [pc, #132]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b774:	fba2 2303 	umull	r2, r3, r2, r3
 800b778:	095b      	lsrs	r3, r3, #5
 800b77a:	2264      	movs	r2, #100	; 0x64
 800b77c:	fb02 f303 	mul.w	r3, r2, r3
 800b780:	1af3      	subs	r3, r6, r3
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	3332      	adds	r3, #50	; 0x32
 800b786:	4a1c      	ldr	r2, [pc, #112]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b788:	fba2 2303 	umull	r2, r3, r2, r3
 800b78c:	095b      	lsrs	r3, r3, #5
 800b78e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b792:	441d      	add	r5, r3
 800b794:	f7f7 f846 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b798:	4602      	mov	r2, r0
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	009a      	lsls	r2, r3, #2
 800b7a2:	441a      	add	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7ae:	f7f7 f839 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	009a      	lsls	r2, r3, #2
 800b7bc:	441a      	add	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c8:	4a0b      	ldr	r2, [pc, #44]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	2264      	movs	r2, #100	; 0x64
 800b7d2:	fb02 f303 	mul.w	r3, r2, r3
 800b7d6:	1af3      	subs	r3, r6, r3
 800b7d8:	011b      	lsls	r3, r3, #4
 800b7da:	3332      	adds	r3, #50	; 0x32
 800b7dc:	4a06      	ldr	r2, [pc, #24]	; (800b7f8 <UART_SetConfig+0x32e>)
 800b7de:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e2:	095b      	lsrs	r3, r3, #5
 800b7e4:	f003 030f 	and.w	r3, r3, #15
 800b7e8:	442b      	add	r3, r5
 800b7ea:	60a3      	str	r3, [r4, #8]
 800b7ec:	e072      	b.n	800b8d4 <UART_SetConfig+0x40a>
 800b7ee:	bf00      	nop
 800b7f0:	40011000 	.word	0x40011000
 800b7f4:	40011400 	.word	0x40011400
 800b7f8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681c      	ldr	r4, [r3, #0]
 800b800:	f7f6 fffc 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b804:	4602      	mov	r2, r0
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009a      	lsls	r2, r3, #2
 800b80e:	441a      	add	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	fbb2 f3f3 	udiv	r3, r2, r3
 800b81a:	4a30      	ldr	r2, [pc, #192]	; (800b8dc <UART_SetConfig+0x412>)
 800b81c:	fba2 2303 	umull	r2, r3, r2, r3
 800b820:	095b      	lsrs	r3, r3, #5
 800b822:	011d      	lsls	r5, r3, #4
 800b824:	f7f6 ffea 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b828:	4602      	mov	r2, r0
 800b82a:	4613      	mov	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	009a      	lsls	r2, r3, #2
 800b832:	441a      	add	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b83e:	f7f6 ffdd 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b842:	4602      	mov	r2, r0
 800b844:	4613      	mov	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	009a      	lsls	r2, r3, #2
 800b84c:	441a      	add	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	fbb2 f3f3 	udiv	r3, r2, r3
 800b858:	4a20      	ldr	r2, [pc, #128]	; (800b8dc <UART_SetConfig+0x412>)
 800b85a:	fba2 2303 	umull	r2, r3, r2, r3
 800b85e:	095b      	lsrs	r3, r3, #5
 800b860:	2264      	movs	r2, #100	; 0x64
 800b862:	fb02 f303 	mul.w	r3, r2, r3
 800b866:	1af3      	subs	r3, r6, r3
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	3332      	adds	r3, #50	; 0x32
 800b86c:	4a1b      	ldr	r2, [pc, #108]	; (800b8dc <UART_SetConfig+0x412>)
 800b86e:	fba2 2303 	umull	r2, r3, r2, r3
 800b872:	095b      	lsrs	r3, r3, #5
 800b874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b878:	441d      	add	r5, r3
 800b87a:	f7f6 ffbf 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b87e:	4602      	mov	r2, r0
 800b880:	4613      	mov	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	009a      	lsls	r2, r3, #2
 800b888:	441a      	add	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	fbb2 f6f3 	udiv	r6, r2, r3
 800b894:	f7f6 ffb2 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800b898:	4602      	mov	r2, r0
 800b89a:	4613      	mov	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	009a      	lsls	r2, r3, #2
 800b8a2:	441a      	add	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ae:	4a0b      	ldr	r2, [pc, #44]	; (800b8dc <UART_SetConfig+0x412>)
 800b8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b4:	095b      	lsrs	r3, r3, #5
 800b8b6:	2264      	movs	r2, #100	; 0x64
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
 800b8bc:	1af3      	subs	r3, r6, r3
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	3332      	adds	r3, #50	; 0x32
 800b8c2:	4a06      	ldr	r2, [pc, #24]	; (800b8dc <UART_SetConfig+0x412>)
 800b8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c8:	095b      	lsrs	r3, r3, #5
 800b8ca:	f003 030f 	and.w	r3, r3, #15
 800b8ce:	442b      	add	r3, r5
 800b8d0:	60a3      	str	r3, [r4, #8]
}
 800b8d2:	e7ff      	b.n	800b8d4 <UART_SetConfig+0x40a>
 800b8d4:	bf00      	nop
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8dc:	51eb851f 	.word	0x51eb851f

0800b8e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b8ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8f2:	2b84      	cmp	r3, #132	; 0x84
 800b8f4:	d005      	beq.n	800b902 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b8f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3303      	adds	r3, #3
 800b900:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b902:	68fb      	ldr	r3, [r7, #12]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <makeCmsisPriority>:

#if (INCLUDE_uxTaskPriorityGet == 1)
/* Convert from FreeRTOS priority number to CMSIS type osPriority */
static osPriority makeCmsisPriority (unsigned portBASE_TYPE fpriority)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  osPriority priority = osPriorityError;
 800b918:	2384      	movs	r3, #132	; 0x84
 800b91a:	81fb      	strh	r3, [r7, #14]
  
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b06      	cmp	r3, #6
 800b920:	d804      	bhi.n	800b92c <makeCmsisPriority+0x1c>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	b29b      	uxth	r3, r3
 800b926:	3b03      	subs	r3, #3
 800b928:	b29b      	uxth	r3, r3
 800b92a:	81fb      	strh	r3, [r7, #14]
  }
  
  return priority;
 800b92c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b942:	f3ef 8305 	mrs	r3, IPSR
 800b946:	607b      	str	r3, [r7, #4]
  return(result);
 800b948:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	bf14      	ite	ne
 800b94e:	2301      	movne	r3, #1
 800b950:	2300      	moveq	r3, #0
 800b952:	b2db      	uxtb	r3, r3
}
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b964:	f003 fb8c 	bl	800f080 <vTaskStartScheduler>
  
  return osOK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800b972:	f004 fa67 	bl	800fe44 <xTaskGetSchedulerState>
 800b976:	4603      	mov	r3, r0
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d101      	bne.n	800b980 <osKernelRunning+0x12>
    return 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	e000      	b.n	800b982 <osKernelRunning+0x14>
  else
    return 1;
 800b980:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800b982:	4618      	mov	r0, r3
 800b984:	bd80      	pop	{r7, pc}

0800b986 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b98a:	f7ff ffd7 	bl	800b93c <inHandlerMode>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d003      	beq.n	800b99c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b994:	f003 fca6 	bl	800f2e4 <xTaskGetTickCountFromISR>
 800b998:	4603      	mov	r3, r0
 800b99a:	e002      	b.n	800b9a2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b99c:	f003 fc92 	bl	800f2c4 <xTaskGetTickCount>
 800b9a0:	4603      	mov	r3, r0
  }
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b9a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9a8:	b089      	sub	sp, #36	; 0x24
 800b9aa:	af04      	add	r7, sp, #16
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d020      	beq.n	800b9fa <osThreadCreate+0x54>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01c      	beq.n	800b9fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685c      	ldr	r4, [r3, #4]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681d      	ldr	r5, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	691e      	ldr	r6, [r3, #16]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff ff84 	bl	800b8e0 <makeFreeRtosPriority>
 800b9d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9e2:	9202      	str	r2, [sp, #8]
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	9100      	str	r1, [sp, #0]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	4632      	mov	r2, r6
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f002 fe0a 	bl	800e608 <xTaskCreateStatic>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	e01c      	b.n	800ba34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685c      	ldr	r4, [r3, #4]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba06:	b29e      	uxth	r6, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff ff66 	bl	800b8e0 <makeFreeRtosPriority>
 800ba14:	4602      	mov	r2, r0
 800ba16:	f107 030c 	add.w	r3, r7, #12
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	9200      	str	r2, [sp, #0]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	4632      	mov	r2, r6
 800ba22:	4629      	mov	r1, r5
 800ba24:	4620      	mov	r0, r4
 800ba26:	f002 fe48 	bl	800e6ba <xTaskCreate>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d001      	beq.n	800ba34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	e000      	b.n	800ba36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba34:	68fb      	ldr	r3, [r7, #12]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba3e <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800ba42:	f004 f9ef 	bl	800fe24 <xTaskGetCurrentTaskHandle>
 800ba46:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f002 ff6d 	bl	800e934 <vTaskDelete>
  return osOK;
 800ba5a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800ba64:	b480      	push	{r7}
 800ba66:	af00      	add	r7, sp, #0
  taskYIELD();
 800ba68:	4b06      	ldr	r3, [pc, #24]	; (800ba84 <osThreadYield+0x20>)
 800ba6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	e000ed04 	.word	0xe000ed04

0800ba88 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800ba94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff ff21 	bl	800b8e0 <makeFreeRtosPriority>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f003 f8a6 	bl	800ebf4 <vTaskPrioritySet>
  return osOK;
 800baa8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b082      	sub	sp, #8
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 800baba:	f7ff ff3f 	bl	800b93c <inHandlerMode>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d008      	beq.n	800bad6 <osThreadGetPriority+0x24>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f003 f869 	bl	800eb9c <uxTaskPriorityGetFromISR>
 800baca:	4603      	mov	r3, r0
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff ff1f 	bl	800b910 <makeCmsisPriority>
 800bad2:	4603      	mov	r3, r0
 800bad4:	e007      	b.n	800bae6 <osThreadGetPriority+0x34>
  }
  else
  {  
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f003 f846 	bl	800eb68 <uxTaskPriorityGet>
 800badc:	4603      	mov	r3, r0
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff ff16 	bl	800b910 <makeCmsisPriority>
 800bae4:	4603      	mov	r3, r0
  }
#else
  return osPriorityError;
#endif
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <osDelay+0x16>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	e000      	b.n	800bb06 <osDelay+0x18>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4618      	mov	r0, r3
 800bb08:	f002 ffa2 	bl	800ea50 <vTaskDelay>
  
  return osOK;
 800bb0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	607a      	str	r2, [r7, #4]
 800bb22:	72fb      	strb	r3, [r7, #11]
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
#endif

#else 
	return NULL;
 800bb24:	2300      	movs	r3, #0
#endif
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b085      	sub	sp, #20
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	60fb      	str	r3, [r7, #12]
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
  }

#else 
  result = osErrorOS;
 800bb40:	23ff      	movs	r3, #255	; 0xff
 800bb42:	60fb      	str	r3, [r7, #12]
#endif
  return result;
 800bb44:	68fb      	ldr	r3, [r7, #12]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60fb      	str	r3, [r7, #12]
    if (xTimerStop(timer_id, 0) != pdPASS) {
      result = osErrorOS;
    }
  }
#else 
  result = osErrorOS;
 800bb5e:	23ff      	movs	r3, #255	; 0xff
 800bb60:	60fb      	str	r3, [r7, #12]
#endif 
  return result;
 800bb62:	68fb      	ldr	r3, [r7, #12]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <osTimerDelete>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerDelete (osTimerId timer_id)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
osStatus result = osOK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]
      result = osErrorOS;
    }
  } 
    
#else 
  result = osErrorOS;
 800bb7c:	23ff      	movs	r3, #255	; 0xff
 800bb7e:	60fb      	str	r3, [r7, #12]
#endif 
 
  return result;
 800bb80:	68fb      	ldr	r3, [r7, #12]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b086      	sub	sp, #24
 800bb92:	af02      	add	r7, sp, #8
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800bba0:	f7ff fecc 	bl	800b93c <inHandlerMode>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01c      	beq.n	800bbe4 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	f107 0208 	add.w	r2, r7, #8
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	2201      	movs	r2, #1
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f004 fe0a 	bl	80107d4 <xTaskGenericNotifyFromISR>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d002      	beq.n	800bbcc <osSignalSet+0x3e>
      return 0x80000000;
 800bbc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbca:	e019      	b.n	800bc00 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d015      	beq.n	800bbfe <osSignalSet+0x70>
 800bbd2:	4b0d      	ldr	r3, [pc, #52]	; (800bc08 <osSignalSet+0x7a>)
 800bbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	e00c      	b.n	800bbfe <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	2201      	movs	r2, #1
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f004 fd51 	bl	8010694 <xTaskGenericNotify>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d002      	beq.n	800bbfe <osSignalSet+0x70>
    return 0x80000000;
 800bbf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbfc:	e000      	b.n	800bc00 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800bbfe:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	e000ed04 	.word	0xe000ed04

0800bc0c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800bc0c:	b590      	push	{r4, r7, lr}
 800bc0e:	b089      	sub	sp, #36	; 0x24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800bc18:	2300      	movs	r3, #0
 800bc1a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc26:	d103      	bne.n	800bc30 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800bc28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc2c:	61fb      	str	r3, [r7, #28]
 800bc2e:	e009      	b.n	800bc44 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d006      	beq.n	800bc44 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d101      	bne.n	800bc44 <osSignalWait+0x38>
      ticks = 1;
 800bc40:	2301      	movs	r3, #1
 800bc42:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800bc44:	f7ff fe7a 	bl	800b93c <inHandlerMode>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d002      	beq.n	800bc54 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800bc4e:	2382      	movs	r3, #130	; 0x82
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	e01b      	b.n	800bc8c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	f107 0310 	add.w	r3, r7, #16
 800bc5a:	1d1a      	adds	r2, r3, #4
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	2000      	movs	r0, #0
 800bc60:	f004 fcbe 	bl	80105e0 <xTaskNotifyWait>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d008      	beq.n	800bc7c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d102      	bne.n	800bc76 <osSignalWait+0x6a>
 800bc70:	2300      	movs	r3, #0
 800bc72:	613b      	str	r3, [r7, #16]
 800bc74:	e00a      	b.n	800bc8c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800bc76:	2340      	movs	r3, #64	; 0x40
 800bc78:	613b      	str	r3, [r7, #16]
 800bc7a:	e007      	b.n	800bc8c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	da02      	bge.n	800bc88 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800bc82:	2386      	movs	r3, #134	; 0x86
 800bc84:	613b      	str	r3, [r7, #16]
 800bc86:	e001      	b.n	800bc8c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800bc88:	2308      	movs	r3, #8
 800bc8a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	461c      	mov	r4, r3
 800bc90:	f107 0310 	add.w	r3, r7, #16
 800bc94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	3724      	adds	r7, #36	; 0x24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd90      	pop	{r4, r7, pc}

0800bca4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d007      	beq.n	800bcc4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	2001      	movs	r0, #1
 800bcbc:	f001 fc44 	bl	800d548 <xQueueCreateMutexStatic>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	e003      	b.n	800bccc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bcc4:	2001      	movs	r0, #1
 800bcc6:	f001 fc27 	bl	800d518 <xQueueCreateMutex>
 800bcca:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bcde:	2300      	movs	r3, #0
 800bce0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <osMutexWait+0x18>
    return osErrorParameter;
 800bce8:	2380      	movs	r3, #128	; 0x80
 800bcea:	e03a      	b.n	800bd62 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcf6:	d103      	bne.n	800bd00 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	e009      	b.n	800bd14 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d006      	beq.n	800bd14 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <osMutexWait+0x40>
      ticks = 1;
 800bd10:	2301      	movs	r3, #1
 800bd12:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bd14:	f7ff fe12 	bl	800b93c <inHandlerMode>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d017      	beq.n	800bd4e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bd1e:	f107 0308 	add.w	r3, r7, #8
 800bd22:	461a      	mov	r2, r3
 800bd24:	2100      	movs	r1, #0
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f002 f904 	bl	800df34 <xQueueReceiveFromISR>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d001      	beq.n	800bd36 <osMutexWait+0x62>
      return osErrorOS;
 800bd32:	23ff      	movs	r3, #255	; 0xff
 800bd34:	e015      	b.n	800bd62 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d011      	beq.n	800bd60 <osMutexWait+0x8c>
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <osMutexWait+0x98>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	e008      	b.n	800bd60 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bd4e:	68f9      	ldr	r1, [r7, #12]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f001 ff09 	bl	800db68 <xQueueSemaphoreTake>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d001      	beq.n	800bd60 <osMutexWait+0x8c>
    return osErrorOS;
 800bd5c:	23ff      	movs	r3, #255	; 0xff
 800bd5e:	e000      	b.n	800bd62 <osMutexWait+0x8e>
  }
  
  return osOK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	e000ed04 	.word	0xe000ed04

0800bd70 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bd80:	f7ff fddc 	bl	800b93c <inHandlerMode>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d016      	beq.n	800bdb8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bd8a:	f107 0308 	add.w	r3, r7, #8
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f001 fd83 	bl	800d89c <xQueueGiveFromISR>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d001      	beq.n	800bda0 <osMutexRelease+0x30>
      return osErrorOS;
 800bd9c:	23ff      	movs	r3, #255	; 0xff
 800bd9e:	e017      	b.n	800bdd0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d013      	beq.n	800bdce <osMutexRelease+0x5e>
 800bda6:	4b0c      	ldr	r3, [pc, #48]	; (800bdd8 <osMutexRelease+0x68>)
 800bda8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	e00a      	b.n	800bdce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800bdb8:	2300      	movs	r3, #0
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 fbdd 	bl	800d57e <xQueueGenericSend>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d001      	beq.n	800bdce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800bdca:	23ff      	movs	r3, #255	; 0xff
 800bdcc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bde4:	f7ff fdaa 	bl	800b93c <inHandlerMode>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <osMutexDelete+0x16>
    return osErrorISR;
 800bdee:	2382      	movs	r3, #130	; 0x82
 800bdf0:	e003      	b.n	800bdfa <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f002 f9da 	bl	800e1ac <vQueueDelete>

  return osOK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be02:	b580      	push	{r7, lr}
 800be04:	b086      	sub	sp, #24
 800be06:	af02      	add	r7, sp, #8
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d010      	beq.n	800be36 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d10b      	bne.n	800be32 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	2303      	movs	r3, #3
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	4613      	mov	r3, r2
 800be24:	2200      	movs	r2, #0
 800be26:	2100      	movs	r1, #0
 800be28:	2001      	movs	r0, #1
 800be2a:	f001 fa89 	bl	800d340 <xQueueGenericCreateStatic>
 800be2e:	4603      	mov	r3, r0
 800be30:	e016      	b.n	800be60 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800be32:	2300      	movs	r3, #0
 800be34:	e014      	b.n	800be60 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d110      	bne.n	800be5e <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800be3c:	2203      	movs	r2, #3
 800be3e:	2100      	movs	r1, #0
 800be40:	2001      	movs	r0, #1
 800be42:	f001 faef 	bl	800d424 <xQueueGenericCreate>
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d005      	beq.n	800be5a <osSemaphoreCreate+0x58>
 800be4e:	2300      	movs	r3, #0
 800be50:	2200      	movs	r2, #0
 800be52:	2100      	movs	r1, #0
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f001 fb92 	bl	800d57e <xQueueGenericSend>
      return sema;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	e000      	b.n	800be60 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800be5e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800be72:	2300      	movs	r3, #0
 800be74:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800be7c:	2380      	movs	r3, #128	; 0x80
 800be7e:	e03a      	b.n	800bef6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be8a:	d103      	bne.n	800be94 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800be8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	e009      	b.n	800bea8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d006      	beq.n	800bea8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <osSemaphoreWait+0x40>
      ticks = 1;
 800bea4:	2301      	movs	r3, #1
 800bea6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bea8:	f7ff fd48 	bl	800b93c <inHandlerMode>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d017      	beq.n	800bee2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800beb2:	f107 0308 	add.w	r3, r7, #8
 800beb6:	461a      	mov	r2, r3
 800beb8:	2100      	movs	r1, #0
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f002 f83a 	bl	800df34 <xQueueReceiveFromISR>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d001      	beq.n	800beca <osSemaphoreWait+0x62>
      return osErrorOS;
 800bec6:	23ff      	movs	r3, #255	; 0xff
 800bec8:	e015      	b.n	800bef6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d011      	beq.n	800bef4 <osSemaphoreWait+0x8c>
 800bed0:	4b0b      	ldr	r3, [pc, #44]	; (800bf00 <osSemaphoreWait+0x98>)
 800bed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	e008      	b.n	800bef4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bee2:	68f9      	ldr	r1, [r7, #12]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f001 fe3f 	bl	800db68 <xQueueSemaphoreTake>
 800beea:	4603      	mov	r3, r0
 800beec:	2b01      	cmp	r3, #1
 800beee:	d001      	beq.n	800bef4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bef0:	23ff      	movs	r3, #255	; 0xff
 800bef2:	e000      	b.n	800bef6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	e000ed04 	.word	0xe000ed04

0800bf04 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bf14:	f7ff fd12 	bl	800b93c <inHandlerMode>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d016      	beq.n	800bf4c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf1e:	f107 0308 	add.w	r3, r7, #8
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f001 fcb9 	bl	800d89c <xQueueGiveFromISR>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d001      	beq.n	800bf34 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bf30:	23ff      	movs	r3, #255	; 0xff
 800bf32:	e017      	b.n	800bf64 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d013      	beq.n	800bf62 <osSemaphoreRelease+0x5e>
 800bf3a:	4b0c      	ldr	r3, [pc, #48]	; (800bf6c <osSemaphoreRelease+0x68>)
 800bf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	e00a      	b.n	800bf62 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2100      	movs	r1, #0
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f001 fb13 	bl	800d57e <xQueueGenericSend>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d001      	beq.n	800bf62 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bf5e:	23ff      	movs	r3, #255	; 0xff
 800bf60:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bf62:	68fb      	ldr	r3, [r7, #12]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	e000ed04 	.word	0xe000ed04

0800bf70 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bf78:	f7ff fce0 	bl	800b93c <inHandlerMode>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bf82:	2382      	movs	r3, #130	; 0x82
 800bf84:	e003      	b.n	800bf8e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f002 f910 	bl	800e1ac <vQueueDelete>

  return osOK; 
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b086      	sub	sp, #24
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	3303      	adds	r3, #3
 800bfa4:	f023 0303 	bic.w	r3, r3, #3
 800bfa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800bfaa:	2014      	movs	r0, #20
 800bfac:	f000 ff6a 	bl	800ce84 <pvPortMalloc>
 800bfb0:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d046      	beq.n	800c046 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 ff57 	bl	800ce84 <pvPortMalloc>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d02b      	beq.n	800c03c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	fb02 f303 	mul.w	r3, r2, r3
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 ff48 	bl	800ce84 <pvPortMalloc>
 800bff4:	4602      	mov	r2, r0
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d011      	beq.n	800c026 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800c002:	2300      	movs	r3, #0
 800c004:	613b      	str	r3, [r7, #16]
 800c006:	e008      	b.n	800c01a <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	4413      	add	r3, r2
 800c010:	2200      	movs	r2, #0
 800c012:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	3301      	adds	r3, #1
 800c018:	613b      	str	r3, [r7, #16]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	429a      	cmp	r2, r3
 800c022:	d8f1      	bhi.n	800c008 <osPoolCreate+0x72>
 800c024:	e00f      	b.n	800c046 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 ffec 	bl	800d008 <vPortFree>
        vPortFree(thePool);
 800c030:	6978      	ldr	r0, [r7, #20]
 800c032:	f000 ffe9 	bl	800d008 <vPortFree>
        thePool = NULL;
 800c036:	2300      	movs	r3, #0
 800c038:	617b      	str	r3, [r7, #20]
 800c03a:	e004      	b.n	800c046 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800c03c:	6978      	ldr	r0, [r7, #20]
 800c03e:	f000 ffe3 	bl	800d008 <vPortFree>
      thePool = NULL;
 800c042:	2300      	movs	r3, #0
 800c044:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800c046:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3718      	adds	r7, #24
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08a      	sub	sp, #40	; 0x28
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800c05c:	2300      	movs	r3, #0
 800c05e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800c060:	f7ff fc6c 	bl	800b93c <inHandlerMode>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00e      	beq.n	800c088 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c06a:	f3ef 8211 	mrs	r2, BASEPRI
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	617a      	str	r2, [r7, #20]
 800c080:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c082:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800c084:	627b      	str	r3, [r7, #36]	; 0x24
 800c086:	e001      	b.n	800c08c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800c088:	f000 fde0 	bl	800cc4c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800c08c:	2300      	movs	r3, #0
 800c08e:	61fb      	str	r3, [r7, #28]
 800c090:	e029      	b.n	800c0e6 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	691a      	ldr	r2, [r3, #16]
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	4413      	add	r3, r2
 800c09a:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689a      	ldr	r2, [r3, #8]
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d801      	bhi.n	800c0aa <osPoolAlloc+0x5a>
      index = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d113      	bne.n	800c0e0 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	4413      	add	r3, r2
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	fb02 f303 	mul.w	r3, r2, r3
 800c0d4:	440b      	add	r3, r1
 800c0d6:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	69ba      	ldr	r2, [r7, #24]
 800c0dc:	611a      	str	r2, [r3, #16]
      break;
 800c0de:	e007      	b.n	800c0f0 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	61fb      	str	r3, [r7, #28]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	689a      	ldr	r2, [r3, #8]
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d8d0      	bhi.n	800c092 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800c0f0:	f7ff fc24 	bl	800b93c <inHandlerMode>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d005      	beq.n	800c106 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	e001      	b.n	800c10a <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800c106:	f000 fdcf 	bl	800cca8 <vPortExitCritical>
  }
  
  return p;
 800c10a:	6a3b      	ldr	r3, [r7, #32]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3728      	adds	r7, #40	; 0x28
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <osPoolCAlloc>:
* @param  pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolCAlloc (osPoolId pool_id)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  void *p = osPoolAlloc(pool_id);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7ff ff97 	bl	800c050 <osPoolAlloc>
 800c122:	60f8      	str	r0, [r7, #12]
  
  if (p != NULL)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d004      	beq.n	800c134 <osPoolCAlloc+0x20>
  {
    memset(p, 0, sizeof(pool_id->pool_sz));
 800c12a:	2204      	movs	r2, #4
 800c12c:	2100      	movs	r1, #0
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f008 fc25 	bl	801497e <memset>
  }
  
  return p;
 800c134:	68fb      	ldr	r3, [r7, #12]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <osPoolFree+0x14>
    return osErrorParameter;
 800c14e:	2380      	movs	r3, #128	; 0x80
 800c150:	e030      	b.n	800c1b4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <osPoolFree+0x1e>
    return osErrorParameter;
 800c158:	2380      	movs	r3, #128	; 0x80
 800c15a:	e02b      	b.n	800c1b4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d901      	bls.n	800c16a <osPoolFree+0x2c>
    return osErrorParameter;
 800c166:	2380      	movs	r3, #128	; 0x80
 800c168:	e024      	b.n	800c1b4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	6812      	ldr	r2, [r2, #0]
 800c170:	1a9b      	subs	r3, r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68da      	ldr	r2, [r3, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c17e:	fb02 f201 	mul.w	r2, r2, r1
 800c182:	1a9b      	subs	r3, r3, r2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <osPoolFree+0x4e>
    return osErrorParameter;
 800c188:	2380      	movs	r3, #128	; 0x80
 800c18a:	e013      	b.n	800c1b4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	fbb2 f3f3 	udiv	r3, r2, r3
 800c196:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d801      	bhi.n	800c1a6 <osPoolFree+0x68>
    return osErrorParameter;
 800c1a2:	2380      	movs	r3, #128	; 0x80
 800c1a4:	e006      	b.n	800c1b4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c1c0:	b590      	push	{r4, r7, lr}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d012      	beq.n	800c1f8 <osMessageCreate+0x38>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6818      	ldr	r0, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6859      	ldr	r1, [r3, #4]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	689a      	ldr	r2, [r3, #8]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68dc      	ldr	r4, [r3, #12]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	4623      	mov	r3, r4
 800c1f0:	f001 f8a6 	bl	800d340 <xQueueGenericCreateStatic>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	e008      	b.n	800c20a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6818      	ldr	r0, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	4619      	mov	r1, r3
 800c204:	f001 f90e 	bl	800d424 <xQueueGenericCreate>
 800c208:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd90      	pop	{r4, r7, pc}

0800c212 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b086      	sub	sp, #24
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c21e:	2300      	movs	r3, #0
 800c220:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <osMessagePut+0x1e>
    ticks = 1;
 800c22c:	2301      	movs	r3, #1
 800c22e:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c230:	f7ff fb84 	bl	800b93c <inHandlerMode>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d018      	beq.n	800c26c <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c23a:	f107 0210 	add.w	r2, r7, #16
 800c23e:	f107 0108 	add.w	r1, r7, #8
 800c242:	2300      	movs	r3, #0
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f001 fa95 	bl	800d774 <xQueueGenericSendFromISR>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d001      	beq.n	800c254 <osMessagePut+0x42>
      return osErrorOS;
 800c250:	23ff      	movs	r3, #255	; 0xff
 800c252:	e018      	b.n	800c286 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d014      	beq.n	800c284 <osMessagePut+0x72>
 800c25a:	4b0d      	ldr	r3, [pc, #52]	; (800c290 <osMessagePut+0x7e>)
 800c25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	e00b      	b.n	800c284 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c26c:	f107 0108 	add.w	r1, r7, #8
 800c270:	2300      	movs	r3, #0
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f001 f982 	bl	800d57e <xQueueGenericSend>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d001      	beq.n	800c284 <osMessagePut+0x72>
      return osErrorOS;
 800c280:	23ff      	movs	r3, #255	; 0xff
 800c282:	e000      	b.n	800c286 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	e000ed04 	.word	0xe000ed04

0800c294 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b08b      	sub	sp, #44	; 0x2c
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d10a      	bne.n	800c2c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c2ae:	2380      	movs	r3, #128	; 0x80
 800c2b0:	617b      	str	r3, [r7, #20]
    return event;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	461c      	mov	r4, r3
 800c2b6:	f107 0314 	add.w	r3, r7, #20
 800c2ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c2be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2c2:	e054      	b.n	800c36e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2d2:	d103      	bne.n	800c2dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c2d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c2da:	e009      	b.n	800c2f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d006      	beq.n	800c2f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <osMessageGet+0x5c>
      ticks = 1;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c2f0:	f7ff fb24 	bl	800b93c <inHandlerMode>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d01c      	beq.n	800c334 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c2fa:	f107 0220 	add.w	r2, r7, #32
 800c2fe:	f107 0314 	add.w	r3, r7, #20
 800c302:	3304      	adds	r3, #4
 800c304:	4619      	mov	r1, r3
 800c306:	68b8      	ldr	r0, [r7, #8]
 800c308:	f001 fe14 	bl	800df34 <xQueueReceiveFromISR>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d102      	bne.n	800c318 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c312:	2310      	movs	r3, #16
 800c314:	617b      	str	r3, [r7, #20]
 800c316:	e001      	b.n	800c31c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c318:	2300      	movs	r3, #0
 800c31a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d01d      	beq.n	800c35e <osMessageGet+0xca>
 800c322:	4b15      	ldr	r3, [pc, #84]	; (800c378 <osMessageGet+0xe4>)
 800c324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	e014      	b.n	800c35e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c334:	f107 0314 	add.w	r3, r7, #20
 800c338:	3304      	adds	r3, #4
 800c33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c33c:	4619      	mov	r1, r3
 800c33e:	68b8      	ldr	r0, [r7, #8]
 800c340:	f001 fb35 	bl	800d9ae <xQueueReceive>
 800c344:	4603      	mov	r3, r0
 800c346:	2b01      	cmp	r3, #1
 800c348:	d102      	bne.n	800c350 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c34a:	2310      	movs	r3, #16
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	e006      	b.n	800c35e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <osMessageGet+0xc6>
 800c356:	2300      	movs	r3, #0
 800c358:	e000      	b.n	800c35c <osMessageGet+0xc8>
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	461c      	mov	r4, r3
 800c362:	f107 0314 	add.w	r3, r7, #20
 800c366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c36a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	372c      	adds	r7, #44	; 0x2c
 800c372:	46bd      	mov	sp, r7
 800c374:	bd90      	pop	{r4, r7, pc}
 800c376:	bf00      	nop
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	613b      	str	r3, [r7, #16]
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689c      	ldr	r4, [r3, #8]
 800c39a:	200c      	movs	r0, #12
 800c39c:	f000 fd72 	bl	800ce84 <pvPortMalloc>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <osMailCreate+0x36>
    return NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e039      	b.n	800c426 <osMailCreate+0xaa>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	681c      	ldr	r4, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	2104      	movs	r1, #4
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f001 f82a 	bl	800d424 <xQueueGenericCreate>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d107      	bne.n	800c3f0 <osMailCreate+0x74>
    vPortFree(*(queue_def->cb));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 fe0e 	bl	800d008 <vPortFree>
    return NULL;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	e01a      	b.n	800c426 <osMailCreate+0xaa>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	681c      	ldr	r4, [r3, #0]
 800c3f6:	f107 030c 	add.w	r3, r7, #12
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff fdcb 	bl	800bf96 <osPoolCreate>
 800c400:	4603      	mov	r3, r0
 800c402:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d107      	bne.n	800c420 <osMailCreate+0xa4>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fdf6 	bl	800d008 <vPortFree>
    return NULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	e002      	b.n	800c426 <osMailCreate+0xaa>
  }
  
  return *(queue_def->cb);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800c426:	4618      	mov	r0, r3
 800c428:	371c      	adds	r7, #28
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd90      	pop	{r4, r7, pc}

0800c42e <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <osMailAlloc+0x14>
    return NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	e006      	b.n	800c450 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fe02 	bl	800c050 <osPoolAlloc>
 800c44c:	60f8      	str	r0, [r7, #12]
  
  return p;
 800c44e:	68fb      	ldr	r3, [r7, #12]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <osMailCAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff ffe2 	bl	800c42e <osMailAlloc>
 800c46a:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d010      	beq.n	800c494 <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800c472:	2300      	movs	r3, #0
 800c474:	60fb      	str	r3, [r7, #12]
 800c476:	e007      	b.n	800c488 <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4413      	add	r3, r2
 800c47e:	2200      	movs	r2, #0
 800c480:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3301      	adds	r3, #1
 800c486:	60fb      	str	r3, [r7, #12]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	429a      	cmp	r2, r3
 800c492:	d8f1      	bhi.n	800c478 <osMailCAlloc+0x20>
    }
  }
  
  return p;
 800c494:	68bb      	ldr	r3, [r7, #8]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <osMailPut+0x14>
    return osErrorParameter;
 800c4ae:	2380      	movs	r3, #128	; 0x80
 800c4b0:	e02c      	b.n	800c50c <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800c4b6:	f7ff fa41 	bl	800b93c <inHandlerMode>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d018      	beq.n	800c4f2 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6858      	ldr	r0, [r3, #4]
 800c4c4:	f107 020c 	add.w	r2, r7, #12
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f001 f952 	bl	800d774 <xQueueGenericSendFromISR>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d001      	beq.n	800c4da <osMailPut+0x3c>
      return osErrorOS;
 800c4d6:	23ff      	movs	r3, #255	; 0xff
 800c4d8:	e018      	b.n	800c50c <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d014      	beq.n	800c50a <osMailPut+0x6c>
 800c4e0:	4b0c      	ldr	r3, [pc, #48]	; (800c514 <osMailPut+0x76>)
 800c4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	e00b      	b.n	800c50a <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6858      	ldr	r0, [r3, #4]
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f001 f83f 	bl	800d57e <xQueueGenericSend>
 800c500:	4603      	mov	r3, r0
 800c502:	2b01      	cmp	r3, #1
 800c504:	d001      	beq.n	800c50a <osMailPut+0x6c>
      return osErrorOS;
 800c506:	23ff      	movs	r3, #255	; 0xff
 800c508:	e000      	b.n	800c50c <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800c518:	b590      	push	{r4, r7, lr}
 800c51a:	b08b      	sub	sp, #44	; 0x2c
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10a      	bne.n	800c544 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800c52e:	2380      	movs	r3, #128	; 0x80
 800c530:	617b      	str	r3, [r7, #20]
    return event;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	461c      	mov	r4, r3
 800c536:	f107 0314 	add.w	r3, r7, #20
 800c53a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c53e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c542:	e056      	b.n	800c5f2 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c544:	2300      	movs	r3, #0
 800c546:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c552:	d103      	bne.n	800c55c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800c554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c558:	627b      	str	r3, [r7, #36]	; 0x24
 800c55a:	e009      	b.n	800c570 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d006      	beq.n	800c570 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d101      	bne.n	800c570 <osMailGet+0x58>
      ticks = 1;
 800c56c:	2301      	movs	r3, #1
 800c56e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c570:	f7ff f9e4 	bl	800b93c <inHandlerMode>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d01d      	beq.n	800c5b6 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	6858      	ldr	r0, [r3, #4]
 800c57e:	f107 0220 	add.w	r2, r7, #32
 800c582:	f107 0314 	add.w	r3, r7, #20
 800c586:	3304      	adds	r3, #4
 800c588:	4619      	mov	r1, r3
 800c58a:	f001 fcd3 	bl	800df34 <xQueueReceiveFromISR>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b01      	cmp	r3, #1
 800c592:	d102      	bne.n	800c59a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800c594:	2320      	movs	r3, #32
 800c596:	617b      	str	r3, [r7, #20]
 800c598:	e001      	b.n	800c59e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d01e      	beq.n	800c5e2 <osMailGet+0xca>
 800c5a4:	4b15      	ldr	r3, [pc, #84]	; (800c5fc <osMailGet+0xe4>)
 800c5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	e015      	b.n	800c5e2 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	6858      	ldr	r0, [r3, #4]
 800c5ba:	f107 0314 	add.w	r3, r7, #20
 800c5be:	3304      	adds	r3, #4
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	f001 f9f3 	bl	800d9ae <xQueueReceive>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d102      	bne.n	800c5d4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800c5ce:	2320      	movs	r3, #32
 800c5d0:	617b      	str	r3, [r7, #20]
 800c5d2:	e006      	b.n	800c5e2 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <osMailGet+0xc6>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	e000      	b.n	800c5e0 <osMailGet+0xc8>
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	461c      	mov	r4, r3
 800c5e6:	f107 0314 	add.w	r3, r7, #20
 800c5ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	372c      	adds	r7, #44	; 0x2c
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd90      	pop	{r4, r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	e000ed04 	.word	0xe000ed04

0800c600 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <osMailFree+0x14>
    return osErrorParameter;
 800c610:	2380      	movs	r3, #128	; 0x80
 800c612:	e006      	b.n	800c622 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fd8f 	bl	800c13e <osPoolFree>
 800c620:	4603      	mov	r3, r0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c62e:	f003 fc09 	bl	800fe44 <xTaskGetSchedulerState>
 800c632:	4603      	mov	r3, r0
 800c634:	2b01      	cmp	r3, #1
 800c636:	d001      	beq.n	800c63c <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800c638:	f000 fb95 	bl	800cd66 <SysTick_Handler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c63c:	bf00      	nop
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f002 fb81 	bl	800ed50 <vTaskSuspend>
  
  return osOK;
 800c64e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800c660:	f7ff f96c 	bl	800b93c <inHandlerMode>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00e      	beq.n	800c688 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f002 fc98 	bl	800efa0 <xTaskResumeFromISR>
 800c670:	4603      	mov	r3, r0
 800c672:	2b01      	cmp	r3, #1
 800c674:	d10b      	bne.n	800c68e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800c676:	4b08      	ldr	r3, [pc, #32]	; (800c698 <osThreadResume+0x40>)
 800c678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	e002      	b.n	800c68e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f002 fc2d 	bl	800eee8 <vTaskResume>
  }
  return osOK;
 800c68e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 800c6a0:	f002 fd66 	bl	800f170 <vTaskSuspendAll>
  
  return osOK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 800c6ae:	f002 fd6d 	bl	800f18c <xTaskResumeAll>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d101      	bne.n	800c6bc <osThreadResumeAll+0x12>
    return osOK;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e000      	b.n	800c6be <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 800c6bc:	23ff      	movs	r3, #255	; 0xff
  
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800c6cc:	2381      	movs	r3, #129	; 0x81
#endif
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <osAbortDelay>:
* @brief   Abort the delay for a specific thread
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId   
* @retval  status code that indicates the execution status of the function.
*/
osStatus osAbortDelay(osThreadId thread_id)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b083      	sub	sp, #12
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  
  return osOK;
#else
  (void) thread_id;
  
  return osErrorResource;
 800c6e2:	2381      	movs	r3, #129	; 0x81
#endif
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f003 fd8e 	bl	801021a <vTaskList>
#endif
  return osOK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <osMessagePeek>:
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
*/
osEvent osMessagePeek (osMessageQId queue_id, uint32_t millisec)
{
 800c708:	b590      	push	{r4, r7, lr}
 800c70a:	b089      	sub	sp, #36	; 0x24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <osMessagePeek+0x2c>
    event.status = osErrorParameter;
 800c71e:	2380      	movs	r3, #128	; 0x80
 800c720:	613b      	str	r3, [r7, #16]
    return event;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	461c      	mov	r4, r3
 800c726:	f107 0310 	add.w	r3, r7, #16
 800c72a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c72e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c732:	e030      	b.n	800c796 <osMessagePeek+0x8e>
  }
  
  ticks = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c73e:	d103      	bne.n	800c748 <osMessagePeek+0x40>
    ticks = portMAX_DELAY;
 800c740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c744:	61fb      	str	r3, [r7, #28]
 800c746:	e009      	b.n	800c75c <osMessagePeek+0x54>
  }
  else if (millisec != 0) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d006      	beq.n	800c75c <osMessagePeek+0x54>
    ticks = millisec / portTICK_PERIOD_MS;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <osMessagePeek+0x54>
      ticks = 1;
 800c758:	2301      	movs	r3, #1
 800c75a:	61fb      	str	r3, [r7, #28]
    }
  }
  
  if (xQueuePeek(queue_id, &event.value.v, ticks) == pdTRUE) 
 800c75c:	f107 0310 	add.w	r3, r7, #16
 800c760:	3304      	adds	r3, #4
 800c762:	69fa      	ldr	r2, [r7, #28]
 800c764:	4619      	mov	r1, r3
 800c766:	68b8      	ldr	r0, [r7, #8]
 800c768:	f001 fb06 	bl	800dd78 <xQueuePeek>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d102      	bne.n	800c778 <osMessagePeek+0x70>
  {
    /* We have mail */
    event.status = osEventMessage;
 800c772:	2310      	movs	r3, #16
 800c774:	613b      	str	r3, [r7, #16]
 800c776:	e006      	b.n	800c786 <osMessagePeek+0x7e>
  }
  else 
  {
    event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <osMessagePeek+0x7a>
 800c77e:	2300      	movs	r3, #0
 800c780:	e000      	b.n	800c784 <osMessagePeek+0x7c>
 800c782:	2340      	movs	r3, #64	; 0x40
 800c784:	613b      	str	r3, [r7, #16]
  }
  
  return event;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	461c      	mov	r4, r3
 800c78a:	f107 0310 	add.w	r3, r7, #16
 800c78e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	3724      	adds	r7, #36	; 0x24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd90      	pop	{r4, r7, pc}

0800c79e <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b082      	sub	sp, #8
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c7a6:	f7ff f8c9 	bl	800b93c <inHandlerMode>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d004      	beq.n	800c7ba <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f001 fce0 	bl	800e176 <uxQueueMessagesWaitingFromISR>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	e003      	b.n	800c7c2 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f001 fc9c 	bl	800e0f8 <uxQueueMessagesWaiting>
 800c7c0:	4603      	mov	r3, r0
  }
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 fcad 	bl	800e132 <uxQueueSpacesAvailable>
 800c7d8:	4603      	mov	r3, r0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c7ea:	f7ff f8a7 	bl	800b93c <inHandlerMode>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <osMessageDelete+0x16>
    return osErrorISR;
 800c7f4:	2382      	movs	r3, #130	; 0x82
 800c7f6:	e003      	b.n	800c800 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f001 fcd7 	bl	800e1ac <vQueueDelete>

  return osOK; 
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <osRecursiveMutexCreate>:
* @brief  Create and Initialize a Recursive Mutex
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error..
*/
osMutexId osRecursiveMutexCreate (const osMutexDef_t *mutex_def)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  return xSemaphoreCreateRecursiveMutexStatic( mutex_def->controlblock );
#else 
  return xSemaphoreCreateRecursiveMutex();
#endif
#else
  return NULL;
 800c810:	2300      	movs	r3, #0
#endif	
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <osRecursiveMutexRelease>:
* @brief  Release a Recursive Mutex
* @param   mutex_id      mutex ID obtained by \ref osRecursiveMutexCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexRelease (osMutexId mutex_id)
{
 800c81e:	b480      	push	{r7}
 800c820:	b083      	sub	sp, #12
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  {
    result = osErrorOS;
  }
  return result;
#else
	return osErrorResource;
 800c826:	2381      	movs	r3, #129	; 0x81
#endif
}
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <osRecursiveMutexWait>:
* @param   mutex_id    mutex ID obtained by \ref osRecursiveMutexCreate.
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  {
    return osErrorOS;
  }
  return osOK;
#else
	return osErrorResource;
 800c83e:	2381      	movs	r3, #129	; 0x81
#endif
}
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f001 fc4f 	bl	800e0f8 <uxQueueMessagesWaiting>
 800c85a:	4603      	mov	r3, r0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f103 0208 	add.w	r2, r3, #8
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c87c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f103 0208 	add.w	r2, r3, #8
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f103 0208 	add.w	r2, r3, #8
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8b2:	bf00      	nop
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b085      	sub	sp, #20
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
}
 800c8fa:	bf00      	nop
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c906:	b480      	push	{r7}
 800c908:	b085      	sub	sp, #20
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c91c:	d103      	bne.n	800c926 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e00c      	b.n	800c940 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	3308      	adds	r3, #8
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	e002      	b.n	800c934 <vListInsert+0x2e>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d9f6      	bls.n	800c92e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	601a      	str	r2, [r3, #0]
}
 800c96c:	bf00      	nop
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	6892      	ldr	r2, [r2, #8]
 800c98e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	6852      	ldr	r2, [r2, #4]
 800c998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d103      	bne.n	800c9ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689a      	ldr	r2, [r3, #8]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	1e5a      	subs	r2, r3, #1
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr
 800c9cc:	0000      	movs	r0, r0
	...

0800c9d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3b04      	subs	r3, #4
 800c9e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3b04      	subs	r3, #4
 800c9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	f023 0201 	bic.w	r2, r3, #1
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3b04      	subs	r3, #4
 800c9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca00:	4a0c      	ldr	r2, [pc, #48]	; (800ca34 <pxPortInitialiseStack+0x64>)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3b14      	subs	r3, #20
 800ca0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3b04      	subs	r3, #4
 800ca16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f06f 0202 	mvn.w	r2, #2
 800ca1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3b20      	subs	r3, #32
 800ca24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca26:	68fb      	ldr	r3, [r7, #12]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	0800ca39 	.word	0x0800ca39

0800ca38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca42:	4b11      	ldr	r3, [pc, #68]	; (800ca88 <prvTaskExitError+0x50>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca4a:	d009      	beq.n	800ca60 <prvTaskExitError+0x28>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	e7fe      	b.n	800ca5e <prvTaskExitError+0x26>
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca72:	bf00      	nop
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0fc      	beq.n	800ca74 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca7a:	bf00      	nop
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	20000008 	.word	0x20000008

0800ca8c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca8c:	4b08      	ldr	r3, [pc, #32]	; (800cab0 <pxCurrentTCBConst2>)
 800ca8e:	6819      	ldr	r1, [r3, #0]
 800ca90:	6808      	ldr	r0, [r1, #0]
 800ca92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca96:	f380 8809 	msr	PSP, r0
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f04f 0000 	mov.w	r0, #0
 800caa2:	f380 8811 	msr	BASEPRI, r0
 800caa6:	4770      	bx	lr
 800caa8:	f3af 8000 	nop.w
 800caac:	f3af 8000 	nop.w

0800cab0 <pxCurrentTCBConst2>:
 800cab0:	20003c4c 	.word	0x20003c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cab4:	bf00      	nop

0800cab6 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cab6:	48f1      	ldr	r0, [pc, #964]	; (800ce7c <vPortValidateInterruptPriority+0x7c>)
 800cab8:	6800      	ldr	r0, [r0, #0]
 800caba:	6800      	ldr	r0, [r0, #0]
 800cabc:	f380 8808 	msr	MSP, r0
 800cac0:	f04f 0000 	mov.w	r0, #0
 800cac4:	f380 8814 	msr	CONTROL, r0
 800cac8:	b662      	cpsie	i
 800caca:	b661      	cpsie	f
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	df00      	svc	0
 800cad6:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cad8:	bf00      	nop

0800cada <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b086      	sub	sp, #24
 800cade:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cae0:	4b44      	ldr	r3, [pc, #272]	; (800cbf4 <xPortStartScheduler+0x11a>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a44      	ldr	r2, [pc, #272]	; (800cbf8 <xPortStartScheduler+0x11e>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d109      	bne.n	800cafe <xPortStartScheduler+0x24>
 800caea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	613b      	str	r3, [r7, #16]
 800cafc:	e7fe      	b.n	800cafc <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cafe:	4b3d      	ldr	r3, [pc, #244]	; (800cbf4 <xPortStartScheduler+0x11a>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a3e      	ldr	r2, [pc, #248]	; (800cbfc <xPortStartScheduler+0x122>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d109      	bne.n	800cb1c <xPortStartScheduler+0x42>
 800cb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	e7fe      	b.n	800cb1a <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb1c:	4b38      	ldr	r3, [pc, #224]	; (800cc00 <xPortStartScheduler+0x126>)
 800cb1e:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	22ff      	movs	r2, #255	; 0xff
 800cb2c:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb36:	78fb      	ldrb	r3, [r7, #3]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	4b30      	ldr	r3, [pc, #192]	; (800cc04 <xPortStartScheduler+0x12a>)
 800cb42:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb44:	4b30      	ldr	r3, [pc, #192]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cb46:	2207      	movs	r2, #7
 800cb48:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb4a:	e009      	b.n	800cb60 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800cb4c:	4b2e      	ldr	r3, [pc, #184]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	4a2d      	ldr	r2, [pc, #180]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cb54:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb56:	78fb      	ldrb	r3, [r7, #3]
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb60:	78fb      	ldrb	r3, [r7, #3]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb68:	2b80      	cmp	r3, #128	; 0x80
 800cb6a:	d0ef      	beq.n	800cb4c <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb6c:	4b26      	ldr	r3, [pc, #152]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f1c3 0307 	rsb	r3, r3, #7
 800cb74:	2b04      	cmp	r3, #4
 800cb76:	d009      	beq.n	800cb8c <xPortStartScheduler+0xb2>
 800cb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7c:	f383 8811 	msr	BASEPRI, r3
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	60bb      	str	r3, [r7, #8]
 800cb8a:	e7fe      	b.n	800cb8a <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb8c:	4b1e      	ldr	r3, [pc, #120]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	021b      	lsls	r3, r3, #8
 800cb92:	4a1d      	ldr	r2, [pc, #116]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cb94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb96:	4b1c      	ldr	r3, [pc, #112]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb9e:	4a1a      	ldr	r2, [pc, #104]	; (800cc08 <xPortStartScheduler+0x12e>)
 800cba0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbaa:	4a18      	ldr	r2, [pc, #96]	; (800cc0c <xPortStartScheduler+0x132>)
 800cbac:	4b17      	ldr	r3, [pc, #92]	; (800cc0c <xPortStartScheduler+0x132>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbb6:	4a15      	ldr	r2, [pc, #84]	; (800cc0c <xPortStartScheduler+0x132>)
 800cbb8:	4b14      	ldr	r3, [pc, #80]	; (800cc0c <xPortStartScheduler+0x132>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbc2:	f000 f8f1 	bl	800cda8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbc6:	4b12      	ldr	r3, [pc, #72]	; (800cc10 <xPortStartScheduler+0x136>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbcc:	f000 f910 	bl	800cdf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbd0:	4a10      	ldr	r2, [pc, #64]	; (800cc14 <xPortStartScheduler+0x13a>)
 800cbd2:	4b10      	ldr	r3, [pc, #64]	; (800cc14 <xPortStartScheduler+0x13a>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cbda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbdc:	f7ff ff6b 	bl	800cab6 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbe0:	f002 fd0e 	bl	800f600 <vTaskSwitchContext>
	prvTaskExitError();
 800cbe4:	f7ff ff28 	bl	800ca38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3718      	adds	r7, #24
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	e000ed00 	.word	0xe000ed00
 800cbf8:	410fc271 	.word	0x410fc271
 800cbfc:	410fc270 	.word	0x410fc270
 800cc00:	e000e400 	.word	0xe000e400
 800cc04:	2000002c 	.word	0x2000002c
 800cc08:	20000030 	.word	0x20000030
 800cc0c:	e000ed20 	.word	0xe000ed20
 800cc10:	20000008 	.word	0x20000008
 800cc14:	e000ef34 	.word	0xe000ef34

0800cc18 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 800cc1e:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <vPortEndScheduler+0x30>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc26:	d009      	beq.n	800cc3c <vPortEndScheduler+0x24>
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	607b      	str	r3, [r7, #4]
 800cc3a:	e7fe      	b.n	800cc3a <vPortEndScheduler+0x22>
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	20000008 	.word	0x20000008

0800cc4c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc64:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <vPortEnterCritical+0x54>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	4a0d      	ldr	r2, [pc, #52]	; (800cca0 <vPortEnterCritical+0x54>)
 800cc6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc6e:	4b0c      	ldr	r3, [pc, #48]	; (800cca0 <vPortEnterCritical+0x54>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d10e      	bne.n	800cc94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc76:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <vPortEnterCritical+0x58>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d009      	beq.n	800cc94 <vPortEnterCritical+0x48>
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	e7fe      	b.n	800cc92 <vPortEnterCritical+0x46>
	}
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	20000008 	.word	0x20000008
 800cca4:	e000ed04 	.word	0xe000ed04

0800cca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccae:	4b11      	ldr	r3, [pc, #68]	; (800ccf4 <vPortExitCritical+0x4c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d109      	bne.n	800ccca <vPortExitCritical+0x22>
 800ccb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	607b      	str	r3, [r7, #4]
 800ccc8:	e7fe      	b.n	800ccc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <vPortExitCritical+0x4c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <vPortExitCritical+0x4c>)
 800ccd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccd4:	4b07      	ldr	r3, [pc, #28]	; (800ccf4 <vPortExitCritical+0x4c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d104      	bne.n	800cce6 <vPortExitCritical+0x3e>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cce6:	bf00      	nop
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	20000008 	.word	0x20000008

0800ccf8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccf8:	f3ef 8009 	mrs	r0, PSP
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	4b17      	ldr	r3, [pc, #92]	; (800cd60 <pxCurrentTCBConst>)
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	f01e 0f10 	tst.w	lr, #16
 800cd08:	bf08      	it	eq
 800cd0a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd0e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd12:	6010      	str	r0, [r2, #0]
 800cd14:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd18:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd1c:	f380 8811 	msr	BASEPRI, r0
 800cd20:	f3bf 8f4f 	dsb	sy
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f002 fc6a 	bl	800f600 <vTaskSwitchContext>
 800cd2c:	f04f 0000 	mov.w	r0, #0
 800cd30:	f380 8811 	msr	BASEPRI, r0
 800cd34:	bc09      	pop	{r0, r3}
 800cd36:	6819      	ldr	r1, [r3, #0]
 800cd38:	6808      	ldr	r0, [r1, #0]
 800cd3a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3e:	f01e 0f10 	tst.w	lr, #16
 800cd42:	bf08      	it	eq
 800cd44:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd48:	f380 8809 	msr	PSP, r0
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	f3af 8000 	nop.w
 800cd58:	f3af 8000 	nop.w
 800cd5c:	f3af 8000 	nop.w

0800cd60 <pxCurrentTCBConst>:
 800cd60:	20003c4c 	.word	0x20003c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd64:	bf00      	nop

0800cd66 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b082      	sub	sp, #8
 800cd6a:	af00      	add	r7, sp, #0
	__asm volatile
 800cd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd7e:	f002 fb83 	bl	800f488 <xTaskIncrementTick>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d003      	beq.n	800cd90 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd88:	4b06      	ldr	r3, [pc, #24]	; (800cda4 <SysTick_Handler+0x3e>)
 800cd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd8e:	601a      	str	r2, [r3, #0]
 800cd90:	2300      	movs	r3, #0
 800cd92:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd9a:	bf00      	nop
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	e000ed04 	.word	0xe000ed04

0800cda8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdac:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <vPortSetupTimerInterrupt+0x34>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdb2:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <vPortSetupTimerInterrupt+0x38>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdb8:	4a0a      	ldr	r2, [pc, #40]	; (800cde4 <vPortSetupTimerInterrupt+0x3c>)
 800cdba:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <vPortSetupTimerInterrupt+0x40>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	490b      	ldr	r1, [pc, #44]	; (800cdec <vPortSetupTimerInterrupt+0x44>)
 800cdc0:	fba1 1303 	umull	r1, r3, r1, r3
 800cdc4:	099b      	lsrs	r3, r3, #6
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdca:	4b04      	ldr	r3, [pc, #16]	; (800cddc <vPortSetupTimerInterrupt+0x34>)
 800cdcc:	2207      	movs	r2, #7
 800cdce:	601a      	str	r2, [r3, #0]
}
 800cdd0:	bf00      	nop
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	e000e010 	.word	0xe000e010
 800cde0:	e000e018 	.word	0xe000e018
 800cde4:	e000e014 	.word	0xe000e014
 800cde8:	2000000c 	.word	0x2000000c
 800cdec:	10624dd3 	.word	0x10624dd3

0800cdf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdf0:	f8df 008c 	ldr.w	r0, [pc, #140]	; 800ce80 <vPortValidateInterruptPriority+0x80>
 800cdf4:	6801      	ldr	r1, [r0, #0]
 800cdf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdfa:	6001      	str	r1, [r0, #0]
 800cdfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdfe:	bf00      	nop

0800ce00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce06:	f3ef 8305 	mrs	r3, IPSR
 800ce0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b0f      	cmp	r3, #15
 800ce10:	d913      	bls.n	800ce3a <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce12:	4a16      	ldr	r2, [pc, #88]	; (800ce6c <vPortValidateInterruptPriority+0x6c>)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	4413      	add	r3, r2
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce1c:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <vPortValidateInterruptPriority+0x70>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	7afa      	ldrb	r2, [r7, #11]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d209      	bcs.n	800ce3a <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	607b      	str	r3, [r7, #4]
 800ce38:	e7fe      	b.n	800ce38 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <vPortValidateInterruptPriority+0x74>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce42:	4b0d      	ldr	r3, [pc, #52]	; (800ce78 <vPortValidateInterruptPriority+0x78>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d909      	bls.n	800ce5e <vPortValidateInterruptPriority+0x5e>
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	603b      	str	r3, [r7, #0]
 800ce5c:	e7fe      	b.n	800ce5c <vPortValidateInterruptPriority+0x5c>
	}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	e000e3f0 	.word	0xe000e3f0
 800ce70:	2000002c 	.word	0x2000002c
 800ce74:	e000ed0c 	.word	0xe000ed0c
 800ce78:	20000030 	.word	0x20000030
 800ce7c:	e000ed08 	.word	0xe000ed08
 800ce80:	e000ed88 	.word	0xe000ed88

0800ce84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08a      	sub	sp, #40	; 0x28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce90:	f002 f96e 	bl	800f170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce94:	4b57      	ldr	r3, [pc, #348]	; (800cff4 <pvPortMalloc+0x170>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce9c:	f000 f92b 	bl	800d0f6 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cea0:	4b55      	ldr	r3, [pc, #340]	; (800cff8 <pvPortMalloc+0x174>)
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4013      	ands	r3, r2
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 808c 	bne.w	800cfc6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01c      	beq.n	800ceee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ceb4:	2208      	movs	r2, #8
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4413      	add	r3, r2
 800ceba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f003 0307 	and.w	r3, r3, #7
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d013      	beq.n	800ceee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f023 0307 	bic.w	r3, r3, #7
 800cecc:	3308      	adds	r3, #8
 800cece:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f003 0307 	and.w	r3, r3, #7
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d009      	beq.n	800ceee <pvPortMalloc+0x6a>
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	e7fe      	b.n	800ceec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d068      	beq.n	800cfc6 <pvPortMalloc+0x142>
 800cef4:	4b41      	ldr	r3, [pc, #260]	; (800cffc <pvPortMalloc+0x178>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d863      	bhi.n	800cfc6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cefe:	4b40      	ldr	r3, [pc, #256]	; (800d000 <pvPortMalloc+0x17c>)
 800cf00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf02:	4b3f      	ldr	r3, [pc, #252]	; (800d000 <pvPortMalloc+0x17c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf08:	e004      	b.n	800cf14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d203      	bcs.n	800cf26 <pvPortMalloc+0xa2>
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f1      	bne.n	800cf0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf26:	4b33      	ldr	r3, [pc, #204]	; (800cff4 <pvPortMalloc+0x170>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d04a      	beq.n	800cfc6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2208      	movs	r2, #8
 800cf36:	4413      	add	r3, r2
 800cf38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	685a      	ldr	r2, [r3, #4]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	1ad2      	subs	r2, r2, r3
 800cf4a:	2308      	movs	r3, #8
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d91e      	bls.n	800cf90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4413      	add	r3, r2
 800cf58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	f003 0307 	and.w	r3, r3, #7
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d009      	beq.n	800cf78 <pvPortMalloc+0xf4>
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	613b      	str	r3, [r7, #16]
 800cf76:	e7fe      	b.n	800cf76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	1ad2      	subs	r2, r2, r3
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf8a:	69b8      	ldr	r0, [r7, #24]
 800cf8c:	f000 f916 	bl	800d1bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf90:	4b1a      	ldr	r3, [pc, #104]	; (800cffc <pvPortMalloc+0x178>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	4a18      	ldr	r2, [pc, #96]	; (800cffc <pvPortMalloc+0x178>)
 800cf9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf9e:	4b17      	ldr	r3, [pc, #92]	; (800cffc <pvPortMalloc+0x178>)
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	4b18      	ldr	r3, [pc, #96]	; (800d004 <pvPortMalloc+0x180>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d203      	bcs.n	800cfb2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfaa:	4b14      	ldr	r3, [pc, #80]	; (800cffc <pvPortMalloc+0x178>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a15      	ldr	r2, [pc, #84]	; (800d004 <pvPortMalloc+0x180>)
 800cfb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	685a      	ldr	r2, [r3, #4]
 800cfb6:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <pvPortMalloc+0x174>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	431a      	orrs	r2, r3
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfc6:	f002 f8e1 	bl	800f18c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	f003 0307 	and.w	r3, r3, #7
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d009      	beq.n	800cfe8 <pvPortMalloc+0x164>
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	e7fe      	b.n	800cfe6 <pvPortMalloc+0x162>
	return pvReturn;
 800cfe8:	69fb      	ldr	r3, [r7, #28]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3728      	adds	r7, #40	; 0x28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	20003c3c 	.word	0x20003c3c
 800cff8:	20003c48 	.word	0x20003c48
 800cffc:	20003c40 	.word	0x20003c40
 800d000:	20003c34 	.word	0x20003c34
 800d004:	20003c44 	.word	0x20003c44

0800d008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d046      	beq.n	800d0a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d01a:	2308      	movs	r3, #8
 800d01c:	425b      	negs	r3, r3
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	4413      	add	r3, r2
 800d022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	4b20      	ldr	r3, [pc, #128]	; (800d0b0 <vPortFree+0xa8>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4013      	ands	r3, r2
 800d032:	2b00      	cmp	r3, #0
 800d034:	d109      	bne.n	800d04a <vPortFree+0x42>
 800d036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	e7fe      	b.n	800d048 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <vPortFree+0x5e>
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	60bb      	str	r3, [r7, #8]
 800d064:	e7fe      	b.n	800d064 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	685a      	ldr	r2, [r3, #4]
 800d06a:	4b11      	ldr	r3, [pc, #68]	; (800d0b0 <vPortFree+0xa8>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4013      	ands	r3, r2
 800d070:	2b00      	cmp	r3, #0
 800d072:	d019      	beq.n	800d0a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d115      	bne.n	800d0a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <vPortFree+0xa8>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	43db      	mvns	r3, r3
 800d086:	401a      	ands	r2, r3
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d08c:	f002 f870 	bl	800f170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	685a      	ldr	r2, [r3, #4]
 800d094:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <vPortFree+0xac>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4413      	add	r3, r2
 800d09a:	4a06      	ldr	r2, [pc, #24]	; (800d0b4 <vPortFree+0xac>)
 800d09c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d09e:	6938      	ldr	r0, [r7, #16]
 800d0a0:	f000 f88c 	bl	800d1bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d0a4:	f002 f872 	bl	800f18c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0a8:	bf00      	nop
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	20003c48 	.word	0x20003c48
 800d0b4:	20003c40 	.word	0x20003c40

0800d0b8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800d0bc:	4b03      	ldr	r3, [pc, #12]	; (800d0cc <xPortGetFreeHeapSize+0x14>)
 800d0be:	681b      	ldr	r3, [r3, #0]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	20003c40 	.word	0x20003c40

0800d0d0 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800d0d4:	4b03      	ldr	r3, [pc, #12]	; (800d0e4 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20003c44 	.word	0x20003c44

0800d0e8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 800d0ec:	bf00      	nop
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b085      	sub	sp, #20
 800d0fa:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d100:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d102:	4b28      	ldr	r3, [pc, #160]	; (800d1a4 <prvHeapInit+0xae>)
 800d104:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f003 0307 	and.w	r3, r3, #7
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00c      	beq.n	800d12a <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3307      	adds	r3, #7
 800d114:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f023 0307 	bic.w	r3, r3, #7
 800d11c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	4a1f      	ldr	r2, [pc, #124]	; (800d1a4 <prvHeapInit+0xae>)
 800d126:	4413      	add	r3, r2
 800d128:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d12e:	4a1e      	ldr	r2, [pc, #120]	; (800d1a8 <prvHeapInit+0xb2>)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d134:	4b1c      	ldr	r3, [pc, #112]	; (800d1a8 <prvHeapInit+0xb2>)
 800d136:	2200      	movs	r2, #0
 800d138:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	4413      	add	r3, r2
 800d140:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d142:	2208      	movs	r2, #8
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	1a9b      	subs	r3, r3, r2
 800d148:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f023 0307 	bic.w	r3, r3, #7
 800d150:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	4a15      	ldr	r2, [pc, #84]	; (800d1ac <prvHeapInit+0xb6>)
 800d156:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d158:	4b14      	ldr	r3, [pc, #80]	; (800d1ac <prvHeapInit+0xb6>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2200      	movs	r2, #0
 800d15e:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d160:	4b12      	ldr	r3, [pc, #72]	; (800d1ac <prvHeapInit+0xb6>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	1ad2      	subs	r2, r2, r3
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d176:	4b0d      	ldr	r3, [pc, #52]	; (800d1ac <prvHeapInit+0xb6>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	4a0b      	ldr	r2, [pc, #44]	; (800d1b0 <prvHeapInit+0xba>)
 800d184:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	4a0a      	ldr	r2, [pc, #40]	; (800d1b4 <prvHeapInit+0xbe>)
 800d18c:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d18e:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <prvHeapInit+0xc2>)
 800d190:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d194:	601a      	str	r2, [r3, #0]
}
 800d196:	bf00      	nop
 800d198:	3714      	adds	r7, #20
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	20000034 	.word	0x20000034
 800d1a8:	20003c34 	.word	0x20003c34
 800d1ac:	20003c3c 	.word	0x20003c3c
 800d1b0:	20003c44 	.word	0x20003c44
 800d1b4:	20003c40 	.word	0x20003c40
 800d1b8:	20003c48 	.word	0x20003c48

0800d1bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1c4:	4b28      	ldr	r3, [pc, #160]	; (800d268 <prvInsertBlockIntoFreeList+0xac>)
 800d1c6:	60fb      	str	r3, [r7, #12]
 800d1c8:	e002      	b.n	800d1d0 <prvInsertBlockIntoFreeList+0x14>
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	60fb      	str	r3, [r7, #12]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d3f7      	bcc.n	800d1ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	441a      	add	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d108      	bne.n	800d1fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	441a      	add	r2, r3
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	441a      	add	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d118      	bne.n	800d244 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	4b15      	ldr	r3, [pc, #84]	; (800d26c <prvInsertBlockIntoFreeList+0xb0>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d00d      	beq.n	800d23a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	441a      	add	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	e008      	b.n	800d24c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d23a:	4b0c      	ldr	r3, [pc, #48]	; (800d26c <prvInsertBlockIntoFreeList+0xb0>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	e003      	b.n	800d24c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d002      	beq.n	800d25a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d25a:	bf00      	nop
 800d25c:	3714      	adds	r7, #20
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	20003c34 	.word	0x20003c34
 800d26c:	20003c3c 	.word	0x20003c3c

0800d270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d109      	bne.n	800d298 <xQueueGenericReset+0x28>
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	60bb      	str	r3, [r7, #8]
 800d296:	e7fe      	b.n	800d296 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d298:	f7ff fcd8 	bl	800cc4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a4:	68f9      	ldr	r1, [r7, #12]
 800d2a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2a8:	fb01 f303 	mul.w	r3, r1, r3
 800d2ac:	441a      	add	r2, r3
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	68f9      	ldr	r1, [r7, #12]
 800d2cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2ce:	fb01 f303 	mul.w	r3, r1, r3
 800d2d2:	441a      	add	r2, r3
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	22ff      	movs	r2, #255	; 0xff
 800d2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	22ff      	movs	r2, #255	; 0xff
 800d2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d114      	bne.n	800d318 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	691b      	ldr	r3, [r3, #16]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d01a      	beq.n	800d32c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3310      	adds	r3, #16
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f002 fa54 	bl	800f7a8 <xTaskRemoveFromEventList>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d012      	beq.n	800d32c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d306:	4b0d      	ldr	r3, [pc, #52]	; (800d33c <xQueueGenericReset+0xcc>)
 800d308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	e009      	b.n	800d32c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	3310      	adds	r3, #16
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff faa1 	bl	800c864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3324      	adds	r3, #36	; 0x24
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fa9c 	bl	800c864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d32c:	f7ff fcbc 	bl	800cca8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d330:	2301      	movs	r3, #1
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	e000ed04 	.word	0xe000ed04

0800d340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08e      	sub	sp, #56	; 0x38
 800d344:	af02      	add	r7, sp, #8
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d109      	bne.n	800d368 <xQueueGenericCreateStatic+0x28>
 800d354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	62bb      	str	r3, [r7, #40]	; 0x28
 800d366:	e7fe      	b.n	800d366 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d109      	bne.n	800d382 <xQueueGenericCreateStatic+0x42>
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	627b      	str	r3, [r7, #36]	; 0x24
 800d380:	e7fe      	b.n	800d380 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d002      	beq.n	800d38e <xQueueGenericCreateStatic+0x4e>
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <xQueueGenericCreateStatic+0x52>
 800d38e:	2301      	movs	r3, #1
 800d390:	e000      	b.n	800d394 <xQueueGenericCreateStatic+0x54>
 800d392:	2300      	movs	r3, #0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d109      	bne.n	800d3ac <xQueueGenericCreateStatic+0x6c>
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	623b      	str	r3, [r7, #32]
 800d3aa:	e7fe      	b.n	800d3aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d102      	bne.n	800d3b8 <xQueueGenericCreateStatic+0x78>
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <xQueueGenericCreateStatic+0x7c>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e000      	b.n	800d3be <xQueueGenericCreateStatic+0x7e>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d109      	bne.n	800d3d6 <xQueueGenericCreateStatic+0x96>
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	61fb      	str	r3, [r7, #28]
 800d3d4:	e7fe      	b.n	800d3d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d3d6:	2350      	movs	r3, #80	; 0x50
 800d3d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b50      	cmp	r3, #80	; 0x50
 800d3de:	d009      	beq.n	800d3f4 <xQueueGenericCreateStatic+0xb4>
 800d3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	61bb      	str	r3, [r7, #24]
 800d3f2:	e7fe      	b.n	800d3f2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00d      	beq.n	800d41a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d406:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	4613      	mov	r3, r2
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f000 f842 	bl	800d49e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3730      	adds	r7, #48	; 0x30
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08a      	sub	sp, #40	; 0x28
 800d428:	af02      	add	r7, sp, #8
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	4613      	mov	r3, r2
 800d430:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d109      	bne.n	800d44c <xQueueGenericCreate+0x28>
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	613b      	str	r3, [r7, #16]
 800d44a:	e7fe      	b.n	800d44a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d102      	bne.n	800d458 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d452:	2300      	movs	r3, #0
 800d454:	61fb      	str	r3, [r7, #28]
 800d456:	e004      	b.n	800d462 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	fb02 f303 	mul.w	r3, r2, r3
 800d460:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	3350      	adds	r3, #80	; 0x50
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff fd0c 	bl	800ce84 <pvPortMalloc>
 800d46c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00f      	beq.n	800d494 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	3350      	adds	r3, #80	; 0x50
 800d478:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d482:	79fa      	ldrb	r2, [r7, #7]
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	4613      	mov	r3, r2
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	68b9      	ldr	r1, [r7, #8]
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f000 f805 	bl	800d49e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d494:	69bb      	ldr	r3, [r7, #24]
	}
 800d496:	4618      	mov	r0, r3
 800d498:	3720      	adds	r7, #32
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	60f8      	str	r0, [r7, #12]
 800d4a6:	60b9      	str	r1, [r7, #8]
 800d4a8:	607a      	str	r2, [r7, #4]
 800d4aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d103      	bne.n	800d4ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	69ba      	ldr	r2, [r7, #24]
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	e002      	b.n	800d4c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	68fa      	ldr	r2, [r7, #12]
 800d4c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	69b8      	ldr	r0, [r7, #24]
 800d4d0:	f7ff fece 	bl	800d270 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	78fa      	ldrb	r2, [r7, #3]
 800d4d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d4dc:	bf00      	nop
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00e      	beq.n	800d510 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d504:	2300      	movs	r3, #0
 800d506:	2200      	movs	r2, #0
 800d508:	2100      	movs	r1, #0
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f837 	bl	800d57e <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d522:	2301      	movs	r3, #1
 800d524:	617b      	str	r3, [r7, #20]
 800d526:	2300      	movs	r3, #0
 800d528:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	461a      	mov	r2, r3
 800d52e:	6939      	ldr	r1, [r7, #16]
 800d530:	6978      	ldr	r0, [r7, #20]
 800d532:	f7ff ff77 	bl	800d424 <xQueueGenericCreate>
 800d536:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f7ff ffd3 	bl	800d4e4 <prvInitialiseMutex>

		return pxNewQueue;
 800d53e:	68fb      	ldr	r3, [r7, #12]
	}
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af02      	add	r7, sp, #8
 800d54e:	4603      	mov	r3, r0
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d554:	2301      	movs	r3, #1
 800d556:	617b      	str	r3, [r7, #20]
 800d558:	2300      	movs	r3, #0
 800d55a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	2200      	movs	r2, #0
 800d564:	6939      	ldr	r1, [r7, #16]
 800d566:	6978      	ldr	r0, [r7, #20]
 800d568:	f7ff feea 	bl	800d340 <xQueueGenericCreateStatic>
 800d56c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f7ff ffb8 	bl	800d4e4 <prvInitialiseMutex>

		return pxNewQueue;
 800d574:	68fb      	ldr	r3, [r7, #12]
	}
 800d576:	4618      	mov	r0, r3
 800d578:	3718      	adds	r7, #24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b08e      	sub	sp, #56	; 0x38
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	607a      	str	r2, [r7, #4]
 800d58a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d58c:	2300      	movs	r3, #0
 800d58e:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	2b00      	cmp	r3, #0
 800d598:	d109      	bne.n	800d5ae <xQueueGenericSend+0x30>
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5ac:	e7fe      	b.n	800d5ac <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d103      	bne.n	800d5bc <xQueueGenericSend+0x3e>
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <xQueueGenericSend+0x42>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e000      	b.n	800d5c2 <xQueueGenericSend+0x44>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d109      	bne.n	800d5da <xQueueGenericSend+0x5c>
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5d8:	e7fe      	b.n	800d5d8 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d103      	bne.n	800d5e8 <xQueueGenericSend+0x6a>
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d101      	bne.n	800d5ec <xQueueGenericSend+0x6e>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e000      	b.n	800d5ee <xQueueGenericSend+0x70>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d109      	bne.n	800d606 <xQueueGenericSend+0x88>
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	623b      	str	r3, [r7, #32]
 800d604:	e7fe      	b.n	800d604 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d606:	f002 fc1d 	bl	800fe44 <xTaskGetSchedulerState>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d102      	bne.n	800d616 <xQueueGenericSend+0x98>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <xQueueGenericSend+0x9c>
 800d616:	2301      	movs	r3, #1
 800d618:	e000      	b.n	800d61c <xQueueGenericSend+0x9e>
 800d61a:	2300      	movs	r3, #0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d109      	bne.n	800d634 <xQueueGenericSend+0xb6>
 800d620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	61fb      	str	r3, [r7, #28]
 800d632:	e7fe      	b.n	800d632 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d634:	f7ff fb0a 	bl	800cc4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d640:	429a      	cmp	r2, r3
 800d642:	d302      	bcc.n	800d64a <xQueueGenericSend+0xcc>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	2b02      	cmp	r3, #2
 800d648:	d129      	bne.n	800d69e <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	68b9      	ldr	r1, [r7, #8]
 800d64e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d650:	f000 fe0d 	bl	800e26e <prvCopyDataToQueue>
 800d654:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d010      	beq.n	800d680 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	3324      	adds	r3, #36	; 0x24
 800d662:	4618      	mov	r0, r3
 800d664:	f002 f8a0 	bl	800f7a8 <xTaskRemoveFromEventList>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d013      	beq.n	800d696 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d66e:	4b40      	ldr	r3, [pc, #256]	; (800d770 <xQueueGenericSend+0x1f2>)
 800d670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d674:	601a      	str	r2, [r3, #0]
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	e00a      	b.n	800d696 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d682:	2b00      	cmp	r3, #0
 800d684:	d007      	beq.n	800d696 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d686:	4b3a      	ldr	r3, [pc, #232]	; (800d770 <xQueueGenericSend+0x1f2>)
 800d688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d696:	f7ff fb07 	bl	800cca8 <vPortExitCritical>
				return pdPASS;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e063      	b.n	800d766 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d103      	bne.n	800d6ac <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6a4:	f7ff fb00 	bl	800cca8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e05c      	b.n	800d766 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d106      	bne.n	800d6c0 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6b2:	f107 0314 	add.w	r3, r7, #20
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f002 f95e 	bl	800f978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6c0:	f7ff faf2 	bl	800cca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6c4:	f001 fd54 	bl	800f170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6c8:	f7ff fac0 	bl	800cc4c <vPortEnterCritical>
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6d8:	d103      	bne.n	800d6e2 <xQueueGenericSend+0x164>
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6e8:	b25b      	sxtb	r3, r3
 800d6ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6ee:	d103      	bne.n	800d6f8 <xQueueGenericSend+0x17a>
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f8:	f7ff fad6 	bl	800cca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6fc:	1d3a      	adds	r2, r7, #4
 800d6fe:	f107 0314 	add.w	r3, r7, #20
 800d702:	4611      	mov	r1, r2
 800d704:	4618      	mov	r0, r3
 800d706:	f002 f94d 	bl	800f9a4 <xTaskCheckForTimeOut>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d124      	bne.n	800d75a <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d712:	f000 fec5 	bl	800e4a0 <prvIsQueueFull>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d018      	beq.n	800d74e <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71e:	3310      	adds	r3, #16
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	4611      	mov	r1, r2
 800d724:	4618      	mov	r0, r3
 800d726:	f001 ffe1 	bl	800f6ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d72c:	f000 fe2f 	bl	800e38e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d730:	f001 fd2c 	bl	800f18c <xTaskResumeAll>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	f47f af7c 	bne.w	800d634 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d73c:	4b0c      	ldr	r3, [pc, #48]	; (800d770 <xQueueGenericSend+0x1f2>)
 800d73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	e772      	b.n	800d634 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d74e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d750:	f000 fe1d 	bl	800e38e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d754:	f001 fd1a 	bl	800f18c <xTaskResumeAll>
 800d758:	e76c      	b.n	800d634 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d75a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d75c:	f000 fe17 	bl	800e38e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d760:	f001 fd14 	bl	800f18c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d764:	2300      	movs	r3, #0
		}
	}
}
 800d766:	4618      	mov	r0, r3
 800d768:	3738      	adds	r7, #56	; 0x38
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	e000ed04 	.word	0xe000ed04

0800d774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b08e      	sub	sp, #56	; 0x38
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
 800d780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d109      	bne.n	800d7a0 <xQueueGenericSendFromISR+0x2c>
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
 800d79e:	e7fe      	b.n	800d79e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d103      	bne.n	800d7ae <xQueueGenericSendFromISR+0x3a>
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <xQueueGenericSendFromISR+0x3e>
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e000      	b.n	800d7b4 <xQueueGenericSendFromISR+0x40>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d109      	bne.n	800d7cc <xQueueGenericSendFromISR+0x58>
 800d7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7bc:	f383 8811 	msr	BASEPRI, r3
 800d7c0:	f3bf 8f6f 	isb	sy
 800d7c4:	f3bf 8f4f 	dsb	sy
 800d7c8:	623b      	str	r3, [r7, #32]
 800d7ca:	e7fe      	b.n	800d7ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d103      	bne.n	800d7da <xQueueGenericSendFromISR+0x66>
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d101      	bne.n	800d7de <xQueueGenericSendFromISR+0x6a>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e000      	b.n	800d7e0 <xQueueGenericSendFromISR+0x6c>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d109      	bne.n	800d7f8 <xQueueGenericSendFromISR+0x84>
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	61fb      	str	r3, [r7, #28]
 800d7f6:	e7fe      	b.n	800d7f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7f8:	f7ff fb02 	bl	800ce00 <vPortValidateInterruptPriority>
	__asm volatile
 800d7fc:	f3ef 8211 	mrs	r2, BASEPRI
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	61ba      	str	r2, [r7, #24]
 800d812:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d814:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d816:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d820:	429a      	cmp	r2, r3
 800d822:	d302      	bcc.n	800d82a <xQueueGenericSendFromISR+0xb6>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b02      	cmp	r3, #2
 800d828:	d12c      	bne.n	800d884 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d834:	683a      	ldr	r2, [r7, #0]
 800d836:	68b9      	ldr	r1, [r7, #8]
 800d838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d83a:	f000 fd18 	bl	800e26e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d83e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d846:	d112      	bne.n	800d86e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d016      	beq.n	800d87e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	3324      	adds	r3, #36	; 0x24
 800d854:	4618      	mov	r0, r3
 800d856:	f001 ffa7 	bl	800f7a8 <xTaskRemoveFromEventList>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00e      	beq.n	800d87e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00b      	beq.n	800d87e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	e007      	b.n	800d87e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d86e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d872:	3301      	adds	r3, #1
 800d874:	b2db      	uxtb	r3, r3
 800d876:	b25a      	sxtb	r2, r3
 800d878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d87e:	2301      	movs	r3, #1
 800d880:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d882:	e001      	b.n	800d888 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d884:	2300      	movs	r3, #0
 800d886:	637b      	str	r3, [r7, #52]	; 0x34
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d894:	4618      	mov	r0, r3
 800d896:	3738      	adds	r7, #56	; 0x38
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b08e      	sub	sp, #56	; 0x38
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d109      	bne.n	800d8c4 <xQueueGiveFromISR+0x28>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	623b      	str	r3, [r7, #32]
 800d8c2:	e7fe      	b.n	800d8c2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d009      	beq.n	800d8e0 <xQueueGiveFromISR+0x44>
 800d8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	61fb      	str	r3, [r7, #28]
 800d8de:	e7fe      	b.n	800d8de <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d103      	bne.n	800d8f0 <xQueueGiveFromISR+0x54>
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <xQueueGiveFromISR+0x58>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e000      	b.n	800d8f6 <xQueueGiveFromISR+0x5a>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d109      	bne.n	800d90e <xQueueGiveFromISR+0x72>
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	61bb      	str	r3, [r7, #24]
 800d90c:	e7fe      	b.n	800d90c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d90e:	f7ff fa77 	bl	800ce00 <vPortValidateInterruptPriority>
	__asm volatile
 800d912:	f3ef 8211 	mrs	r2, BASEPRI
 800d916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91a:	f383 8811 	msr	BASEPRI, r3
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	f3bf 8f4f 	dsb	sy
 800d926:	617a      	str	r2, [r7, #20]
 800d928:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d92a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d92c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d92b      	bls.n	800d996 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d958:	d112      	bne.n	800d980 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d016      	beq.n	800d990 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	3324      	adds	r3, #36	; 0x24
 800d966:	4618      	mov	r0, r3
 800d968:	f001 ff1e 	bl	800f7a8 <xTaskRemoveFromEventList>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00e      	beq.n	800d990 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	2201      	movs	r2, #1
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	e007      	b.n	800d990 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d984:	3301      	adds	r3, #1
 800d986:	b2db      	uxtb	r3, r3
 800d988:	b25a      	sxtb	r2, r3
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d990:	2301      	movs	r3, #1
 800d992:	637b      	str	r3, [r7, #52]	; 0x34
 800d994:	e001      	b.n	800d99a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d996:	2300      	movs	r3, #0
 800d998:	637b      	str	r3, [r7, #52]	; 0x34
 800d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3738      	adds	r7, #56	; 0x38
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b08c      	sub	sp, #48	; 0x30
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	60b9      	str	r1, [r7, #8]
 800d9b8:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d109      	bne.n	800d9dc <xQueueReceive+0x2e>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	623b      	str	r3, [r7, #32]
 800d9da:	e7fe      	b.n	800d9da <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d103      	bne.n	800d9ea <xQueueReceive+0x3c>
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <xQueueReceive+0x40>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e000      	b.n	800d9f0 <xQueueReceive+0x42>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d109      	bne.n	800da08 <xQueueReceive+0x5a>
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	e7fe      	b.n	800da06 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da08:	f002 fa1c 	bl	800fe44 <xTaskGetSchedulerState>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d102      	bne.n	800da18 <xQueueReceive+0x6a>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d101      	bne.n	800da1c <xQueueReceive+0x6e>
 800da18:	2301      	movs	r3, #1
 800da1a:	e000      	b.n	800da1e <xQueueReceive+0x70>
 800da1c:	2300      	movs	r3, #0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d109      	bne.n	800da36 <xQueueReceive+0x88>
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	61bb      	str	r3, [r7, #24]
 800da34:	e7fe      	b.n	800da34 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800da36:	f7ff f909 	bl	800cc4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	2b00      	cmp	r3, #0
 800da44:	d01f      	beq.n	800da86 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da46:	68b9      	ldr	r1, [r7, #8]
 800da48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da4a:	f000 fc7a 	bl	800e342 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da50:	1e5a      	subs	r2, r3, #1
 800da52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00f      	beq.n	800da7e <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da60:	3310      	adds	r3, #16
 800da62:	4618      	mov	r0, r3
 800da64:	f001 fea0 	bl	800f7a8 <xTaskRemoveFromEventList>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d007      	beq.n	800da7e <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da6e:	4b3d      	ldr	r3, [pc, #244]	; (800db64 <xQueueReceive+0x1b6>)
 800da70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da74:	601a      	str	r2, [r3, #0]
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da7e:	f7ff f913 	bl	800cca8 <vPortExitCritical>
				return pdPASS;
 800da82:	2301      	movs	r3, #1
 800da84:	e069      	b.n	800db5a <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d103      	bne.n	800da94 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da8c:	f7ff f90c 	bl	800cca8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da90:	2300      	movs	r3, #0
 800da92:	e062      	b.n	800db5a <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da9a:	f107 0310 	add.w	r3, r7, #16
 800da9e:	4618      	mov	r0, r3
 800daa0:	f001 ff6a 	bl	800f978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800daa4:	2301      	movs	r3, #1
 800daa6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800daa8:	f7ff f8fe 	bl	800cca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800daac:	f001 fb60 	bl	800f170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dab0:	f7ff f8cc 	bl	800cc4c <vPortEnterCritical>
 800dab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daba:	b25b      	sxtb	r3, r3
 800dabc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dac0:	d103      	bne.n	800daca <xQueueReceive+0x11c>
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800daca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dacc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dad0:	b25b      	sxtb	r3, r3
 800dad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dad6:	d103      	bne.n	800dae0 <xQueueReceive+0x132>
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dae0:	f7ff f8e2 	bl	800cca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dae4:	1d3a      	adds	r2, r7, #4
 800dae6:	f107 0310 	add.w	r3, r7, #16
 800daea:	4611      	mov	r1, r2
 800daec:	4618      	mov	r0, r3
 800daee:	f001 ff59 	bl	800f9a4 <xTaskCheckForTimeOut>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d123      	bne.n	800db40 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dafa:	f000 fc9a 	bl	800e432 <prvIsQueueEmpty>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d017      	beq.n	800db34 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	3324      	adds	r3, #36	; 0x24
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	4611      	mov	r1, r2
 800db0c:	4618      	mov	r0, r3
 800db0e:	f001 fded 	bl	800f6ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db14:	f000 fc3b 	bl	800e38e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db18:	f001 fb38 	bl	800f18c <xTaskResumeAll>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d189      	bne.n	800da36 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800db22:	4b10      	ldr	r3, [pc, #64]	; (800db64 <xQueueReceive+0x1b6>)
 800db24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	f3bf 8f6f 	isb	sy
 800db32:	e780      	b.n	800da36 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db36:	f000 fc2a 	bl	800e38e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db3a:	f001 fb27 	bl	800f18c <xTaskResumeAll>
 800db3e:	e77a      	b.n	800da36 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db42:	f000 fc24 	bl	800e38e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db46:	f001 fb21 	bl	800f18c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db4c:	f000 fc71 	bl	800e432 <prvIsQueueEmpty>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	f43f af6f 	beq.w	800da36 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3730      	adds	r7, #48	; 0x30
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	e000ed04 	.word	0xe000ed04

0800db68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08e      	sub	sp, #56	; 0x38
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800db72:	2300      	movs	r3, #0
 800db74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800db7a:	2300      	movs	r3, #0
 800db7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d109      	bne.n	800db98 <xQueueSemaphoreTake+0x30>
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	623b      	str	r3, [r7, #32]
 800db96:	e7fe      	b.n	800db96 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d009      	beq.n	800dbb4 <xQueueSemaphoreTake+0x4c>
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	e7fe      	b.n	800dbb2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbb4:	f002 f946 	bl	800fe44 <xTaskGetSchedulerState>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <xQueueSemaphoreTake+0x5c>
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d101      	bne.n	800dbc8 <xQueueSemaphoreTake+0x60>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e000      	b.n	800dbca <xQueueSemaphoreTake+0x62>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d109      	bne.n	800dbe2 <xQueueSemaphoreTake+0x7a>
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	61bb      	str	r3, [r7, #24]
 800dbe0:	e7fe      	b.n	800dbe0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbe2:	f7ff f833 	bl	800cc4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d024      	beq.n	800dc3c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	1e5a      	subs	r2, r3, #1
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d104      	bne.n	800dc0c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800dc02:	f002 fc91 	bl	8010528 <pvTaskIncrementMutexHeldCount>
 800dc06:	4602      	mov	r2, r0
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	691b      	ldr	r3, [r3, #16]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00f      	beq.n	800dc34 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	3310      	adds	r3, #16
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f001 fdc5 	bl	800f7a8 <xTaskRemoveFromEventList>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d007      	beq.n	800dc34 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc24:	4b53      	ldr	r3, [pc, #332]	; (800dd74 <xQueueSemaphoreTake+0x20c>)
 800dc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc34:	f7ff f838 	bl	800cca8 <vPortExitCritical>
				return pdPASS;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e096      	b.n	800dd6a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d110      	bne.n	800dc64 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d009      	beq.n	800dc5c <xQueueSemaphoreTake+0xf4>
 800dc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	617b      	str	r3, [r7, #20]
 800dc5a:	e7fe      	b.n	800dc5a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dc5c:	f7ff f824 	bl	800cca8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc60:	2300      	movs	r3, #0
 800dc62:	e082      	b.n	800dd6a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc6a:	f107 030c 	add.w	r3, r7, #12
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f001 fe82 	bl	800f978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc74:	2301      	movs	r3, #1
 800dc76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc78:	f7ff f816 	bl	800cca8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc7c:	f001 fa78 	bl	800f170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc80:	f7fe ffe4 	bl	800cc4c <vPortEnterCritical>
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc8a:	b25b      	sxtb	r3, r3
 800dc8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc90:	d103      	bne.n	800dc9a <xQueueSemaphoreTake+0x132>
 800dc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dca0:	b25b      	sxtb	r3, r3
 800dca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dca6:	d103      	bne.n	800dcb0 <xQueueSemaphoreTake+0x148>
 800dca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcb0:	f7fe fffa 	bl	800cca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcb4:	463a      	mov	r2, r7
 800dcb6:	f107 030c 	add.w	r3, r7, #12
 800dcba:	4611      	mov	r1, r2
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f001 fe71 	bl	800f9a4 <xTaskCheckForTimeOut>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d132      	bne.n	800dd2e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcca:	f000 fbb2 	bl	800e432 <prvIsQueueEmpty>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d026      	beq.n	800dd22 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d109      	bne.n	800dcf0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800dcdc:	f7fe ffb6 	bl	800cc4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f002 f8cb 	bl	800fe80 <xTaskPriorityInherit>
 800dcea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dcec:	f7fe ffdc 	bl	800cca8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	3324      	adds	r3, #36	; 0x24
 800dcf4:	683a      	ldr	r2, [r7, #0]
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f001 fcf7 	bl	800f6ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd00:	f000 fb45 	bl	800e38e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd04:	f001 fa42 	bl	800f18c <xTaskResumeAll>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f47f af69 	bne.w	800dbe2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800dd10:	4b18      	ldr	r3, [pc, #96]	; (800dd74 <xQueueSemaphoreTake+0x20c>)
 800dd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd16:	601a      	str	r2, [r3, #0]
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	e75f      	b.n	800dbe2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd24:	f000 fb33 	bl	800e38e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd28:	f001 fa30 	bl	800f18c <xTaskResumeAll>
 800dd2c:	e759      	b.n	800dbe2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dd2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd30:	f000 fb2d 	bl	800e38e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd34:	f001 fa2a 	bl	800f18c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd3a:	f000 fb7a 	bl	800e432 <prvIsQueueEmpty>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f43f af4e 	beq.w	800dbe2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00d      	beq.n	800dd68 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800dd4c:	f7fe ff7e 	bl	800cc4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dd50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd52:	f000 fa74 	bl	800e23e <prvGetDisinheritPriorityAfterTimeout>
 800dd56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f002 f998 	bl	8010094 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dd64:	f7fe ffa0 	bl	800cca8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3738      	adds	r7, #56	; 0x38
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	e000ed04 	.word	0xe000ed04

0800dd78 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b08e      	sub	sp, #56	; 0x38
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd84:	2300      	movs	r3, #0
 800dd86:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d109      	bne.n	800dda6 <xQueuePeek+0x2e>
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	f383 8811 	msr	BASEPRI, r3
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	627b      	str	r3, [r7, #36]	; 0x24
 800dda4:	e7fe      	b.n	800dda4 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d103      	bne.n	800ddb4 <xQueuePeek+0x3c>
 800ddac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d101      	bne.n	800ddb8 <xQueuePeek+0x40>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	e000      	b.n	800ddba <xQueuePeek+0x42>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d109      	bne.n	800ddd2 <xQueuePeek+0x5a>
 800ddbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	623b      	str	r3, [r7, #32]
 800ddd0:	e7fe      	b.n	800ddd0 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddd2:	f002 f837 	bl	800fe44 <xTaskGetSchedulerState>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d102      	bne.n	800dde2 <xQueuePeek+0x6a>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d101      	bne.n	800dde6 <xQueuePeek+0x6e>
 800dde2:	2301      	movs	r3, #1
 800dde4:	e000      	b.n	800dde8 <xQueuePeek+0x70>
 800dde6:	2300      	movs	r3, #0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d109      	bne.n	800de00 <xQueuePeek+0x88>
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	61fb      	str	r3, [r7, #28]
 800ddfe:	e7fe      	b.n	800ddfe <xQueuePeek+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800de00:	f7fe ff24 	bl	800cc4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de08:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d021      	beq.n	800de54 <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de1a:	f000 fa92 	bl	800e342 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de22:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00f      	beq.n	800de4c <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2e:	3324      	adds	r3, #36	; 0x24
 800de30:	4618      	mov	r0, r3
 800de32:	f001 fcb9 	bl	800f7a8 <xTaskRemoveFromEventList>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d007      	beq.n	800de4c <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800de3c:	4b3c      	ldr	r3, [pc, #240]	; (800df30 <xQueuePeek+0x1b8>)
 800de3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de4c:	f7fe ff2c 	bl	800cca8 <vPortExitCritical>
				return pdPASS;
 800de50:	2301      	movs	r3, #1
 800de52:	e069      	b.n	800df28 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d103      	bne.n	800de62 <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de5a:	f7fe ff25 	bl	800cca8 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de5e:	2300      	movs	r3, #0
 800de60:	e062      	b.n	800df28 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de64:	2b00      	cmp	r3, #0
 800de66:	d106      	bne.n	800de76 <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de68:	f107 0314 	add.w	r3, r7, #20
 800de6c:	4618      	mov	r0, r3
 800de6e:	f001 fd83 	bl	800f978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de72:	2301      	movs	r3, #1
 800de74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de76:	f7fe ff17 	bl	800cca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de7a:	f001 f979 	bl	800f170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de7e:	f7fe fee5 	bl	800cc4c <vPortEnterCritical>
 800de82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de88:	b25b      	sxtb	r3, r3
 800de8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de8e:	d103      	bne.n	800de98 <xQueuePeek+0x120>
 800de90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de9e:	b25b      	sxtb	r3, r3
 800dea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dea4:	d103      	bne.n	800deae <xQueuePeek+0x136>
 800dea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea8:	2200      	movs	r2, #0
 800deaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800deae:	f7fe fefb 	bl	800cca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800deb2:	1d3a      	adds	r2, r7, #4
 800deb4:	f107 0314 	add.w	r3, r7, #20
 800deb8:	4611      	mov	r1, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f001 fd72 	bl	800f9a4 <xTaskCheckForTimeOut>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d123      	bne.n	800df0e <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dec8:	f000 fab3 	bl	800e432 <prvIsQueueEmpty>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d017      	beq.n	800df02 <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ded2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded4:	3324      	adds	r3, #36	; 0x24
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	4611      	mov	r1, r2
 800deda:	4618      	mov	r0, r3
 800dedc:	f001 fc06 	bl	800f6ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dee2:	f000 fa54 	bl	800e38e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dee6:	f001 f951 	bl	800f18c <xTaskResumeAll>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d187      	bne.n	800de00 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 800def0:	4b0f      	ldr	r3, [pc, #60]	; (800df30 <xQueuePeek+0x1b8>)
 800def2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	e77e      	b.n	800de00 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800df02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df04:	f000 fa43 	bl	800e38e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df08:	f001 f940 	bl	800f18c <xTaskResumeAll>
 800df0c:	e778      	b.n	800de00 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800df0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df10:	f000 fa3d 	bl	800e38e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df14:	f001 f93a 	bl	800f18c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df1a:	f000 fa8a 	bl	800e432 <prvIsQueueEmpty>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	f43f af6d 	beq.w	800de00 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3738      	adds	r7, #56	; 0x38
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	e000ed04 	.word	0xe000ed04

0800df34 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b08e      	sub	sp, #56	; 0x38
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df46:	2b00      	cmp	r3, #0
 800df48:	d109      	bne.n	800df5e <xQueueReceiveFromISR+0x2a>
 800df4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	623b      	str	r3, [r7, #32]
 800df5c:	e7fe      	b.n	800df5c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d103      	bne.n	800df6c <xQueueReceiveFromISR+0x38>
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <xQueueReceiveFromISR+0x3c>
 800df6c:	2301      	movs	r3, #1
 800df6e:	e000      	b.n	800df72 <xQueueReceiveFromISR+0x3e>
 800df70:	2300      	movs	r3, #0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d109      	bne.n	800df8a <xQueueReceiveFromISR+0x56>
 800df76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7a:	f383 8811 	msr	BASEPRI, r3
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	f3bf 8f4f 	dsb	sy
 800df86:	61fb      	str	r3, [r7, #28]
 800df88:	e7fe      	b.n	800df88 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df8a:	f7fe ff39 	bl	800ce00 <vPortValidateInterruptPriority>
	__asm volatile
 800df8e:	f3ef 8211 	mrs	r2, BASEPRI
 800df92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	61ba      	str	r2, [r7, #24]
 800dfa4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dfa6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d02f      	beq.n	800e016 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfc4:	f000 f9bd 	bl	800e342 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfca:	1e5a      	subs	r2, r3, #1
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dfd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dfd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfd8:	d112      	bne.n	800e000 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d016      	beq.n	800e010 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	3310      	adds	r3, #16
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f001 fbde 	bl	800f7a8 <xTaskRemoveFromEventList>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00e      	beq.n	800e010 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00b      	beq.n	800e010 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2201      	movs	r2, #1
 800dffc:	601a      	str	r2, [r3, #0]
 800dffe:	e007      	b.n	800e010 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e004:	3301      	adds	r3, #1
 800e006:	b2db      	uxtb	r3, r3
 800e008:	b25a      	sxtb	r2, r3
 800e00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e010:	2301      	movs	r3, #1
 800e012:	637b      	str	r3, [r7, #52]	; 0x34
 800e014:	e001      	b.n	800e01a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e016:	2300      	movs	r3, #0
 800e018:	637b      	str	r3, [r7, #52]	; 0x34
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e026:	4618      	mov	r0, r3
 800e028:	3738      	adds	r7, #56	; 0x38
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b08c      	sub	sp, #48	; 0x30
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d109      	bne.n	800e056 <xQueuePeekFromISR+0x28>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	61fb      	str	r3, [r7, #28]
 800e054:	e7fe      	b.n	800e054 <xQueuePeekFromISR+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d103      	bne.n	800e064 <xQueuePeekFromISR+0x36>
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <xQueuePeekFromISR+0x3a>
 800e064:	2301      	movs	r3, #1
 800e066:	e000      	b.n	800e06a <xQueuePeekFromISR+0x3c>
 800e068:	2300      	movs	r3, #0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d109      	bne.n	800e082 <xQueuePeekFromISR+0x54>
 800e06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e072:	f383 8811 	msr	BASEPRI, r3
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	61bb      	str	r3, [r7, #24]
 800e080:	e7fe      	b.n	800e080 <xQueuePeekFromISR+0x52>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 800e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e086:	2b00      	cmp	r3, #0
 800e088:	d109      	bne.n	800e09e <xQueuePeekFromISR+0x70>
 800e08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	617b      	str	r3, [r7, #20]
 800e09c:	e7fe      	b.n	800e09c <xQueuePeekFromISR+0x6e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e09e:	f7fe feaf 	bl	800ce00 <vPortValidateInterruptPriority>
	__asm volatile
 800e0a2:	f3ef 8211 	mrs	r2, BASEPRI
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	613a      	str	r2, [r7, #16]
 800e0b8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800e0ba:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0bc:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00c      	beq.n	800e0e0 <xQueuePeekFromISR+0xb2>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0d0:	f000 f937 	bl	800e342 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d6:	6a3a      	ldr	r2, [r7, #32]
 800e0d8:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0de:	e001      	b.n	800e0e4 <xQueuePeekFromISR+0xb6>
		}
		else
		{
			xReturn = pdFAIL;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3730      	adds	r7, #48	; 0x30
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d109      	bne.n	800e11a <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800e106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	60bb      	str	r3, [r7, #8]
 800e118:	e7fe      	b.n	800e118 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800e11a:	f7fe fd97 	bl	800cc4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e122:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e124:	f7fe fdc0 	bl	800cca8 <vPortExitCritical>

	return uxReturn;
 800e128:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e12a:	4618      	mov	r0, r3
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b086      	sub	sp, #24
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d109      	bne.n	800e158 <uxQueueSpacesAvailable+0x26>
 800e144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	60fb      	str	r3, [r7, #12]
 800e156:	e7fe      	b.n	800e156 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800e158:	f7fe fd78 	bl	800cc4c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e168:	f7fe fd9e 	bl	800cca8 <vPortExitCritical>

	return uxReturn;
 800e16c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e16e:	4618      	mov	r0, r3
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e176:	b480      	push	{r7}
 800e178:	b085      	sub	sp, #20
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d109      	bne.n	800e198 <uxQueueMessagesWaitingFromISR+0x22>
 800e184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	60bb      	str	r3, [r7, #8]
 800e196:	e7fe      	b.n	800e196 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e19c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800e19e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d109      	bne.n	800e1d2 <vQueueDelete+0x26>
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	60bb      	str	r3, [r7, #8]
 800e1d0:	e7fe      	b.n	800e1d0 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f000 f9ee 	bl	800e5b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d102      	bne.n	800e1e8 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f7fe ff10 	bl	800d008 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e1e8:	bf00      	nop
 800e1ea:	3710      	adds	r7, #16
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800e218:	bf00      	nop
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e23e:	b480      	push	{r7}
 800e240:	b085      	sub	sp, #20
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d006      	beq.n	800e25c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f1c3 0307 	rsb	r3, r3, #7
 800e258:	60fb      	str	r3, [r7, #12]
 800e25a:	e001      	b.n	800e260 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e25c:	2300      	movs	r3, #0
 800e25e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e260:	68fb      	ldr	r3, [r7, #12]
	}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b086      	sub	sp, #24
 800e272:	af00      	add	r7, sp, #0
 800e274:	60f8      	str	r0, [r7, #12]
 800e276:	60b9      	str	r1, [r7, #8]
 800e278:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e27a:	2300      	movs	r3, #0
 800e27c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e282:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d10d      	bne.n	800e2a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d14d      	bne.n	800e330 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	4618      	mov	r0, r3
 800e29a:	f001 fe77 	bl	800ff8c <xTaskPriorityDisinherit>
 800e29e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	605a      	str	r2, [r3, #4]
 800e2a6:	e043      	b.n	800e330 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d119      	bne.n	800e2e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6898      	ldr	r0, [r3, #8]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	f006 fb55 	bl	8014968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	689a      	ldr	r2, [r3, #8]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c6:	441a      	add	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	689a      	ldr	r2, [r3, #8]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d32b      	bcc.n	800e330 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	609a      	str	r2, [r3, #8]
 800e2e0:	e026      	b.n	800e330 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	68d8      	ldr	r0, [r3, #12]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	f006 fb3b 	bl	8014968 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	68da      	ldr	r2, [r3, #12]
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fa:	425b      	negs	r3, r3
 800e2fc:	441a      	add	r2, r3
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	68da      	ldr	r2, [r3, #12]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d207      	bcs.n	800e31e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	685a      	ldr	r2, [r3, #4]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e316:	425b      	negs	r3, r3
 800e318:	441a      	add	r2, r3
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d105      	bne.n	800e330 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d002      	beq.n	800e330 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	1c5a      	adds	r2, r3, #1
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e338:	697b      	ldr	r3, [r7, #20]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3718      	adds	r7, #24
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e350:	2b00      	cmp	r3, #0
 800e352:	d018      	beq.n	800e386 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	68da      	ldr	r2, [r3, #12]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35c:	441a      	add	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	68da      	ldr	r2, [r3, #12]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d303      	bcc.n	800e376 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	68d9      	ldr	r1, [r3, #12]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e37e:	461a      	mov	r2, r3
 800e380:	6838      	ldr	r0, [r7, #0]
 800e382:	f006 faf1 	bl	8014968 <memcpy>
	}
}
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b084      	sub	sp, #16
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e396:	f7fe fc59 	bl	800cc4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3a2:	e011      	b.n	800e3c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d012      	beq.n	800e3d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3324      	adds	r3, #36	; 0x24
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f001 f9f9 	bl	800f7a8 <xTaskRemoveFromEventList>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3bc:	f001 fb52 	bl	800fa64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dce9      	bgt.n	800e3a4 <prvUnlockQueue+0x16>
 800e3d0:	e000      	b.n	800e3d4 <prvUnlockQueue+0x46>
					break;
 800e3d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	22ff      	movs	r2, #255	; 0xff
 800e3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e3dc:	f7fe fc64 	bl	800cca8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3e0:	f7fe fc34 	bl	800cc4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3ec:	e011      	b.n	800e412 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d012      	beq.n	800e41c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	3310      	adds	r3, #16
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f001 f9d4 	bl	800f7a8 <xTaskRemoveFromEventList>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e406:	f001 fb2d 	bl	800fa64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e416:	2b00      	cmp	r3, #0
 800e418:	dce9      	bgt.n	800e3ee <prvUnlockQueue+0x60>
 800e41a:	e000      	b.n	800e41e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e41c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	22ff      	movs	r2, #255	; 0xff
 800e422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e426:	f7fe fc3f 	bl	800cca8 <vPortExitCritical>
}
 800e42a:	bf00      	nop
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b084      	sub	sp, #16
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e43a:	f7fe fc07 	bl	800cc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e442:	2b00      	cmp	r3, #0
 800e444:	d102      	bne.n	800e44c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e446:	2301      	movs	r3, #1
 800e448:	60fb      	str	r3, [r7, #12]
 800e44a:	e001      	b.n	800e450 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e44c:	2300      	movs	r3, #0
 800e44e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e450:	f7fe fc2a 	bl	800cca8 <vPortExitCritical>

	return xReturn;
 800e454:	68fb      	ldr	r3, [r7, #12]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3710      	adds	r7, #16
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 800e45e:	b480      	push	{r7}
 800e460:	b085      	sub	sp, #20
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d109      	bne.n	800e480 <xQueueIsQueueEmptyFromISR+0x22>
 800e46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e470:	f383 8811 	msr	BASEPRI, r3
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	60bb      	str	r3, [r7, #8]
 800e47e:	e7fe      	b.n	800e47e <xQueueIsQueueEmptyFromISR+0x20>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 800e488:	2301      	movs	r3, #1
 800e48a:	60fb      	str	r3, [r7, #12]
 800e48c:	e001      	b.n	800e492 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 800e48e:	2300      	movs	r3, #0
 800e490:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800e492:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e4a8:	f7fe fbd0 	bl	800cc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d102      	bne.n	800e4be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	60fb      	str	r3, [r7, #12]
 800e4bc:	e001      	b.n	800e4c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e4c2:	f7fe fbf1 	bl	800cca8 <vPortExitCritical>

	return xReturn;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d109      	bne.n	800e4f2 <xQueueIsQueueFullFromISR+0x22>
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	60bb      	str	r3, [r7, #8]
 800e4f0:	e7fe      	b.n	800e4f0 <xQueueIsQueueFullFromISR+0x20>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d102      	bne.n	800e504 <xQueueIsQueueFullFromISR+0x34>
	{
		xReturn = pdTRUE;
 800e4fe:	2301      	movs	r3, #1
 800e500:	60fb      	str	r3, [r7, #12]
 800e502:	e001      	b.n	800e508 <xQueueIsQueueFullFromISR+0x38>
	}
	else
	{
		xReturn = pdFALSE;
 800e504:	2300      	movs	r3, #0
 800e506:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800e508:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e50a:	4618      	mov	r0, r3
 800e50c:	3714      	adds	r7, #20
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e516:	b480      	push	{r7}
 800e518:	b085      	sub	sp, #20
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e520:	2300      	movs	r3, #0
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	e014      	b.n	800e550 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e526:	4a0f      	ldr	r2, [pc, #60]	; (800e564 <vQueueAddToRegistry+0x4e>)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d10b      	bne.n	800e54a <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e532:	490c      	ldr	r1, [pc, #48]	; (800e564 <vQueueAddToRegistry+0x4e>)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e53c:	4a09      	ldr	r2, [pc, #36]	; (800e564 <vQueueAddToRegistry+0x4e>)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	4413      	add	r3, r2
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e548:	e005      	b.n	800e556 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3301      	adds	r3, #1
 800e54e:	60fb      	str	r3, [r7, #12]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2b07      	cmp	r3, #7
 800e554:	d9e7      	bls.n	800e526 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e556:	bf00      	nop
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	20003ff4 	.word	0x20003ff4

0800e568 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800e570:	2300      	movs	r3, #0
 800e572:	60bb      	str	r3, [r7, #8]

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e574:	2300      	movs	r3, #0
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	e010      	b.n	800e59c <pcQueueGetName+0x34>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e57a:	4a0d      	ldr	r2, [pc, #52]	; (800e5b0 <pcQueueGetName+0x48>)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	00db      	lsls	r3, r3, #3
 800e580:	4413      	add	r3, r2
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	429a      	cmp	r2, r3
 800e588:	d105      	bne.n	800e596 <pcQueueGetName+0x2e>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 800e58a:	4a09      	ldr	r2, [pc, #36]	; (800e5b0 <pcQueueGetName+0x48>)
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e592:	60bb      	str	r3, [r7, #8]
				break;
 800e594:	e005      	b.n	800e5a2 <pcQueueGetName+0x3a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3301      	adds	r3, #1
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2b07      	cmp	r3, #7
 800e5a0:	d9eb      	bls.n	800e57a <pcQueueGetName+0x12>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
 800e5a2:	68bb      	ldr	r3, [r7, #8]
	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	20003ff4 	.word	0x20003ff4

0800e5b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e5bc:	2300      	movs	r3, #0
 800e5be:	60fb      	str	r3, [r7, #12]
 800e5c0:	e016      	b.n	800e5f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e5c2:	4a10      	ldr	r2, [pc, #64]	; (800e604 <vQueueUnregisterQueue+0x50>)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	00db      	lsls	r3, r3, #3
 800e5c8:	4413      	add	r3, r2
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d10b      	bne.n	800e5ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e5d2:	4a0c      	ldr	r2, [pc, #48]	; (800e604 <vQueueUnregisterQueue+0x50>)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e5dc:	4a09      	ldr	r2, [pc, #36]	; (800e604 <vQueueUnregisterQueue+0x50>)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	00db      	lsls	r3, r3, #3
 800e5e2:	4413      	add	r3, r2
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	605a      	str	r2, [r3, #4]
				break;
 800e5e8:	e005      	b.n	800e5f6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	60fb      	str	r3, [r7, #12]
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b07      	cmp	r3, #7
 800e5f4:	d9e5      	bls.n	800e5c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e5f6:	bf00      	nop
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	20003ff4 	.word	0x20003ff4

0800e608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08e      	sub	sp, #56	; 0x38
 800e60c:	af04      	add	r7, sp, #16
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d109      	bne.n	800e630 <xTaskCreateStatic+0x28>
 800e61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	623b      	str	r3, [r7, #32]
 800e62e:	e7fe      	b.n	800e62e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	2b00      	cmp	r3, #0
 800e634:	d109      	bne.n	800e64a <xTaskCreateStatic+0x42>
 800e636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63a:	f383 8811 	msr	BASEPRI, r3
 800e63e:	f3bf 8f6f 	isb	sy
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	61fb      	str	r3, [r7, #28]
 800e648:	e7fe      	b.n	800e648 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e64a:	2360      	movs	r3, #96	; 0x60
 800e64c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	2b60      	cmp	r3, #96	; 0x60
 800e652:	d009      	beq.n	800e668 <xTaskCreateStatic+0x60>
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	61bb      	str	r3, [r7, #24]
 800e666:	e7fe      	b.n	800e666 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d01e      	beq.n	800e6ac <xTaskCreateStatic+0xa4>
 800e66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e670:	2b00      	cmp	r3, #0
 800e672:	d01b      	beq.n	800e6ac <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e67c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	2202      	movs	r2, #2
 800e682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e686:	2300      	movs	r3, #0
 800e688:	9303      	str	r3, [sp, #12]
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	9302      	str	r3, [sp, #8]
 800e68e:	f107 0314 	add.w	r3, r7, #20
 800e692:	9301      	str	r3, [sp, #4]
 800e694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e696:	9300      	str	r3, [sp, #0]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	68b9      	ldr	r1, [r7, #8]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f000 f850 	bl	800e744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6a6:	f000 f8d6 	bl	800e856 <prvAddNewTaskToReadyList>
 800e6aa:	e001      	b.n	800e6b0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e6b0:	697b      	ldr	r3, [r7, #20]
	}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3728      	adds	r7, #40	; 0x28
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b08c      	sub	sp, #48	; 0x30
 800e6be:	af04      	add	r7, sp, #16
 800e6c0:	60f8      	str	r0, [r7, #12]
 800e6c2:	60b9      	str	r1, [r7, #8]
 800e6c4:	603b      	str	r3, [r7, #0]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ca:	88fb      	ldrh	r3, [r7, #6]
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fe fbd8 	bl	800ce84 <pvPortMalloc>
 800e6d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00e      	beq.n	800e6fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e6dc:	2060      	movs	r0, #96	; 0x60
 800e6de:	f7fe fbd1 	bl	800ce84 <pvPortMalloc>
 800e6e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	697a      	ldr	r2, [r7, #20]
 800e6ee:	631a      	str	r2, [r3, #48]	; 0x30
 800e6f0:	e005      	b.n	800e6fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e6f2:	6978      	ldr	r0, [r7, #20]
 800e6f4:	f7fe fc88 	bl	800d008 <vPortFree>
 800e6f8:	e001      	b.n	800e6fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d017      	beq.n	800e734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	2200      	movs	r2, #0
 800e708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e70c:	88fa      	ldrh	r2, [r7, #6]
 800e70e:	2300      	movs	r3, #0
 800e710:	9303      	str	r3, [sp, #12]
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	9302      	str	r3, [sp, #8]
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	68b9      	ldr	r1, [r7, #8]
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f000 f80e 	bl	800e744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e728:	69f8      	ldr	r0, [r7, #28]
 800e72a:	f000 f894 	bl	800e856 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e72e:	2301      	movs	r3, #1
 800e730:	61bb      	str	r3, [r7, #24]
 800e732:	e002      	b.n	800e73a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e73a:	69bb      	ldr	r3, [r7, #24]
	}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3720      	adds	r7, #32
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b088      	sub	sp, #32
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	461a      	mov	r2, r3
 800e75c:	21a5      	movs	r1, #165	; 0xa5
 800e75e:	f006 f90e 	bl	801497e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e76c:	3b01      	subs	r3, #1
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	4413      	add	r3, r2
 800e772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	f023 0307 	bic.w	r3, r3, #7
 800e77a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	f003 0307 	and.w	r3, r3, #7
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <prvInitialiseNewTask+0x56>
 800e786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	e7fe      	b.n	800e798 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e79a:	2300      	movs	r3, #0
 800e79c:	61fb      	str	r3, [r7, #28]
 800e79e:	e012      	b.n	800e7c6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e7a0:	68ba      	ldr	r2, [r7, #8]
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	7819      	ldrb	r1, [r3, #0]
 800e7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	3334      	adds	r3, #52	; 0x34
 800e7b0:	460a      	mov	r2, r1
 800e7b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e7b4:	68ba      	ldr	r2, [r7, #8]
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d006      	beq.n	800e7ce <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	61fb      	str	r3, [r7, #28]
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	2b0f      	cmp	r3, #15
 800e7ca:	d9e9      	bls.n	800e7a0 <prvInitialiseNewTask+0x5c>
 800e7cc:	e000      	b.n	800e7d0 <prvInitialiseNewTask+0x8c>
		{
			break;
 800e7ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	2b06      	cmp	r3, #6
 800e7dc:	d901      	bls.n	800e7e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e7de:	2306      	movs	r3, #6
 800e7e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fe f853 	bl	800c8a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	3318      	adds	r3, #24
 800e802:	4618      	mov	r0, r3
 800e804:	f7fe f84e 	bl	800c8a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e80c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	f1c3 0207 	rsb	r2, r3, #7
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e81c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e820:	2200      	movs	r2, #0
 800e822:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e826:	2200      	movs	r2, #0
 800e828:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82c:	2200      	movs	r2, #0
 800e82e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	68f9      	ldr	r1, [r7, #12]
 800e836:	69b8      	ldr	r0, [r7, #24]
 800e838:	f7fe f8ca 	bl	800c9d0 <pxPortInitialiseStack>
 800e83c:	4602      	mov	r2, r0
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e84c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e84e:	bf00      	nop
 800e850:	3720      	adds	r7, #32
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b082      	sub	sp, #8
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e85e:	f7fe f9f5 	bl	800cc4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e862:	4b2d      	ldr	r3, [pc, #180]	; (800e918 <prvAddNewTaskToReadyList+0xc2>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	3301      	adds	r3, #1
 800e868:	4a2b      	ldr	r2, [pc, #172]	; (800e918 <prvAddNewTaskToReadyList+0xc2>)
 800e86a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e86c:	4b2b      	ldr	r3, [pc, #172]	; (800e91c <prvAddNewTaskToReadyList+0xc6>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d109      	bne.n	800e888 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e874:	4a29      	ldr	r2, [pc, #164]	; (800e91c <prvAddNewTaskToReadyList+0xc6>)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e87a:	4b27      	ldr	r3, [pc, #156]	; (800e918 <prvAddNewTaskToReadyList+0xc2>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d110      	bne.n	800e8a4 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e882:	f001 f93b 	bl	800fafc <prvInitialiseTaskLists>
 800e886:	e00d      	b.n	800e8a4 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e888:	4b25      	ldr	r3, [pc, #148]	; (800e920 <prvAddNewTaskToReadyList+0xca>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d109      	bne.n	800e8a4 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e890:	4b22      	ldr	r3, [pc, #136]	; (800e91c <prvAddNewTaskToReadyList+0xc6>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d802      	bhi.n	800e8a4 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e89e:	4a1f      	ldr	r2, [pc, #124]	; (800e91c <prvAddNewTaskToReadyList+0xc6>)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e8a4:	4b1f      	ldr	r3, [pc, #124]	; (800e924 <prvAddNewTaskToReadyList+0xce>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	4a1e      	ldr	r2, [pc, #120]	; (800e924 <prvAddNewTaskToReadyList+0xce>)
 800e8ac:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e8ae:	4b1d      	ldr	r3, [pc, #116]	; (800e924 <prvAddNewTaskToReadyList+0xce>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	409a      	lsls	r2, r3
 800e8be:	4b1a      	ldr	r3, [pc, #104]	; (800e928 <prvAddNewTaskToReadyList+0xd2>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	4a18      	ldr	r2, [pc, #96]	; (800e928 <prvAddNewTaskToReadyList+0xd2>)
 800e8c6:	6013      	str	r3, [r2, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4413      	add	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	4a15      	ldr	r2, [pc, #84]	; (800e92c <prvAddNewTaskToReadyList+0xd6>)
 800e8d6:	441a      	add	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	3304      	adds	r3, #4
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4610      	mov	r0, r2
 800e8e0:	f7fd ffed 	bl	800c8be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e8e4:	f7fe f9e0 	bl	800cca8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e8e8:	4b0d      	ldr	r3, [pc, #52]	; (800e920 <prvAddNewTaskToReadyList+0xca>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00e      	beq.n	800e90e <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e8f0:	4b0a      	ldr	r3, [pc, #40]	; (800e91c <prvAddNewTaskToReadyList+0xc6>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d207      	bcs.n	800e90e <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e8fe:	4b0c      	ldr	r3, [pc, #48]	; (800e930 <prvAddNewTaskToReadyList+0xda>)
 800e900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e90e:	bf00      	nop
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	20003d4c 	.word	0x20003d4c
 800e91c:	20003c4c 	.word	0x20003c4c
 800e920:	20003d58 	.word	0x20003d58
 800e924:	20003d68 	.word	0x20003d68
 800e928:	20003d54 	.word	0x20003d54
 800e92c:	20003c50 	.word	0x20003c50
 800e930:	e000ed04 	.word	0xe000ed04

0800e934 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e93c:	f7fe f986 	bl	800cc4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d102      	bne.n	800e94c <vTaskDelete+0x18>
 800e946:	4b38      	ldr	r3, [pc, #224]	; (800ea28 <vTaskDelete+0xf4>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	e000      	b.n	800e94e <vTaskDelete+0x1a>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3304      	adds	r3, #4
 800e954:	4618      	mov	r0, r3
 800e956:	f7fe f80f 	bl	800c978 <uxListRemove>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d115      	bne.n	800e98c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e964:	4931      	ldr	r1, [pc, #196]	; (800ea2c <vTaskDelete+0xf8>)
 800e966:	4613      	mov	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	4413      	add	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	440b      	add	r3, r1
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10a      	bne.n	800e98c <vTaskDelete+0x58>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97a:	2201      	movs	r2, #1
 800e97c:	fa02 f303 	lsl.w	r3, r2, r3
 800e980:	43da      	mvns	r2, r3
 800e982:	4b2b      	ldr	r3, [pc, #172]	; (800ea30 <vTaskDelete+0xfc>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4013      	ands	r3, r2
 800e988:	4a29      	ldr	r2, [pc, #164]	; (800ea30 <vTaskDelete+0xfc>)
 800e98a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e990:	2b00      	cmp	r3, #0
 800e992:	d004      	beq.n	800e99e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	3318      	adds	r3, #24
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fd ffed 	bl	800c978 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e99e:	4b25      	ldr	r3, [pc, #148]	; (800ea34 <vTaskDelete+0x100>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	4a23      	ldr	r2, [pc, #140]	; (800ea34 <vTaskDelete+0x100>)
 800e9a6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e9a8:	4b1f      	ldr	r3, [pc, #124]	; (800ea28 <vTaskDelete+0xf4>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d10b      	bne.n	800e9ca <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	481f      	ldr	r0, [pc, #124]	; (800ea38 <vTaskDelete+0x104>)
 800e9ba:	f7fd ff80 	bl	800c8be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e9be:	4b1f      	ldr	r3, [pc, #124]	; (800ea3c <vTaskDelete+0x108>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	4a1d      	ldr	r2, [pc, #116]	; (800ea3c <vTaskDelete+0x108>)
 800e9c6:	6013      	str	r3, [r2, #0]
 800e9c8:	e009      	b.n	800e9de <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e9ca:	4b1d      	ldr	r3, [pc, #116]	; (800ea40 <vTaskDelete+0x10c>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	4a1b      	ldr	r2, [pc, #108]	; (800ea40 <vTaskDelete+0x10c>)
 800e9d2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f001 f9d1 	bl	800fd7c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e9da:	f001 f9fd 	bl	800fdd8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800e9de:	f7fe f963 	bl	800cca8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e9e2:	4b18      	ldr	r3, [pc, #96]	; (800ea44 <vTaskDelete+0x110>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d01a      	beq.n	800ea20 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800e9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ea28 <vTaskDelete+0xf4>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d115      	bne.n	800ea20 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e9f4:	4b14      	ldr	r3, [pc, #80]	; (800ea48 <vTaskDelete+0x114>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d009      	beq.n	800ea10 <vTaskDelete+0xdc>
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	60bb      	str	r3, [r7, #8]
 800ea0e:	e7fe      	b.n	800ea0e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800ea10:	4b0e      	ldr	r3, [pc, #56]	; (800ea4c <vTaskDelete+0x118>)
 800ea12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ea20:	bf00      	nop
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20003c4c 	.word	0x20003c4c
 800ea2c:	20003c50 	.word	0x20003c50
 800ea30:	20003d54 	.word	0x20003d54
 800ea34:	20003d68 	.word	0x20003d68
 800ea38:	20003d20 	.word	0x20003d20
 800ea3c:	20003d34 	.word	0x20003d34
 800ea40:	20003d4c 	.word	0x20003d4c
 800ea44:	20003d58 	.word	0x20003d58
 800ea48:	20003d74 	.word	0x20003d74
 800ea4c:	e000ed04 	.word	0xe000ed04

0800ea50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d016      	beq.n	800ea90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ea62:	4b13      	ldr	r3, [pc, #76]	; (800eab0 <vTaskDelay+0x60>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d009      	beq.n	800ea7e <vTaskDelay+0x2e>
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	60bb      	str	r3, [r7, #8]
 800ea7c:	e7fe      	b.n	800ea7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ea7e:	f000 fb77 	bl	800f170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ea82:	2100      	movs	r1, #0
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f002 f821 	bl	8010acc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ea8a:	f000 fb7f 	bl	800f18c <xTaskResumeAll>
 800ea8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d107      	bne.n	800eaa6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ea96:	4b07      	ldr	r3, [pc, #28]	; (800eab4 <vTaskDelay+0x64>)
 800ea98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eaa6:	bf00      	nop
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20003d74 	.word	0x20003d74
 800eab4:	e000ed04 	.word	0xe000ed04

0800eab8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d109      	bne.n	800eade <eTaskGetState+0x26>
 800eaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eace:	f383 8811 	msr	BASEPRI, r3
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	60bb      	str	r3, [r7, #8]
 800eadc:	e7fe      	b.n	800eadc <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 800eade:	4b1d      	ldr	r3, [pc, #116]	; (800eb54 <eTaskGetState+0x9c>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d102      	bne.n	800eaee <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800eae8:	2300      	movs	r3, #0
 800eaea:	75fb      	strb	r3, [r7, #23]
 800eaec:	e02d      	b.n	800eb4a <eTaskGetState+0x92>
		}
		else
		{
			taskENTER_CRITICAL();
 800eaee:	f7fe f8ad 	bl	800cc4c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800eaf8:	f7fe f8d6 	bl	800cca8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800eafc:	4b16      	ldr	r3, [pc, #88]	; (800eb58 <eTaskGetState+0xa0>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d004      	beq.n	800eb10 <eTaskGetState+0x58>
 800eb06:	4b15      	ldr	r3, [pc, #84]	; (800eb5c <eTaskGetState+0xa4>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d102      	bne.n	800eb16 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800eb10:	2302      	movs	r3, #2
 800eb12:	75fb      	strb	r3, [r7, #23]
 800eb14:	e019      	b.n	800eb4a <eTaskGetState+0x92>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	4a11      	ldr	r2, [pc, #68]	; (800eb60 <eTaskGetState+0xa8>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d109      	bne.n	800eb32 <eTaskGetState+0x7a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d102      	bne.n	800eb2c <eTaskGetState+0x74>
					{
						eReturn = eSuspended;
 800eb26:	2303      	movs	r3, #3
 800eb28:	75fb      	strb	r3, [r7, #23]
 800eb2a:	e00e      	b.n	800eb4a <eTaskGetState+0x92>
					}
					else
					{
						eReturn = eBlocked;
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	75fb      	strb	r3, [r7, #23]
 800eb30:	e00b      	b.n	800eb4a <eTaskGetState+0x92>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	4a0b      	ldr	r2, [pc, #44]	; (800eb64 <eTaskGetState+0xac>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d002      	beq.n	800eb40 <eTaskGetState+0x88>
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d102      	bne.n	800eb46 <eTaskGetState+0x8e>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800eb40:	2304      	movs	r3, #4
 800eb42:	75fb      	strb	r3, [r7, #23]
 800eb44:	e001      	b.n	800eb4a <eTaskGetState+0x92>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800eb46:	2301      	movs	r3, #1
 800eb48:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	20003c4c 	.word	0x20003c4c
 800eb58:	20003d04 	.word	0x20003d04
 800eb5c:	20003d08 	.word	0x20003d08
 800eb60:	20003d38 	.word	0x20003d38
 800eb64:	20003d20 	.word	0x20003d20

0800eb68 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 800eb70:	f7fe f86c 	bl	800cc4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d102      	bne.n	800eb80 <uxTaskPriorityGet+0x18>
 800eb7a:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <uxTaskPriorityGet+0x30>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	e000      	b.n	800eb82 <uxTaskPriorityGet+0x1a>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb88:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800eb8a:	f7fe f88d 	bl	800cca8 <vPortExitCritical>

		return uxReturn;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
	}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	20003c4c 	.word	0x20003c4c

0800eb9c <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b088      	sub	sp, #32
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eba4:	f7fe f92c 	bl	800ce00 <vPortValidateInterruptPriority>
	__asm volatile
 800eba8:	f3ef 8211 	mrs	r2, BASEPRI
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	613a      	str	r2, [r7, #16]
 800ebbe:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800ebc0:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebc2:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d102      	bne.n	800ebd0 <uxTaskPriorityGetFromISR+0x34>
 800ebca:	4b09      	ldr	r3, [pc, #36]	; (800ebf0 <uxTaskPriorityGetFromISR+0x54>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	e000      	b.n	800ebd2 <uxTaskPriorityGetFromISR+0x36>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd8:	617b      	str	r3, [r7, #20]
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 800ebe4:	697b      	ldr	r3, [r7, #20]
	}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3720      	adds	r7, #32
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	20003c4c 	.word	0x20003c4c

0800ebf4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	2b06      	cmp	r3, #6
 800ec06:	d909      	bls.n	800ec1c <vTaskPrioritySet+0x28>
	__asm volatile
 800ec08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	60fb      	str	r3, [r7, #12]
 800ec1a:	e7fe      	b.n	800ec1a <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2b06      	cmp	r3, #6
 800ec20:	d901      	bls.n	800ec26 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec22:	2306      	movs	r3, #6
 800ec24:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800ec26:	f7fe f811 	bl	800cc4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <vTaskPrioritySet+0x42>
 800ec30:	4b43      	ldr	r3, [pc, #268]	; (800ed40 <vTaskPrioritySet+0x14c>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	e000      	b.n	800ec38 <vTaskPrioritySet+0x44>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec3e:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800ec40:	697a      	ldr	r2, [r7, #20]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d074      	beq.n	800ed32 <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d90d      	bls.n	800ec6c <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 800ec50:	4b3b      	ldr	r3, [pc, #236]	; (800ed40 <vTaskPrioritySet+0x14c>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	69ba      	ldr	r2, [r7, #24]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d00f      	beq.n	800ec7a <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ec5a:	4b39      	ldr	r3, [pc, #228]	; (800ed40 <vTaskPrioritySet+0x14c>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d809      	bhi.n	800ec7a <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 800ec66:	2301      	movs	r3, #1
 800ec68:	61fb      	str	r3, [r7, #28]
 800ec6a:	e006      	b.n	800ec7a <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800ec6c:	4b34      	ldr	r3, [pc, #208]	; (800ed40 <vTaskPrioritySet+0x14c>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	69ba      	ldr	r2, [r7, #24]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d101      	bne.n	800ec7a <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800ec76:	2301      	movs	r3, #1
 800ec78:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7e:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d102      	bne.n	800ec92 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	683a      	ldr	r2, [r7, #0]
 800ec96:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	699b      	ldr	r3, [r3, #24]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	db04      	blt.n	800ecaa <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	f1c3 0207 	rsb	r2, r3, #7
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	6959      	ldr	r1, [r3, #20]
 800ecae:	693a      	ldr	r2, [r7, #16]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4a22      	ldr	r2, [pc, #136]	; (800ed44 <vTaskPrioritySet+0x150>)
 800ecba:	4413      	add	r3, r2
 800ecbc:	4299      	cmp	r1, r3
 800ecbe:	d101      	bne.n	800ecc4 <vTaskPrioritySet+0xd0>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e000      	b.n	800ecc6 <vTaskPrioritySet+0xd2>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d028      	beq.n	800ed1c <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	3304      	adds	r3, #4
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fd fe52 	bl	800c978 <uxListRemove>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d109      	bne.n	800ecee <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800ecda:	2201      	movs	r2, #1
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	fa02 f303 	lsl.w	r3, r2, r3
 800ece2:	43da      	mvns	r2, r3
 800ece4:	4b18      	ldr	r3, [pc, #96]	; (800ed48 <vTaskPrioritySet+0x154>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4013      	ands	r3, r2
 800ecea:	4a17      	ldr	r2, [pc, #92]	; (800ed48 <vTaskPrioritySet+0x154>)
 800ecec:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	409a      	lsls	r2, r3
 800ecf6:	4b14      	ldr	r3, [pc, #80]	; (800ed48 <vTaskPrioritySet+0x154>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	4a12      	ldr	r2, [pc, #72]	; (800ed48 <vTaskPrioritySet+0x154>)
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed04:	4613      	mov	r3, r2
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4413      	add	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4a0d      	ldr	r2, [pc, #52]	; (800ed44 <vTaskPrioritySet+0x150>)
 800ed0e:	441a      	add	r2, r3
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	3304      	adds	r3, #4
 800ed14:	4619      	mov	r1, r3
 800ed16:	4610      	mov	r0, r2
 800ed18:	f7fd fdd1 	bl	800c8be <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d007      	beq.n	800ed32 <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800ed22:	4b0a      	ldr	r3, [pc, #40]	; (800ed4c <vTaskPrioritySet+0x158>)
 800ed24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800ed32:	f7fd ffb9 	bl	800cca8 <vPortExitCritical>
	}
 800ed36:	bf00      	nop
 800ed38:	3720      	adds	r7, #32
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	20003c4c 	.word	0x20003c4c
 800ed44:	20003c50 	.word	0x20003c50
 800ed48:	20003d54 	.word	0x20003d54
 800ed4c:	e000ed04 	.word	0xe000ed04

0800ed50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ed58:	f7fd ff78 	bl	800cc4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d102      	bne.n	800ed68 <vTaskSuspend+0x18>
 800ed62:	4b3c      	ldr	r3, [pc, #240]	; (800ee54 <vTaskSuspend+0x104>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	e000      	b.n	800ed6a <vTaskSuspend+0x1a>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fd fe01 	bl	800c978 <uxListRemove>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d115      	bne.n	800eda8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed80:	4935      	ldr	r1, [pc, #212]	; (800ee58 <vTaskSuspend+0x108>)
 800ed82:	4613      	mov	r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4413      	add	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	440b      	add	r3, r1
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10a      	bne.n	800eda8 <vTaskSuspend+0x58>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed96:	2201      	movs	r2, #1
 800ed98:	fa02 f303 	lsl.w	r3, r2, r3
 800ed9c:	43da      	mvns	r2, r3
 800ed9e:	4b2f      	ldr	r3, [pc, #188]	; (800ee5c <vTaskSuspend+0x10c>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4013      	ands	r3, r2
 800eda4:	4a2d      	ldr	r2, [pc, #180]	; (800ee5c <vTaskSuspend+0x10c>)
 800eda6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edac:	2b00      	cmp	r3, #0
 800edae:	d004      	beq.n	800edba <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	3318      	adds	r3, #24
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7fd fddf 	bl	800c978 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4619      	mov	r1, r3
 800edc0:	4827      	ldr	r0, [pc, #156]	; (800ee60 <vTaskSuspend+0x110>)
 800edc2:	f7fd fd7c 	bl	800c8be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d103      	bne.n	800edda <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800edda:	f7fd ff65 	bl	800cca8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800edde:	4b21      	ldr	r3, [pc, #132]	; (800ee64 <vTaskSuspend+0x114>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d005      	beq.n	800edf2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ede6:	f7fd ff31 	bl	800cc4c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800edea:	f000 fff5 	bl	800fdd8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800edee:	f7fd ff5b 	bl	800cca8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800edf2:	4b18      	ldr	r3, [pc, #96]	; (800ee54 <vTaskSuspend+0x104>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d126      	bne.n	800ee4a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800edfc:	4b19      	ldr	r3, [pc, #100]	; (800ee64 <vTaskSuspend+0x114>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d016      	beq.n	800ee32 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ee04:	4b18      	ldr	r3, [pc, #96]	; (800ee68 <vTaskSuspend+0x118>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d009      	beq.n	800ee20 <vTaskSuspend+0xd0>
 800ee0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee10:	f383 8811 	msr	BASEPRI, r3
 800ee14:	f3bf 8f6f 	isb	sy
 800ee18:	f3bf 8f4f 	dsb	sy
 800ee1c:	60bb      	str	r3, [r7, #8]
 800ee1e:	e7fe      	b.n	800ee1e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800ee20:	4b12      	ldr	r3, [pc, #72]	; (800ee6c <vTaskSuspend+0x11c>)
 800ee22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee26:	601a      	str	r2, [r3, #0]
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee30:	e00b      	b.n	800ee4a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800ee32:	4b0b      	ldr	r3, [pc, #44]	; (800ee60 <vTaskSuspend+0x110>)
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	4b0e      	ldr	r3, [pc, #56]	; (800ee70 <vTaskSuspend+0x120>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d103      	bne.n	800ee46 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800ee3e:	4b05      	ldr	r3, [pc, #20]	; (800ee54 <vTaskSuspend+0x104>)
 800ee40:	2200      	movs	r2, #0
 800ee42:	601a      	str	r2, [r3, #0]
	}
 800ee44:	e001      	b.n	800ee4a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800ee46:	f000 fbdb 	bl	800f600 <vTaskSwitchContext>
	}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20003c4c 	.word	0x20003c4c
 800ee58:	20003c50 	.word	0x20003c50
 800ee5c:	20003d54 	.word	0x20003d54
 800ee60:	20003d38 	.word	0x20003d38
 800ee64:	20003d58 	.word	0x20003d58
 800ee68:	20003d74 	.word	0x20003d74
 800ee6c:	e000ed04 	.word	0xe000ed04
 800ee70:	20003d4c 	.word	0x20003d4c

0800ee74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ee74:	b480      	push	{r7}
 800ee76:	b087      	sub	sp, #28
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d109      	bne.n	800ee9e <prvTaskIsTaskSuspended+0x2a>
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	e7fe      	b.n	800ee9c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	695b      	ldr	r3, [r3, #20]
 800eea2:	4a0f      	ldr	r2, [pc, #60]	; (800eee0 <prvTaskIsTaskSuspended+0x6c>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d101      	bne.n	800eeac <prvTaskIsTaskSuspended+0x38>
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e000      	b.n	800eeae <prvTaskIsTaskSuspended+0x3a>
 800eeac:	2300      	movs	r3, #0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00f      	beq.n	800eed2 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb6:	4a0b      	ldr	r2, [pc, #44]	; (800eee4 <prvTaskIsTaskSuspended+0x70>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00a      	beq.n	800eed2 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d101      	bne.n	800eec8 <prvTaskIsTaskSuspended+0x54>
 800eec4:	2301      	movs	r3, #1
 800eec6:	e000      	b.n	800eeca <prvTaskIsTaskSuspended+0x56>
 800eec8:	2300      	movs	r3, #0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800eece:	2301      	movs	r3, #1
 800eed0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eed2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800eed4:	4618      	mov	r0, r3
 800eed6:	371c      	adds	r7, #28
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	20003d38 	.word	0x20003d38
 800eee4:	20003d0c 	.word	0x20003d0c

0800eee8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d109      	bne.n	800ef0e <vTaskResume+0x26>
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	60bb      	str	r3, [r7, #8]
 800ef0c:	e7fe      	b.n	800ef0c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d039      	beq.n	800ef88 <vTaskResume+0xa0>
 800ef14:	4b1e      	ldr	r3, [pc, #120]	; (800ef90 <vTaskResume+0xa8>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d034      	beq.n	800ef88 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 800ef1e:	f7fd fe95 	bl	800cc4c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ef22:	68f8      	ldr	r0, [r7, #12]
 800ef24:	f7ff ffa6 	bl	800ee74 <prvTaskIsTaskSuspended>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d02a      	beq.n	800ef84 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	3304      	adds	r3, #4
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fd fd20 	bl	800c978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	409a      	lsls	r2, r3
 800ef40:	4b14      	ldr	r3, [pc, #80]	; (800ef94 <vTaskResume+0xac>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	4a13      	ldr	r2, [pc, #76]	; (800ef94 <vTaskResume+0xac>)
 800ef48:	6013      	str	r3, [r2, #0]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef4e:	4613      	mov	r3, r2
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	4413      	add	r3, r2
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	4a10      	ldr	r2, [pc, #64]	; (800ef98 <vTaskResume+0xb0>)
 800ef58:	441a      	add	r2, r3
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3304      	adds	r3, #4
 800ef5e:	4619      	mov	r1, r3
 800ef60:	4610      	mov	r0, r2
 800ef62:	f7fd fcac 	bl	800c8be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef6a:	4b09      	ldr	r3, [pc, #36]	; (800ef90 <vTaskResume+0xa8>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d307      	bcc.n	800ef84 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ef74:	4b09      	ldr	r3, [pc, #36]	; (800ef9c <vTaskResume+0xb4>)
 800ef76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ef84:	f7fd fe90 	bl	800cca8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef88:	bf00      	nop
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	20003c4c 	.word	0x20003c4c
 800ef94:	20003d54 	.word	0x20003d54
 800ef98:	20003c50 	.word	0x20003c50
 800ef9c:	e000ed04 	.word	0xe000ed04

0800efa0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08a      	sub	sp, #40	; 0x28
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800efa8:	2300      	movs	r3, #0
 800efaa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d109      	bne.n	800efca <xTaskResumeFromISR+0x2a>
 800efb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efba:	f383 8811 	msr	BASEPRI, r3
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	61bb      	str	r3, [r7, #24]
 800efc8:	e7fe      	b.n	800efc8 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efca:	f7fd ff19 	bl	800ce00 <vPortValidateInterruptPriority>
	__asm volatile
 800efce:	f3ef 8211 	mrs	r2, BASEPRI
 800efd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd6:	f383 8811 	msr	BASEPRI, r3
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	617a      	str	r2, [r7, #20]
 800efe4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800efe6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efe8:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800efea:	6a38      	ldr	r0, [r7, #32]
 800efec:	f7ff ff42 	bl	800ee74 <prvTaskIsTaskSuspended>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d02f      	beq.n	800f056 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eff6:	4b1d      	ldr	r3, [pc, #116]	; (800f06c <xTaskResumeFromISR+0xcc>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d125      	bne.n	800f04a <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800effe:	6a3b      	ldr	r3, [r7, #32]
 800f000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f002:	4b1b      	ldr	r3, [pc, #108]	; (800f070 <xTaskResumeFromISR+0xd0>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f008:	429a      	cmp	r2, r3
 800f00a:	d301      	bcc.n	800f010 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 800f00c:	2301      	movs	r3, #1
 800f00e:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	3304      	adds	r3, #4
 800f014:	4618      	mov	r0, r3
 800f016:	f7fd fcaf 	bl	800c978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f01a:	6a3b      	ldr	r3, [r7, #32]
 800f01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f01e:	2201      	movs	r2, #1
 800f020:	409a      	lsls	r2, r3
 800f022:	4b14      	ldr	r3, [pc, #80]	; (800f074 <xTaskResumeFromISR+0xd4>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4313      	orrs	r3, r2
 800f028:	4a12      	ldr	r2, [pc, #72]	; (800f074 <xTaskResumeFromISR+0xd4>)
 800f02a:	6013      	str	r3, [r2, #0]
 800f02c:	6a3b      	ldr	r3, [r7, #32]
 800f02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f030:	4613      	mov	r3, r2
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	4413      	add	r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	4a0f      	ldr	r2, [pc, #60]	; (800f078 <xTaskResumeFromISR+0xd8>)
 800f03a:	441a      	add	r2, r3
 800f03c:	6a3b      	ldr	r3, [r7, #32]
 800f03e:	3304      	adds	r3, #4
 800f040:	4619      	mov	r1, r3
 800f042:	4610      	mov	r0, r2
 800f044:	f7fd fc3b 	bl	800c8be <vListInsertEnd>
 800f048:	e005      	b.n	800f056 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f04a:	6a3b      	ldr	r3, [r7, #32]
 800f04c:	3318      	adds	r3, #24
 800f04e:	4619      	mov	r1, r3
 800f050:	480a      	ldr	r0, [pc, #40]	; (800f07c <xTaskResumeFromISR+0xdc>)
 800f052:	f7fd fc34 	bl	800c8be <vListInsertEnd>
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f062:	4618      	mov	r0, r3
 800f064:	3728      	adds	r7, #40	; 0x28
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	20003d74 	.word	0x20003d74
 800f070:	20003c4c 	.word	0x20003c4c
 800f074:	20003d54 	.word	0x20003d54
 800f078:	20003c50 	.word	0x20003c50
 800f07c:	20003d0c 	.word	0x20003d0c

0800f080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f086:	2300      	movs	r3, #0
 800f088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f08a:	2300      	movs	r3, #0
 800f08c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f08e:	463a      	mov	r2, r7
 800f090:	1d39      	adds	r1, r7, #4
 800f092:	f107 0308 	add.w	r3, r7, #8
 800f096:	4618      	mov	r0, r3
 800f098:	f003 f882 	bl	80121a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	9202      	str	r2, [sp, #8]
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	460a      	mov	r2, r1
 800f0ae:	491e      	ldr	r1, [pc, #120]	; (800f128 <vTaskStartScheduler+0xa8>)
 800f0b0:	481e      	ldr	r0, [pc, #120]	; (800f12c <vTaskStartScheduler+0xac>)
 800f0b2:	f7ff faa9 	bl	800e608 <xTaskCreateStatic>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	4b1d      	ldr	r3, [pc, #116]	; (800f130 <vTaskStartScheduler+0xb0>)
 800f0ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0bc:	4b1c      	ldr	r3, [pc, #112]	; (800f130 <vTaskStartScheduler+0xb0>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d002      	beq.n	800f0ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	617b      	str	r3, [r7, #20]
 800f0c8:	e001      	b.n	800f0ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d117      	bne.n	800f104 <vTaskStartScheduler+0x84>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	f383 8811 	msr	BASEPRI, r3
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f0e6:	4b13      	ldr	r3, [pc, #76]	; (800f134 <vTaskStartScheduler+0xb4>)
 800f0e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f0ee:	4b12      	ldr	r3, [pc, #72]	; (800f138 <vTaskStartScheduler+0xb8>)
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f0f4:	4b11      	ldr	r3, [pc, #68]	; (800f13c <vTaskStartScheduler+0xbc>)
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f0fa:	f003 fb13 	bl	8012724 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f0fe:	f7fd fcec 	bl	800cada <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f102:	e00d      	b.n	800f120 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f10a:	d109      	bne.n	800f120 <vTaskStartScheduler+0xa0>
 800f10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	e7fe      	b.n	800f11e <vTaskStartScheduler+0x9e>
}
 800f120:	bf00      	nop
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	08014a2c 	.word	0x08014a2c
 800f12c:	0800facf 	.word	0x0800facf
 800f130:	20003d70 	.word	0x20003d70
 800f134:	20003d6c 	.word	0x20003d6c
 800f138:	20003d58 	.word	0x20003d58
 800f13c:	20003d50 	.word	0x20003d50

0800f140 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 800f158:	4b04      	ldr	r3, [pc, #16]	; (800f16c <vTaskEndScheduler+0x2c>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 800f15e:	f7fd fd5b 	bl	800cc18 <vPortEndScheduler>
}
 800f162:	bf00      	nop
 800f164:	3708      	adds	r7, #8
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	20003d58 	.word	0x20003d58

0800f170 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f170:	b480      	push	{r7}
 800f172:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f174:	4b04      	ldr	r3, [pc, #16]	; (800f188 <vTaskSuspendAll+0x18>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	3301      	adds	r3, #1
 800f17a:	4a03      	ldr	r2, [pc, #12]	; (800f188 <vTaskSuspendAll+0x18>)
 800f17c:	6013      	str	r3, [r2, #0]
}
 800f17e:	bf00      	nop
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	20003d74 	.word	0x20003d74

0800f18c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f196:	2300      	movs	r3, #0
 800f198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f19a:	4b41      	ldr	r3, [pc, #260]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d109      	bne.n	800f1b6 <xTaskResumeAll+0x2a>
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	603b      	str	r3, [r7, #0]
 800f1b4:	e7fe      	b.n	800f1b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1b6:	f7fd fd49 	bl	800cc4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1ba:	4b39      	ldr	r3, [pc, #228]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	4a37      	ldr	r2, [pc, #220]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f1c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1c4:	4b36      	ldr	r3, [pc, #216]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d161      	bne.n	800f290 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1cc:	4b35      	ldr	r3, [pc, #212]	; (800f2a4 <xTaskResumeAll+0x118>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d05d      	beq.n	800f290 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1d4:	e02e      	b.n	800f234 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f1d6:	4b34      	ldr	r3, [pc, #208]	; (800f2a8 <xTaskResumeAll+0x11c>)
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3318      	adds	r3, #24
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fd fbc8 	bl	800c978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fd fbc3 	bl	800c978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	409a      	lsls	r2, r3
 800f1fa:	4b2c      	ldr	r3, [pc, #176]	; (800f2ac <xTaskResumeAll+0x120>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4313      	orrs	r3, r2
 800f200:	4a2a      	ldr	r2, [pc, #168]	; (800f2ac <xTaskResumeAll+0x120>)
 800f202:	6013      	str	r3, [r2, #0]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f208:	4613      	mov	r3, r2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	4413      	add	r3, r2
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	4a27      	ldr	r2, [pc, #156]	; (800f2b0 <xTaskResumeAll+0x124>)
 800f212:	441a      	add	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	3304      	adds	r3, #4
 800f218:	4619      	mov	r1, r3
 800f21a:	4610      	mov	r0, r2
 800f21c:	f7fd fb4f 	bl	800c8be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f224:	4b23      	ldr	r3, [pc, #140]	; (800f2b4 <xTaskResumeAll+0x128>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d302      	bcc.n	800f234 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800f22e:	4b22      	ldr	r3, [pc, #136]	; (800f2b8 <xTaskResumeAll+0x12c>)
 800f230:	2201      	movs	r2, #1
 800f232:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f234:	4b1c      	ldr	r3, [pc, #112]	; (800f2a8 <xTaskResumeAll+0x11c>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1cc      	bne.n	800f1d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d001      	beq.n	800f246 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f242:	f000 fdc9 	bl	800fdd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f246:	4b1d      	ldr	r3, [pc, #116]	; (800f2bc <xTaskResumeAll+0x130>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d010      	beq.n	800f274 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f252:	f000 f919 	bl	800f488 <xTaskIncrementTick>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800f25c:	4b16      	ldr	r3, [pc, #88]	; (800f2b8 <xTaskResumeAll+0x12c>)
 800f25e:	2201      	movs	r2, #1
 800f260:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	3b01      	subs	r3, #1
 800f266:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1f1      	bne.n	800f252 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800f26e:	4b13      	ldr	r3, [pc, #76]	; (800f2bc <xTaskResumeAll+0x130>)
 800f270:	2200      	movs	r2, #0
 800f272:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f274:	4b10      	ldr	r3, [pc, #64]	; (800f2b8 <xTaskResumeAll+0x12c>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d009      	beq.n	800f290 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f27c:	2301      	movs	r3, #1
 800f27e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f280:	4b0f      	ldr	r3, [pc, #60]	; (800f2c0 <xTaskResumeAll+0x134>)
 800f282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f286:	601a      	str	r2, [r3, #0]
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f290:	f7fd fd0a 	bl	800cca8 <vPortExitCritical>

	return xAlreadyYielded;
 800f294:	68bb      	ldr	r3, [r7, #8]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	20003d74 	.word	0x20003d74
 800f2a4:	20003d4c 	.word	0x20003d4c
 800f2a8:	20003d0c 	.word	0x20003d0c
 800f2ac:	20003d54 	.word	0x20003d54
 800f2b0:	20003c50 	.word	0x20003c50
 800f2b4:	20003c4c 	.word	0x20003c4c
 800f2b8:	20003d60 	.word	0x20003d60
 800f2bc:	20003d5c 	.word	0x20003d5c
 800f2c0:	e000ed04 	.word	0xe000ed04

0800f2c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2ca:	4b05      	ldr	r3, [pc, #20]	; (800f2e0 <xTaskGetTickCount+0x1c>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2d0:	687b      	ldr	r3, [r7, #4]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	20003d50 	.word	0x20003d50

0800f2e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2ea:	f7fd fd89 	bl	800ce00 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f2f2:	4b04      	ldr	r3, [pc, #16]	; (800f304 <xTaskGetTickCountFromISR+0x20>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2f8:	683b      	ldr	r3, [r7, #0]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	20003d50 	.word	0x20003d50

0800f308 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800f308:	b480      	push	{r7}
 800f30a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800f30c:	4b03      	ldr	r3, [pc, #12]	; (800f31c <uxTaskGetNumberOfTasks+0x14>)
 800f30e:	681b      	ldr	r3, [r3, #0]
}
 800f310:	4618      	mov	r0, r3
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	20003d4c 	.word	0x20003d4c

0800f320 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800f320:	b480      	push	{r7}
 800f322:	b085      	sub	sp, #20
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d102      	bne.n	800f334 <pcTaskGetName+0x14>
 800f32e:	4b0d      	ldr	r3, [pc, #52]	; (800f364 <pcTaskGetName+0x44>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	e000      	b.n	800f336 <pcTaskGetName+0x16>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d109      	bne.n	800f352 <pcTaskGetName+0x32>
 800f33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	60bb      	str	r3, [r7, #8]
 800f350:	e7fe      	b.n	800f350 <pcTaskGetName+0x30>
	return &( pxTCB->pcTaskName[ 0 ] );
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	3334      	adds	r3, #52	; 0x34
}
 800f356:	4618      	mov	r0, r3
 800f358:	3714      	adds	r7, #20
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	20003c4c 	.word	0x20003c4c

0800f368 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f374:	2300      	movs	r3, #0
 800f376:	617b      	str	r3, [r7, #20]
 800f378:	2307      	movs	r3, #7
 800f37a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f37c:	f7ff fef8 	bl	800f170 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f380:	4b3b      	ldr	r3, [pc, #236]	; (800f470 <uxTaskGetSystemState+0x108>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	429a      	cmp	r2, r3
 800f388:	d36a      	bcc.n	800f460 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	4613      	mov	r3, r2
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	4413      	add	r3, r2
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	461a      	mov	r2, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	1898      	adds	r0, r3, r2
 800f3a0:	693a      	ldr	r2, [r7, #16]
 800f3a2:	4613      	mov	r3, r2
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	4413      	add	r3, r2
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4a32      	ldr	r2, [pc, #200]	; (800f474 <uxTaskGetSystemState+0x10c>)
 800f3ac:	4413      	add	r3, r2
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	f000 fc75 	bl	800fca0 <prvListTasksWithinSingleList>
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1e2      	bne.n	800f38a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	00db      	lsls	r3, r3, #3
 800f3ca:	4413      	add	r3, r2
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	1898      	adds	r0, r3, r2
 800f3d4:	4b28      	ldr	r3, [pc, #160]	; (800f478 <uxTaskGetSystemState+0x110>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2202      	movs	r2, #2
 800f3da:	4619      	mov	r1, r3
 800f3dc:	f000 fc60 	bl	800fca0 <prvListTasksWithinSingleList>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f3e8:	697a      	ldr	r2, [r7, #20]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	4413      	add	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	1898      	adds	r0, r3, r2
 800f3f8:	4b20      	ldr	r3, [pc, #128]	; (800f47c <uxTaskGetSystemState+0x114>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	4619      	mov	r1, r3
 800f400:	f000 fc4e 	bl	800fca0 <prvListTasksWithinSingleList>
 800f404:	4602      	mov	r2, r0
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	4413      	add	r3, r2
 800f40a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	4613      	mov	r3, r2
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	4413      	add	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	461a      	mov	r2, r3
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	4413      	add	r3, r2
 800f41c:	2204      	movs	r2, #4
 800f41e:	4918      	ldr	r1, [pc, #96]	; (800f480 <uxTaskGetSystemState+0x118>)
 800f420:	4618      	mov	r0, r3
 800f422:	f000 fc3d 	bl	800fca0 <prvListTasksWithinSingleList>
 800f426:	4602      	mov	r2, r0
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	4413      	add	r3, r2
 800f42c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	4613      	mov	r3, r2
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	4413      	add	r3, r2
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	461a      	mov	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	4413      	add	r3, r2
 800f43e:	2203      	movs	r2, #3
 800f440:	4910      	ldr	r1, [pc, #64]	; (800f484 <uxTaskGetSystemState+0x11c>)
 800f442:	4618      	mov	r0, r3
 800f444:	f000 fc2c 	bl	800fca0 <prvListTasksWithinSingleList>
 800f448:	4602      	mov	r2, r0
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	4413      	add	r3, r2
 800f44e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d004      	beq.n	800f460 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f456:	f003 f93f 	bl	80126d8 <vGetTimerForRunTimeStats>
 800f45a:	4602      	mov	r2, r0
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f460:	f7ff fe94 	bl	800f18c <xTaskResumeAll>

		return uxTask;
 800f464:	697b      	ldr	r3, [r7, #20]
	}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	20003d4c 	.word	0x20003d4c
 800f474:	20003c50 	.word	0x20003c50
 800f478:	20003d04 	.word	0x20003d04
 800f47c:	20003d08 	.word	0x20003d08
 800f480:	20003d20 	.word	0x20003d20
 800f484:	20003d38 	.word	0x20003d38

0800f488 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f48e:	2300      	movs	r3, #0
 800f490:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f492:	4b50      	ldr	r3, [pc, #320]	; (800f5d4 <xTaskIncrementTick+0x14c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	f040 808c 	bne.w	800f5b4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f49c:	4b4e      	ldr	r3, [pc, #312]	; (800f5d8 <xTaskIncrementTick+0x150>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f4a4:	4a4c      	ldr	r2, [pc, #304]	; (800f5d8 <xTaskIncrementTick+0x150>)
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d11f      	bne.n	800f4f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f4b0:	4b4a      	ldr	r3, [pc, #296]	; (800f5dc <xTaskIncrementTick+0x154>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d009      	beq.n	800f4ce <xTaskIncrementTick+0x46>
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	603b      	str	r3, [r7, #0]
 800f4cc:	e7fe      	b.n	800f4cc <xTaskIncrementTick+0x44>
 800f4ce:	4b43      	ldr	r3, [pc, #268]	; (800f5dc <xTaskIncrementTick+0x154>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	60fb      	str	r3, [r7, #12]
 800f4d4:	4b42      	ldr	r3, [pc, #264]	; (800f5e0 <xTaskIncrementTick+0x158>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a40      	ldr	r2, [pc, #256]	; (800f5dc <xTaskIncrementTick+0x154>)
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	4a40      	ldr	r2, [pc, #256]	; (800f5e0 <xTaskIncrementTick+0x158>)
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6013      	str	r3, [r2, #0]
 800f4e2:	4b40      	ldr	r3, [pc, #256]	; (800f5e4 <xTaskIncrementTick+0x15c>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	4a3e      	ldr	r2, [pc, #248]	; (800f5e4 <xTaskIncrementTick+0x15c>)
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	f000 fc74 	bl	800fdd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f4f0:	4b3d      	ldr	r3, [pc, #244]	; (800f5e8 <xTaskIncrementTick+0x160>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	693a      	ldr	r2, [r7, #16]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d34d      	bcc.n	800f596 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4fa:	4b38      	ldr	r3, [pc, #224]	; (800f5dc <xTaskIncrementTick+0x154>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d101      	bne.n	800f508 <xTaskIncrementTick+0x80>
 800f504:	2301      	movs	r3, #1
 800f506:	e000      	b.n	800f50a <xTaskIncrementTick+0x82>
 800f508:	2300      	movs	r3, #0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d004      	beq.n	800f518 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f50e:	4b36      	ldr	r3, [pc, #216]	; (800f5e8 <xTaskIncrementTick+0x160>)
 800f510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f514:	601a      	str	r2, [r3, #0]
					break;
 800f516:	e03e      	b.n	800f596 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f518:	4b30      	ldr	r3, [pc, #192]	; (800f5dc <xTaskIncrementTick+0x154>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f528:	693a      	ldr	r2, [r7, #16]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d203      	bcs.n	800f538 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f530:	4a2d      	ldr	r2, [pc, #180]	; (800f5e8 <xTaskIncrementTick+0x160>)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6013      	str	r3, [r2, #0]
						break;
 800f536:	e02e      	b.n	800f596 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	3304      	adds	r3, #4
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fd fa1b 	bl	800c978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f546:	2b00      	cmp	r3, #0
 800f548:	d004      	beq.n	800f554 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	3318      	adds	r3, #24
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fd fa12 	bl	800c978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f558:	2201      	movs	r2, #1
 800f55a:	409a      	lsls	r2, r3
 800f55c:	4b23      	ldr	r3, [pc, #140]	; (800f5ec <xTaskIncrementTick+0x164>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4313      	orrs	r3, r2
 800f562:	4a22      	ldr	r2, [pc, #136]	; (800f5ec <xTaskIncrementTick+0x164>)
 800f564:	6013      	str	r3, [r2, #0]
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f56a:	4613      	mov	r3, r2
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	4413      	add	r3, r2
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	4a1f      	ldr	r2, [pc, #124]	; (800f5f0 <xTaskIncrementTick+0x168>)
 800f574:	441a      	add	r2, r3
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	3304      	adds	r3, #4
 800f57a:	4619      	mov	r1, r3
 800f57c:	4610      	mov	r0, r2
 800f57e:	f7fd f99e 	bl	800c8be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f586:	4b1b      	ldr	r3, [pc, #108]	; (800f5f4 <xTaskIncrementTick+0x16c>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d3b4      	bcc.n	800f4fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f590:	2301      	movs	r3, #1
 800f592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f594:	e7b1      	b.n	800f4fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f596:	4b17      	ldr	r3, [pc, #92]	; (800f5f4 <xTaskIncrementTick+0x16c>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f59c:	4914      	ldr	r1, [pc, #80]	; (800f5f0 <xTaskIncrementTick+0x168>)
 800f59e:	4613      	mov	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4413      	add	r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	440b      	add	r3, r1
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d907      	bls.n	800f5be <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	617b      	str	r3, [r7, #20]
 800f5b2:	e004      	b.n	800f5be <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f5b4:	4b10      	ldr	r3, [pc, #64]	; (800f5f8 <xTaskIncrementTick+0x170>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	4a0f      	ldr	r2, [pc, #60]	; (800f5f8 <xTaskIncrementTick+0x170>)
 800f5bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f5be:	4b0f      	ldr	r3, [pc, #60]	; (800f5fc <xTaskIncrementTick+0x174>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f5ca:	697b      	ldr	r3, [r7, #20]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3718      	adds	r7, #24
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	20003d74 	.word	0x20003d74
 800f5d8:	20003d50 	.word	0x20003d50
 800f5dc:	20003d04 	.word	0x20003d04
 800f5e0:	20003d08 	.word	0x20003d08
 800f5e4:	20003d64 	.word	0x20003d64
 800f5e8:	20003d6c 	.word	0x20003d6c
 800f5ec:	20003d54 	.word	0x20003d54
 800f5f0:	20003c50 	.word	0x20003c50
 800f5f4:	20003c4c 	.word	0x20003c4c
 800f5f8:	20003d5c 	.word	0x20003d5c
 800f5fc:	20003d60 	.word	0x20003d60

0800f600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f606:	4b32      	ldr	r3, [pc, #200]	; (800f6d0 <vTaskSwitchContext+0xd0>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f60e:	4b31      	ldr	r3, [pc, #196]	; (800f6d4 <vTaskSwitchContext+0xd4>)
 800f610:	2201      	movs	r2, #1
 800f612:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f614:	e057      	b.n	800f6c6 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800f616:	4b2f      	ldr	r3, [pc, #188]	; (800f6d4 <vTaskSwitchContext+0xd4>)
 800f618:	2200      	movs	r2, #0
 800f61a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f61c:	f003 f85c 	bl	80126d8 <vGetTimerForRunTimeStats>
 800f620:	4602      	mov	r2, r0
 800f622:	4b2d      	ldr	r3, [pc, #180]	; (800f6d8 <vTaskSwitchContext+0xd8>)
 800f624:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f626:	4b2c      	ldr	r3, [pc, #176]	; (800f6d8 <vTaskSwitchContext+0xd8>)
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	4b2c      	ldr	r3, [pc, #176]	; (800f6dc <vTaskSwitchContext+0xdc>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d909      	bls.n	800f646 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f632:	4b2b      	ldr	r3, [pc, #172]	; (800f6e0 <vTaskSwitchContext+0xe0>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f638:	4a27      	ldr	r2, [pc, #156]	; (800f6d8 <vTaskSwitchContext+0xd8>)
 800f63a:	6810      	ldr	r0, [r2, #0]
 800f63c:	4a27      	ldr	r2, [pc, #156]	; (800f6dc <vTaskSwitchContext+0xdc>)
 800f63e:	6812      	ldr	r2, [r2, #0]
 800f640:	1a82      	subs	r2, r0, r2
 800f642:	440a      	add	r2, r1
 800f644:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f646:	4b24      	ldr	r3, [pc, #144]	; (800f6d8 <vTaskSwitchContext+0xd8>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a24      	ldr	r2, [pc, #144]	; (800f6dc <vTaskSwitchContext+0xdc>)
 800f64c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f64e:	4b25      	ldr	r3, [pc, #148]	; (800f6e4 <vTaskSwitchContext+0xe4>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	fab3 f383 	clz	r3, r3
 800f65a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f65c:	7afb      	ldrb	r3, [r7, #11]
 800f65e:	f1c3 031f 	rsb	r3, r3, #31
 800f662:	617b      	str	r3, [r7, #20]
 800f664:	4920      	ldr	r1, [pc, #128]	; (800f6e8 <vTaskSwitchContext+0xe8>)
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	4613      	mov	r3, r2
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	4413      	add	r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	440b      	add	r3, r1
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <vTaskSwitchContext+0x8c>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	607b      	str	r3, [r7, #4]
 800f68a:	e7fe      	b.n	800f68a <vTaskSwitchContext+0x8a>
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	4613      	mov	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4a14      	ldr	r2, [pc, #80]	; (800f6e8 <vTaskSwitchContext+0xe8>)
 800f698:	4413      	add	r3, r2
 800f69a:	613b      	str	r3, [r7, #16]
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	605a      	str	r2, [r3, #4]
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	685a      	ldr	r2, [r3, #4]
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	3308      	adds	r3, #8
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d104      	bne.n	800f6bc <vTaskSwitchContext+0xbc>
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	685a      	ldr	r2, [r3, #4]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	605a      	str	r2, [r3, #4]
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	4a07      	ldr	r2, [pc, #28]	; (800f6e0 <vTaskSwitchContext+0xe0>)
 800f6c4:	6013      	str	r3, [r2, #0]
}
 800f6c6:	bf00      	nop
 800f6c8:	3718      	adds	r7, #24
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	20003d74 	.word	0x20003d74
 800f6d4:	20003d60 	.word	0x20003d60
 800f6d8:	20003d7c 	.word	0x20003d7c
 800f6dc:	20003d78 	.word	0x20003d78
 800f6e0:	20003c4c 	.word	0x20003c4c
 800f6e4:	20003d54 	.word	0x20003d54
 800f6e8:	20003c50 	.word	0x20003c50

0800f6ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d109      	bne.n	800f710 <vTaskPlaceOnEventList+0x24>
 800f6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f700:	f383 8811 	msr	BASEPRI, r3
 800f704:	f3bf 8f6f 	isb	sy
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	e7fe      	b.n	800f70e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f710:	4b07      	ldr	r3, [pc, #28]	; (800f730 <vTaskPlaceOnEventList+0x44>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	3318      	adds	r3, #24
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7fd f8f4 	bl	800c906 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f71e:	2101      	movs	r1, #1
 800f720:	6838      	ldr	r0, [r7, #0]
 800f722:	f001 f9d3 	bl	8010acc <prvAddCurrentTaskToDelayedList>
}
 800f726:	bf00      	nop
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	20003c4c 	.word	0x20003c4c

0800f734 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d109      	bne.n	800f75a <vTaskPlaceOnUnorderedEventList+0x26>
 800f746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	617b      	str	r3, [r7, #20]
 800f758:	e7fe      	b.n	800f758 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f75a:	4b11      	ldr	r3, [pc, #68]	; (800f7a0 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d109      	bne.n	800f776 <vTaskPlaceOnUnorderedEventList+0x42>
 800f762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f766:	f383 8811 	msr	BASEPRI, r3
 800f76a:	f3bf 8f6f 	isb	sy
 800f76e:	f3bf 8f4f 	dsb	sy
 800f772:	613b      	str	r3, [r7, #16]
 800f774:	e7fe      	b.n	800f774 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f776:	4b0b      	ldr	r3, [pc, #44]	; (800f7a4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	68ba      	ldr	r2, [r7, #8]
 800f77c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f780:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f782:	4b08      	ldr	r3, [pc, #32]	; (800f7a4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	3318      	adds	r3, #24
 800f788:	4619      	mov	r1, r3
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f7fd f897 	bl	800c8be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f790:	2101      	movs	r1, #1
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f001 f99a 	bl	8010acc <prvAddCurrentTaskToDelayedList>
}
 800f798:	bf00      	nop
 800f79a:	3718      	adds	r7, #24
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	20003d74 	.word	0x20003d74
 800f7a4:	20003c4c 	.word	0x20003c4c

0800f7a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d109      	bne.n	800f7d2 <xTaskRemoveFromEventList+0x2a>
 800f7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c2:	f383 8811 	msr	BASEPRI, r3
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	60fb      	str	r3, [r7, #12]
 800f7d0:	e7fe      	b.n	800f7d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	3318      	adds	r3, #24
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fd f8ce 	bl	800c978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7dc:	4b1d      	ldr	r3, [pc, #116]	; (800f854 <xTaskRemoveFromEventList+0xac>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d11c      	bne.n	800f81e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fd f8c5 	bl	800c978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	409a      	lsls	r2, r3
 800f7f6:	4b18      	ldr	r3, [pc, #96]	; (800f858 <xTaskRemoveFromEventList+0xb0>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	4a16      	ldr	r2, [pc, #88]	; (800f858 <xTaskRemoveFromEventList+0xb0>)
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f804:	4613      	mov	r3, r2
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	4a13      	ldr	r2, [pc, #76]	; (800f85c <xTaskRemoveFromEventList+0xb4>)
 800f80e:	441a      	add	r2, r3
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	3304      	adds	r3, #4
 800f814:	4619      	mov	r1, r3
 800f816:	4610      	mov	r0, r2
 800f818:	f7fd f851 	bl	800c8be <vListInsertEnd>
 800f81c:	e005      	b.n	800f82a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	3318      	adds	r3, #24
 800f822:	4619      	mov	r1, r3
 800f824:	480e      	ldr	r0, [pc, #56]	; (800f860 <xTaskRemoveFromEventList+0xb8>)
 800f826:	f7fd f84a 	bl	800c8be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f82e:	4b0d      	ldr	r3, [pc, #52]	; (800f864 <xTaskRemoveFromEventList+0xbc>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f834:	429a      	cmp	r2, r3
 800f836:	d905      	bls.n	800f844 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f838:	2301      	movs	r3, #1
 800f83a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f83c:	4b0a      	ldr	r3, [pc, #40]	; (800f868 <xTaskRemoveFromEventList+0xc0>)
 800f83e:	2201      	movs	r2, #1
 800f840:	601a      	str	r2, [r3, #0]
 800f842:	e001      	b.n	800f848 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800f844:	2300      	movs	r3, #0
 800f846:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800f848:	697b      	ldr	r3, [r7, #20]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3718      	adds	r7, #24
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	20003d74 	.word	0x20003d74
 800f858:	20003d54 	.word	0x20003d54
 800f85c:	20003c50 	.word	0x20003c50
 800f860:	20003d0c 	.word	0x20003d0c
 800f864:	20003c4c 	.word	0x20003c4c
 800f868:	20003d60 	.word	0x20003d60

0800f86c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f876:	4b28      	ldr	r3, [pc, #160]	; (800f918 <vTaskRemoveFromUnorderedEventList+0xac>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d109      	bne.n	800f892 <vTaskRemoveFromUnorderedEventList+0x26>
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	613b      	str	r3, [r7, #16]
 800f890:	e7fe      	b.n	800f890 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d109      	bne.n	800f8bc <vTaskRemoveFromUnorderedEventList+0x50>
 800f8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ac:	f383 8811 	msr	BASEPRI, r3
 800f8b0:	f3bf 8f6f 	isb	sy
 800f8b4:	f3bf 8f4f 	dsb	sy
 800f8b8:	60fb      	str	r3, [r7, #12]
 800f8ba:	e7fe      	b.n	800f8ba <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f7fd f85b 	bl	800c978 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fd f856 	bl	800c978 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	409a      	lsls	r2, r3
 800f8d4:	4b11      	ldr	r3, [pc, #68]	; (800f91c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	4a10      	ldr	r2, [pc, #64]	; (800f91c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800f8dc:	6013      	str	r3, [r2, #0]
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	4413      	add	r3, r2
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	4a0d      	ldr	r2, [pc, #52]	; (800f920 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f8ec:	441a      	add	r2, r3
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	4610      	mov	r0, r2
 800f8f6:	f7fc ffe2 	bl	800c8be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8fe:	4b09      	ldr	r3, [pc, #36]	; (800f924 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f904:	429a      	cmp	r2, r3
 800f906:	d902      	bls.n	800f90e <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f908:	4b07      	ldr	r3, [pc, #28]	; (800f928 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f90a:	2201      	movs	r2, #1
 800f90c:	601a      	str	r2, [r3, #0]
	}
}
 800f90e:	bf00      	nop
 800f910:	3718      	adds	r7, #24
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	20003d74 	.word	0x20003d74
 800f91c:	20003d54 	.word	0x20003d54
 800f920:	20003c50 	.word	0x20003c50
 800f924:	20003c4c 	.word	0x20003c4c
 800f928:	20003d60 	.word	0x20003d60

0800f92c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d109      	bne.n	800f94e <vTaskSetTimeOutState+0x22>
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	60fb      	str	r3, [r7, #12]
 800f94c:	e7fe      	b.n	800f94c <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 800f94e:	f7fd f97d 	bl	800cc4c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f952:	4b07      	ldr	r3, [pc, #28]	; (800f970 <vTaskSetTimeOutState+0x44>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f95a:	4b06      	ldr	r3, [pc, #24]	; (800f974 <vTaskSetTimeOutState+0x48>)
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f962:	f7fd f9a1 	bl	800cca8 <vPortExitCritical>
}
 800f966:	bf00      	nop
 800f968:	3710      	adds	r7, #16
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	20003d64 	.word	0x20003d64
 800f974:	20003d50 	.word	0x20003d50

0800f978 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f980:	4b06      	ldr	r3, [pc, #24]	; (800f99c <vTaskInternalSetTimeOutState+0x24>)
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f988:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <vTaskInternalSetTimeOutState+0x28>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	605a      	str	r2, [r3, #4]
}
 800f990:	bf00      	nop
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	20003d64 	.word	0x20003d64
 800f9a0:	20003d50 	.word	0x20003d50

0800f9a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d109      	bne.n	800f9c8 <xTaskCheckForTimeOut+0x24>
 800f9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	613b      	str	r3, [r7, #16]
 800f9c6:	e7fe      	b.n	800f9c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d109      	bne.n	800f9e2 <xTaskCheckForTimeOut+0x3e>
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	60fb      	str	r3, [r7, #12]
 800f9e0:	e7fe      	b.n	800f9e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f9e2:	f7fd f933 	bl	800cc4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f9e6:	4b1d      	ldr	r3, [pc, #116]	; (800fa5c <xTaskCheckForTimeOut+0xb8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	69ba      	ldr	r2, [r7, #24]
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9fe:	d102      	bne.n	800fa06 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa00:	2300      	movs	r3, #0
 800fa02:	61fb      	str	r3, [r7, #28]
 800fa04:	e023      	b.n	800fa4e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	4b15      	ldr	r3, [pc, #84]	; (800fa60 <xTaskCheckForTimeOut+0xbc>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d007      	beq.n	800fa22 <xTaskCheckForTimeOut+0x7e>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	685a      	ldr	r2, [r3, #4]
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d802      	bhi.n	800fa22 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	61fb      	str	r3, [r7, #28]
 800fa20:	e015      	b.n	800fa4e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d90b      	bls.n	800fa44 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	1ad2      	subs	r2, r2, r3
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff ff9d 	bl	800f978 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	61fb      	str	r3, [r7, #28]
 800fa42:	e004      	b.n	800fa4e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	2200      	movs	r2, #0
 800fa48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa4e:	f7fd f92b 	bl	800cca8 <vPortExitCritical>

	return xReturn;
 800fa52:	69fb      	ldr	r3, [r7, #28]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3720      	adds	r7, #32
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	20003d50 	.word	0x20003d50
 800fa60:	20003d64 	.word	0x20003d64

0800fa64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa64:	b480      	push	{r7}
 800fa66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa68:	4b03      	ldr	r3, [pc, #12]	; (800fa78 <vTaskMissedYield+0x14>)
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	601a      	str	r2, [r3, #0]
}
 800fa6e:	bf00      	nop
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr
 800fa78:	20003d60 	.word	0x20003d60

0800fa7c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b085      	sub	sp, #20
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d005      	beq.n	800fa96 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa92:	60fb      	str	r3, [r7, #12]
 800fa94:	e001      	b.n	800fa9a <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 800fa96:	2300      	movs	r3, #0
 800fa98:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
	}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d004      	beq.n	800fac2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 800fac2:	bf00      	nop
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b082      	sub	sp, #8
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fad6:	f000 f851 	bl	800fb7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fada:	4b06      	ldr	r3, [pc, #24]	; (800faf4 <prvIdleTask+0x26>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d9f9      	bls.n	800fad6 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fae2:	4b05      	ldr	r3, [pc, #20]	; (800faf8 <prvIdleTask+0x2a>)
 800fae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800faf2:	e7f0      	b.n	800fad6 <prvIdleTask+0x8>
 800faf4:	20003c50 	.word	0x20003c50
 800faf8:	e000ed04 	.word	0xe000ed04

0800fafc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb02:	2300      	movs	r3, #0
 800fb04:	607b      	str	r3, [r7, #4]
 800fb06:	e00c      	b.n	800fb22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4413      	add	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	4a12      	ldr	r2, [pc, #72]	; (800fb5c <prvInitialiseTaskLists+0x60>)
 800fb14:	4413      	add	r3, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fc fea4 	bl	800c864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	607b      	str	r3, [r7, #4]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b06      	cmp	r3, #6
 800fb26:	d9ef      	bls.n	800fb08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fb28:	480d      	ldr	r0, [pc, #52]	; (800fb60 <prvInitialiseTaskLists+0x64>)
 800fb2a:	f7fc fe9b 	bl	800c864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb2e:	480d      	ldr	r0, [pc, #52]	; (800fb64 <prvInitialiseTaskLists+0x68>)
 800fb30:	f7fc fe98 	bl	800c864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb34:	480c      	ldr	r0, [pc, #48]	; (800fb68 <prvInitialiseTaskLists+0x6c>)
 800fb36:	f7fc fe95 	bl	800c864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb3a:	480c      	ldr	r0, [pc, #48]	; (800fb6c <prvInitialiseTaskLists+0x70>)
 800fb3c:	f7fc fe92 	bl	800c864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb40:	480b      	ldr	r0, [pc, #44]	; (800fb70 <prvInitialiseTaskLists+0x74>)
 800fb42:	f7fc fe8f 	bl	800c864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb46:	4b0b      	ldr	r3, [pc, #44]	; (800fb74 <prvInitialiseTaskLists+0x78>)
 800fb48:	4a05      	ldr	r2, [pc, #20]	; (800fb60 <prvInitialiseTaskLists+0x64>)
 800fb4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <prvInitialiseTaskLists+0x7c>)
 800fb4e:	4a05      	ldr	r2, [pc, #20]	; (800fb64 <prvInitialiseTaskLists+0x68>)
 800fb50:	601a      	str	r2, [r3, #0]
}
 800fb52:	bf00      	nop
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	20003c50 	.word	0x20003c50
 800fb60:	20003cdc 	.word	0x20003cdc
 800fb64:	20003cf0 	.word	0x20003cf0
 800fb68:	20003d0c 	.word	0x20003d0c
 800fb6c:	20003d20 	.word	0x20003d20
 800fb70:	20003d38 	.word	0x20003d38
 800fb74:	20003d04 	.word	0x20003d04
 800fb78:	20003d08 	.word	0x20003d08

0800fb7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb82:	e019      	b.n	800fbb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb84:	f7fd f862 	bl	800cc4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fb88:	4b0f      	ldr	r3, [pc, #60]	; (800fbc8 <prvCheckTasksWaitingTermination+0x4c>)
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	3304      	adds	r3, #4
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fc feef 	bl	800c978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb9a:	4b0c      	ldr	r3, [pc, #48]	; (800fbcc <prvCheckTasksWaitingTermination+0x50>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	4a0a      	ldr	r2, [pc, #40]	; (800fbcc <prvCheckTasksWaitingTermination+0x50>)
 800fba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fba4:	4b0a      	ldr	r3, [pc, #40]	; (800fbd0 <prvCheckTasksWaitingTermination+0x54>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	4a09      	ldr	r2, [pc, #36]	; (800fbd0 <prvCheckTasksWaitingTermination+0x54>)
 800fbac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fbae:	f7fd f87b 	bl	800cca8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f8e2 	bl	800fd7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fbb8:	4b05      	ldr	r3, [pc, #20]	; (800fbd0 <prvCheckTasksWaitingTermination+0x54>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1e1      	bne.n	800fb84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	20003d20 	.word	0x20003d20
 800fbcc:	20003d4c 	.word	0x20003d4c
 800fbd0:	20003d34 	.word	0x20003d34

0800fbd4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b086      	sub	sp, #24
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
 800fbe0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d102      	bne.n	800fbee <vTaskGetInfo+0x1a>
 800fbe8:	4b2c      	ldr	r3, [pc, #176]	; (800fc9c <vTaskGetInfo+0xc8>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	e000      	b.n	800fbf0 <vTaskGetInfo+0x1c>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800fc2a:	78fb      	ldrb	r3, [r7, #3]
 800fc2c:	2b05      	cmp	r3, #5
 800fc2e:	d01a      	beq.n	800fc66 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800fc30:	4b1a      	ldr	r3, [pc, #104]	; (800fc9c <vTaskGetInfo+0xc8>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	697a      	ldr	r2, [r7, #20]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d103      	bne.n	800fc42 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	731a      	strb	r2, [r3, #12]
 800fc40:	e018      	b.n	800fc74 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	78fa      	ldrb	r2, [r7, #3]
 800fc46:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800fc48:	78fb      	ldrb	r3, [r7, #3]
 800fc4a:	2b03      	cmp	r3, #3
 800fc4c:	d112      	bne.n	800fc74 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800fc4e:	f7ff fa8f 	bl	800f170 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d002      	beq.n	800fc60 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2202      	movs	r2, #2
 800fc5e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800fc60:	f7ff fa94 	bl	800f18c <xTaskResumeAll>
 800fc64:	e006      	b.n	800fc74 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800fc66:	6978      	ldr	r0, [r7, #20]
 800fc68:	f7fe ff26 	bl	800eab8 <eTaskGetState>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	461a      	mov	r2, r3
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d009      	beq.n	800fc8e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 f860 	bl	800fd44 <prvTaskCheckFreeStackSpace>
 800fc84:	4603      	mov	r3, r0
 800fc86:	461a      	mov	r2, r3
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800fc8c:	e002      	b.n	800fc94 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	2200      	movs	r2, #0
 800fc92:	841a      	strh	r2, [r3, #32]
	}
 800fc94:	bf00      	nop
 800fc96:	3718      	adds	r7, #24
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	20003c4c 	.word	0x20003c4c

0800fca0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b08a      	sub	sp, #40	; 0x28
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d03f      	beq.n	800fd3a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	623b      	str	r3, [r7, #32]
 800fcbe:	6a3b      	ldr	r3, [r7, #32]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	685a      	ldr	r2, [r3, #4]
 800fcc4:	6a3b      	ldr	r3, [r7, #32]
 800fcc6:	605a      	str	r2, [r3, #4]
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	685a      	ldr	r2, [r3, #4]
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	3308      	adds	r3, #8
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d104      	bne.n	800fcde <prvListTasksWithinSingleList+0x3e>
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	685a      	ldr	r2, [r3, #4]
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	605a      	str	r2, [r3, #4]
 800fcde:	6a3b      	ldr	r3, [r7, #32]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	61bb      	str	r3, [r7, #24]
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	685a      	ldr	r2, [r3, #4]
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	605a      	str	r2, [r3, #4]
 800fcf4:	69bb      	ldr	r3, [r7, #24]
 800fcf6:	685a      	ldr	r2, [r3, #4]
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	3308      	adds	r3, #8
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d104      	bne.n	800fd0a <prvListTasksWithinSingleList+0x6a>
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	685a      	ldr	r2, [r3, #4]
 800fd06:	69bb      	ldr	r3, [r7, #24]
 800fd08:	605a      	str	r2, [r3, #4]
 800fd0a:	69bb      	ldr	r3, [r7, #24]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800fd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd14:	4613      	mov	r3, r2
 800fd16:	00db      	lsls	r3, r3, #3
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	1899      	adds	r1, r3, r2
 800fd22:	79fb      	ldrb	r3, [r7, #7]
 800fd24:	2201      	movs	r2, #1
 800fd26:	6978      	ldr	r0, [r7, #20]
 800fd28:	f7ff ff54 	bl	800fbd4 <vTaskGetInfo>
				uxTask++;
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	3301      	adds	r3, #1
 800fd30:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800fd32:	697a      	ldr	r2, [r7, #20]
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d1d5      	bne.n	800fce6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3728      	adds	r7, #40	; 0x28
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fd50:	e005      	b.n	800fd5e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	3301      	adds	r3, #1
 800fd56:	607b      	str	r3, [r7, #4]
			ulCount++;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2ba5      	cmp	r3, #165	; 0xa5
 800fd64:	d0f5      	beq.n	800fd52 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	089b      	lsrs	r3, r3, #2
 800fd6a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	b29b      	uxth	r3, r3
	}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3714      	adds	r7, #20
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d108      	bne.n	800fda0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fd f938 	bl	800d008 <vPortFree>
				vPortFree( pxTCB );
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f7fd f935 	bl	800d008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd9e:	e017      	b.n	800fdd0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d103      	bne.n	800fdb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7fd f92c 	bl	800d008 <vPortFree>
	}
 800fdb0:	e00e      	b.n	800fdd0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fdb8:	2b02      	cmp	r3, #2
 800fdba:	d009      	beq.n	800fdd0 <prvDeleteTCB+0x54>
 800fdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc0:	f383 8811 	msr	BASEPRI, r3
 800fdc4:	f3bf 8f6f 	isb	sy
 800fdc8:	f3bf 8f4f 	dsb	sy
 800fdcc:	60fb      	str	r3, [r7, #12]
 800fdce:	e7fe      	b.n	800fdce <prvDeleteTCB+0x52>
	}
 800fdd0:	bf00      	nop
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdde:	4b0f      	ldr	r3, [pc, #60]	; (800fe1c <prvResetNextTaskUnblockTime+0x44>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d101      	bne.n	800fdec <prvResetNextTaskUnblockTime+0x14>
 800fde8:	2301      	movs	r3, #1
 800fdea:	e000      	b.n	800fdee <prvResetNextTaskUnblockTime+0x16>
 800fdec:	2300      	movs	r3, #0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d004      	beq.n	800fdfc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdf2:	4b0b      	ldr	r3, [pc, #44]	; (800fe20 <prvResetNextTaskUnblockTime+0x48>)
 800fdf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdf8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fdfa:	e008      	b.n	800fe0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fdfc:	4b07      	ldr	r3, [pc, #28]	; (800fe1c <prvResetNextTaskUnblockTime+0x44>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	4a05      	ldr	r2, [pc, #20]	; (800fe20 <prvResetNextTaskUnblockTime+0x48>)
 800fe0c:	6013      	str	r3, [r2, #0]
}
 800fe0e:	bf00      	nop
 800fe10:	370c      	adds	r7, #12
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	20003d04 	.word	0x20003d04
 800fe20:	20003d6c 	.word	0x20003d6c

0800fe24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fe2a:	4b05      	ldr	r3, [pc, #20]	; (800fe40 <xTaskGetCurrentTaskHandle+0x1c>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fe30:	687b      	ldr	r3, [r7, #4]
	}
 800fe32:	4618      	mov	r0, r3
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	20003c4c 	.word	0x20003c4c

0800fe44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fe4a:	4b0b      	ldr	r3, [pc, #44]	; (800fe78 <xTaskGetSchedulerState+0x34>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d102      	bne.n	800fe58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe52:	2301      	movs	r3, #1
 800fe54:	607b      	str	r3, [r7, #4]
 800fe56:	e008      	b.n	800fe6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe58:	4b08      	ldr	r3, [pc, #32]	; (800fe7c <xTaskGetSchedulerState+0x38>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d102      	bne.n	800fe66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe60:	2302      	movs	r3, #2
 800fe62:	607b      	str	r3, [r7, #4]
 800fe64:	e001      	b.n	800fe6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe66:	2300      	movs	r3, #0
 800fe68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe6a:	687b      	ldr	r3, [r7, #4]
	}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr
 800fe78:	20003d58 	.word	0x20003d58
 800fe7c:	20003d74 	.word	0x20003d74

0800fe80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d06e      	beq.n	800ff74 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe9a:	4b39      	ldr	r3, [pc, #228]	; (800ff80 <xTaskPriorityInherit+0x100>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d25e      	bcs.n	800ff62 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	699b      	ldr	r3, [r3, #24]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	db06      	blt.n	800feba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feac:	4b34      	ldr	r3, [pc, #208]	; (800ff80 <xTaskPriorityInherit+0x100>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb2:	f1c3 0207 	rsb	r2, r3, #7
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	6959      	ldr	r1, [r3, #20]
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec2:	4613      	mov	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4413      	add	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	4a2e      	ldr	r2, [pc, #184]	; (800ff84 <xTaskPriorityInherit+0x104>)
 800fecc:	4413      	add	r3, r2
 800fece:	4299      	cmp	r1, r3
 800fed0:	d101      	bne.n	800fed6 <xTaskPriorityInherit+0x56>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e000      	b.n	800fed8 <xTaskPriorityInherit+0x58>
 800fed6:	2300      	movs	r3, #0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d03a      	beq.n	800ff52 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	3304      	adds	r3, #4
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fc fd49 	bl	800c978 <uxListRemove>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d115      	bne.n	800ff18 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fef0:	4924      	ldr	r1, [pc, #144]	; (800ff84 <xTaskPriorityInherit+0x104>)
 800fef2:	4613      	mov	r3, r2
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	4413      	add	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	440b      	add	r3, r1
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d10a      	bne.n	800ff18 <xTaskPriorityInherit+0x98>
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff06:	2201      	movs	r2, #1
 800ff08:	fa02 f303 	lsl.w	r3, r2, r3
 800ff0c:	43da      	mvns	r2, r3
 800ff0e:	4b1e      	ldr	r3, [pc, #120]	; (800ff88 <xTaskPriorityInherit+0x108>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4013      	ands	r3, r2
 800ff14:	4a1c      	ldr	r2, [pc, #112]	; (800ff88 <xTaskPriorityInherit+0x108>)
 800ff16:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff18:	4b19      	ldr	r3, [pc, #100]	; (800ff80 <xTaskPriorityInherit+0x100>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff26:	2201      	movs	r2, #1
 800ff28:	409a      	lsls	r2, r3
 800ff2a:	4b17      	ldr	r3, [pc, #92]	; (800ff88 <xTaskPriorityInherit+0x108>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	4a15      	ldr	r2, [pc, #84]	; (800ff88 <xTaskPriorityInherit+0x108>)
 800ff32:	6013      	str	r3, [r2, #0]
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff38:	4613      	mov	r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	4413      	add	r3, r2
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	4a10      	ldr	r2, [pc, #64]	; (800ff84 <xTaskPriorityInherit+0x104>)
 800ff42:	441a      	add	r2, r3
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4619      	mov	r1, r3
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	f7fc fcb7 	bl	800c8be <vListInsertEnd>
 800ff50:	e004      	b.n	800ff5c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff52:	4b0b      	ldr	r3, [pc, #44]	; (800ff80 <xTaskPriorityInherit+0x100>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	60fb      	str	r3, [r7, #12]
 800ff60:	e008      	b.n	800ff74 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff66:	4b06      	ldr	r3, [pc, #24]	; (800ff80 <xTaskPriorityInherit+0x100>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d201      	bcs.n	800ff74 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ff70:	2301      	movs	r3, #1
 800ff72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff74:	68fb      	ldr	r3, [r7, #12]
	}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	20003c4c 	.word	0x20003c4c
 800ff84:	20003c50 	.word	0x20003c50
 800ff88:	20003d54 	.word	0x20003d54

0800ff8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b086      	sub	sp, #24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d06c      	beq.n	801007c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ffa2:	4b39      	ldr	r3, [pc, #228]	; (8010088 <xTaskPriorityDisinherit+0xfc>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d009      	beq.n	800ffc0 <xTaskPriorityDisinherit+0x34>
 800ffac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb0:	f383 8811 	msr	BASEPRI, r3
 800ffb4:	f3bf 8f6f 	isb	sy
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	60fb      	str	r3, [r7, #12]
 800ffbe:	e7fe      	b.n	800ffbe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d109      	bne.n	800ffdc <xTaskPriorityDisinherit+0x50>
 800ffc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffcc:	f383 8811 	msr	BASEPRI, r3
 800ffd0:	f3bf 8f6f 	isb	sy
 800ffd4:	f3bf 8f4f 	dsb	sy
 800ffd8:	60bb      	str	r3, [r7, #8]
 800ffda:	e7fe      	b.n	800ffda <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffe0:	1e5a      	subs	r2, r3, #1
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d044      	beq.n	801007c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d140      	bne.n	801007c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	3304      	adds	r3, #4
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fc fcba 	bl	800c978 <uxListRemove>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d115      	bne.n	8010036 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801000e:	491f      	ldr	r1, [pc, #124]	; (801008c <xTaskPriorityDisinherit+0x100>)
 8010010:	4613      	mov	r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	4413      	add	r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	440b      	add	r3, r1
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d10a      	bne.n	8010036 <xTaskPriorityDisinherit+0xaa>
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010024:	2201      	movs	r2, #1
 8010026:	fa02 f303 	lsl.w	r3, r2, r3
 801002a:	43da      	mvns	r2, r3
 801002c:	4b18      	ldr	r3, [pc, #96]	; (8010090 <xTaskPriorityDisinherit+0x104>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4013      	ands	r3, r2
 8010032:	4a17      	ldr	r2, [pc, #92]	; (8010090 <xTaskPriorityDisinherit+0x104>)
 8010034:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010042:	f1c3 0207 	rsb	r2, r3, #7
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004e:	2201      	movs	r2, #1
 8010050:	409a      	lsls	r2, r3
 8010052:	4b0f      	ldr	r3, [pc, #60]	; (8010090 <xTaskPriorityDisinherit+0x104>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4313      	orrs	r3, r2
 8010058:	4a0d      	ldr	r2, [pc, #52]	; (8010090 <xTaskPriorityDisinherit+0x104>)
 801005a:	6013      	str	r3, [r2, #0]
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010060:	4613      	mov	r3, r2
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	4413      	add	r3, r2
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	4a08      	ldr	r2, [pc, #32]	; (801008c <xTaskPriorityDisinherit+0x100>)
 801006a:	441a      	add	r2, r3
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	3304      	adds	r3, #4
 8010070:	4619      	mov	r1, r3
 8010072:	4610      	mov	r0, r2
 8010074:	f7fc fc23 	bl	800c8be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010078:	2301      	movs	r3, #1
 801007a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801007c:	697b      	ldr	r3, [r7, #20]
	}
 801007e:	4618      	mov	r0, r3
 8010080:	3718      	adds	r7, #24
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	20003c4c 	.word	0x20003c4c
 801008c:	20003c50 	.word	0x20003c50
 8010090:	20003d54 	.word	0x20003d54

08010094 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010094:	b580      	push	{r7, lr}
 8010096:	b088      	sub	sp, #32
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80100a2:	2301      	movs	r3, #1
 80100a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 8086 	beq.w	80101ba <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d109      	bne.n	80100ca <vTaskPriorityDisinheritAfterTimeout+0x36>
 80100b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	60fb      	str	r3, [r7, #12]
 80100c8:	e7fe      	b.n	80100c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d202      	bcs.n	80100da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	61fb      	str	r3, [r7, #28]
 80100d8:	e002      	b.n	80100e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d067      	beq.n	80101ba <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d162      	bne.n	80101ba <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80100f4:	4b33      	ldr	r3, [pc, #204]	; (80101c4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	69ba      	ldr	r2, [r7, #24]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d109      	bne.n	8010112 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80100fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010102:	f383 8811 	msr	BASEPRI, r3
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	f3bf 8f4f 	dsb	sy
 801010e:	60bb      	str	r3, [r7, #8]
 8010110:	e7fe      	b.n	8010110 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010116:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	69fa      	ldr	r2, [r7, #28]
 801011c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	699b      	ldr	r3, [r3, #24]
 8010122:	2b00      	cmp	r3, #0
 8010124:	db04      	blt.n	8010130 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	f1c3 0207 	rsb	r2, r3, #7
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	6959      	ldr	r1, [r3, #20]
 8010134:	693a      	ldr	r2, [r7, #16]
 8010136:	4613      	mov	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	4413      	add	r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4a22      	ldr	r2, [pc, #136]	; (80101c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010140:	4413      	add	r3, r2
 8010142:	4299      	cmp	r1, r3
 8010144:	d101      	bne.n	801014a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8010146:	2301      	movs	r3, #1
 8010148:	e000      	b.n	801014c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 801014a:	2300      	movs	r3, #0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d034      	beq.n	80101ba <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010150:	69bb      	ldr	r3, [r7, #24]
 8010152:	3304      	adds	r3, #4
 8010154:	4618      	mov	r0, r3
 8010156:	f7fc fc0f 	bl	800c978 <uxListRemove>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d115      	bne.n	801018c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010164:	4918      	ldr	r1, [pc, #96]	; (80101c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010166:	4613      	mov	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4413      	add	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	440b      	add	r3, r1
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d10a      	bne.n	801018c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017a:	2201      	movs	r2, #1
 801017c:	fa02 f303 	lsl.w	r3, r2, r3
 8010180:	43da      	mvns	r2, r3
 8010182:	4b12      	ldr	r3, [pc, #72]	; (80101cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4013      	ands	r3, r2
 8010188:	4a10      	ldr	r2, [pc, #64]	; (80101cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801018a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010190:	2201      	movs	r2, #1
 8010192:	409a      	lsls	r2, r3
 8010194:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4313      	orrs	r3, r2
 801019a:	4a0c      	ldr	r2, [pc, #48]	; (80101cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801019c:	6013      	str	r3, [r2, #0]
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a2:	4613      	mov	r3, r2
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	4413      	add	r3, r2
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	4a07      	ldr	r2, [pc, #28]	; (80101c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80101ac:	441a      	add	r2, r3
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	3304      	adds	r3, #4
 80101b2:	4619      	mov	r1, r3
 80101b4:	4610      	mov	r0, r2
 80101b6:	f7fc fb82 	bl	800c8be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101ba:	bf00      	nop
 80101bc:	3720      	adds	r7, #32
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	20003c4c 	.word	0x20003c4c
 80101c8:	20003c50 	.word	0x20003c50
 80101cc:	20003d54 	.word	0x20003d54

080101d0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80101da:	6839      	ldr	r1, [r7, #0]
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f004 fbd6 	bl	801498e <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f003 fdc8 	bl	8013d78 <strlen>
 80101e8:	60f8      	str	r0, [r7, #12]
 80101ea:	e007      	b.n	80101fc <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	4413      	add	r3, r2
 80101f2:	2220      	movs	r2, #32
 80101f4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	3301      	adds	r3, #1
 80101fa:	60fb      	str	r3, [r7, #12]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b0e      	cmp	r3, #14
 8010200:	d9f4      	bls.n	80101ec <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	4413      	add	r3, r2
 8010208:	2200      	movs	r2, #0
 801020a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	4413      	add	r3, r2
	}
 8010212:	4618      	mov	r0, r3
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 801021a:	b590      	push	{r4, r7, lr}
 801021c:	b089      	sub	sp, #36	; 0x24
 801021e:	af02      	add	r7, sp, #8
 8010220:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010228:	4b46      	ldr	r3, [pc, #280]	; (8010344 <vTaskList+0x12a>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 801022e:	4b45      	ldr	r3, [pc, #276]	; (8010344 <vTaskList+0x12a>)
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	4613      	mov	r3, r2
 8010234:	00db      	lsls	r3, r3, #3
 8010236:	4413      	add	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	4618      	mov	r0, r3
 801023c:	f7fc fe22 	bl	800ce84 <pvPortMalloc>
 8010240:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d079      	beq.n	801033c <vTaskList+0x122>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2200      	movs	r2, #0
 801024c:	4619      	mov	r1, r3
 801024e:	6938      	ldr	r0, [r7, #16]
 8010250:	f7ff f88a 	bl	800f368 <uxTaskGetSystemState>
 8010254:	4603      	mov	r3, r0
 8010256:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8010258:	2300      	movs	r3, #0
 801025a:	60bb      	str	r3, [r7, #8]
 801025c:	e067      	b.n	801032e <vTaskList+0x114>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	4613      	mov	r3, r2
 8010262:	00db      	lsls	r3, r3, #3
 8010264:	4413      	add	r3, r2
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	461a      	mov	r2, r3
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	4413      	add	r3, r2
 801026e:	7b1b      	ldrb	r3, [r3, #12]
 8010270:	2b04      	cmp	r3, #4
 8010272:	d81c      	bhi.n	80102ae <vTaskList+0x94>
 8010274:	a201      	add	r2, pc, #4	; (adr r2, 801027c <vTaskList+0x62>)
 8010276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027a:	bf00      	nop
 801027c:	08010291 	.word	0x08010291
 8010280:	08010297 	.word	0x08010297
 8010284:	0801029d 	.word	0x0801029d
 8010288:	080102a3 	.word	0x080102a3
 801028c:	080102a9 	.word	0x080102a9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8010290:	2358      	movs	r3, #88	; 0x58
 8010292:	75fb      	strb	r3, [r7, #23]
										break;
 8010294:	e00e      	b.n	80102b4 <vTaskList+0x9a>

					case eReady:		cStatus = tskREADY_CHAR;
 8010296:	2352      	movs	r3, #82	; 0x52
 8010298:	75fb      	strb	r3, [r7, #23]
										break;
 801029a:	e00b      	b.n	80102b4 <vTaskList+0x9a>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 801029c:	2342      	movs	r3, #66	; 0x42
 801029e:	75fb      	strb	r3, [r7, #23]
										break;
 80102a0:	e008      	b.n	80102b4 <vTaskList+0x9a>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80102a2:	2353      	movs	r3, #83	; 0x53
 80102a4:	75fb      	strb	r3, [r7, #23]
										break;
 80102a6:	e005      	b.n	80102b4 <vTaskList+0x9a>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80102a8:	2344      	movs	r3, #68	; 0x44
 80102aa:	75fb      	strb	r3, [r7, #23]
										break;
 80102ac:	e002      	b.n	80102b4 <vTaskList+0x9a>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 80102ae:	2300      	movs	r3, #0
 80102b0:	75fb      	strb	r3, [r7, #23]
										break;
 80102b2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80102b4:	68ba      	ldr	r2, [r7, #8]
 80102b6:	4613      	mov	r3, r2
 80102b8:	00db      	lsls	r3, r3, #3
 80102ba:	4413      	add	r3, r2
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	461a      	mov	r2, r3
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	4413      	add	r3, r2
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	4619      	mov	r1, r3
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff ff81 	bl	80101d0 <prvWriteNameToBuffer>
 80102ce:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80102d0:	7df9      	ldrb	r1, [r7, #23]
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	4613      	mov	r3, r2
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	4413      	add	r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	461a      	mov	r2, r3
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	4413      	add	r3, r2
 80102e2:	6918      	ldr	r0, [r3, #16]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	4613      	mov	r3, r2
 80102e8:	00db      	lsls	r3, r3, #3
 80102ea:	4413      	add	r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	461a      	mov	r2, r3
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	4413      	add	r3, r2
 80102f4:	8c1b      	ldrh	r3, [r3, #32]
 80102f6:	461c      	mov	r4, r3
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	4613      	mov	r3, r2
 80102fc:	00db      	lsls	r3, r3, #3
 80102fe:	4413      	add	r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	461a      	mov	r2, r3
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	4413      	add	r3, r2
 8010308:	689b      	ldr	r3, [r3, #8]
 801030a:	9301      	str	r3, [sp, #4]
 801030c:	9400      	str	r4, [sp, #0]
 801030e:	4603      	mov	r3, r0
 8010310:	460a      	mov	r2, r1
 8010312:	490d      	ldr	r1, [pc, #52]	; (8010348 <vTaskList+0x12e>)
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f003 f815 	bl	8013344 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f003 fd2c 	bl	8013d78 <strlen>
 8010320:	4602      	mov	r2, r0
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4413      	add	r3, r2
 8010326:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	3301      	adds	r3, #1
 801032c:	60bb      	str	r3, [r7, #8]
 801032e:	68ba      	ldr	r2, [r7, #8]
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	429a      	cmp	r2, r3
 8010334:	d393      	bcc.n	801025e <vTaskList+0x44>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8010336:	6938      	ldr	r0, [r7, #16]
 8010338:	f7fc fe66 	bl	800d008 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801033c:	bf00      	nop
 801033e:	371c      	adds	r7, #28
 8010340:	46bd      	mov	sp, r7
 8010342:	bd90      	pop	{r4, r7, pc}
 8010344:	20003d4c 	.word	0x20003d4c
 8010348:	08014a34 	.word	0x08014a34

0801034c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801035a:	4b3a      	ldr	r3, [pc, #232]	; (8010444 <vTaskGetRunTimeStats+0xf8>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	617b      	str	r3, [r7, #20]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010360:	4b38      	ldr	r3, [pc, #224]	; (8010444 <vTaskGetRunTimeStats+0xf8>)
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	4613      	mov	r3, r2
 8010366:	00db      	lsls	r3, r3, #3
 8010368:	4413      	add	r3, r2
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	4618      	mov	r0, r3
 801036e:	f7fc fd89 	bl	800ce84 <pvPortMalloc>
 8010372:	61f8      	str	r0, [r7, #28]

		if( pxTaskStatusArray != NULL )
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d060      	beq.n	801043c <vTaskGetRunTimeStats+0xf0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	f107 020c 	add.w	r2, r7, #12
 8010380:	4619      	mov	r1, r3
 8010382:	69f8      	ldr	r0, [r7, #28]
 8010384:	f7fe fff0 	bl	800f368 <uxTaskGetSystemState>
 8010388:	4603      	mov	r3, r0
 801038a:	617b      	str	r3, [r7, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	4a2e      	ldr	r2, [pc, #184]	; (8010448 <vTaskGetRunTimeStats+0xfc>)
 8010390:	fba2 2303 	umull	r2, r3, r2, r3
 8010394:	095b      	lsrs	r3, r3, #5
 8010396:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d04b      	beq.n	8010436 <vTaskGetRunTimeStats+0xea>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 801039e:	2300      	movs	r3, #0
 80103a0:	613b      	str	r3, [r7, #16]
 80103a2:	e044      	b.n	801042e <vTaskGetRunTimeStats+0xe2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80103a4:	693a      	ldr	r2, [r7, #16]
 80103a6:	4613      	mov	r3, r2
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	4413      	add	r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	461a      	mov	r2, r3
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	4413      	add	r3, r2
 80103b4:	699a      	ldr	r2, [r3, #24]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80103bc:	61bb      	str	r3, [r7, #24]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80103be:	693a      	ldr	r2, [r7, #16]
 80103c0:	4613      	mov	r3, r2
 80103c2:	00db      	lsls	r3, r3, #3
 80103c4:	4413      	add	r3, r2
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	461a      	mov	r2, r3
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	4413      	add	r3, r2
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	4619      	mov	r1, r3
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7ff fefc 	bl	80101d0 <prvWriteNameToBuffer>
 80103d8:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00e      	beq.n	80103fe <vTaskGetRunTimeStats+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80103e0:	693a      	ldr	r2, [r7, #16]
 80103e2:	4613      	mov	r3, r2
 80103e4:	00db      	lsls	r3, r3, #3
 80103e6:	4413      	add	r3, r2
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	461a      	mov	r2, r3
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	4413      	add	r3, r2
 80103f0:	699a      	ldr	r2, [r3, #24]
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	4915      	ldr	r1, [pc, #84]	; (801044c <vTaskGetRunTimeStats+0x100>)
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f002 ffa4 	bl	8013344 <sprintf>
 80103fc:	e00d      	b.n	801041a <vTaskGetRunTimeStats+0xce>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	4613      	mov	r3, r2
 8010402:	00db      	lsls	r3, r3, #3
 8010404:	4413      	add	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	461a      	mov	r2, r3
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	4413      	add	r3, r2
 801040e:	699b      	ldr	r3, [r3, #24]
 8010410:	461a      	mov	r2, r3
 8010412:	490f      	ldr	r1, [pc, #60]	; (8010450 <vTaskGetRunTimeStats+0x104>)
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f002 ff95 	bl	8013344 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f003 fcac 	bl	8013d78 <strlen>
 8010420:	4602      	mov	r2, r0
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4413      	add	r3, r2
 8010426:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	3301      	adds	r3, #1
 801042c:	613b      	str	r3, [r7, #16]
 801042e:	693a      	ldr	r2, [r7, #16]
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	429a      	cmp	r2, r3
 8010434:	d3b6      	bcc.n	80103a4 <vTaskGetRunTimeStats+0x58>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8010436:	69f8      	ldr	r0, [r7, #28]
 8010438:	f7fc fde6 	bl	800d008 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801043c:	bf00      	nop
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	20003d4c 	.word	0x20003d4c
 8010448:	51eb851f 	.word	0x51eb851f
 801044c:	08014a44 	.word	0x08014a44
 8010450:	08014a50 	.word	0x08014a50

08010454 <vTaskGetCurrentCounterValue>:


	uint32_t vTaskGetCurrentCounterValue( void  )
	{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
		#endif


		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801045a:	4b25      	ldr	r3, [pc, #148]	; (80104f0 <vTaskGetCurrentCounterValue+0x9c>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	60bb      	str	r3, [r7, #8]

		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010460:	4b23      	ldr	r3, [pc, #140]	; (80104f0 <vTaskGetCurrentCounterValue+0x9c>)
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	4613      	mov	r3, r2
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	4413      	add	r3, r2
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	4618      	mov	r0, r3
 801046e:	f7fc fd09 	bl	800ce84 <pvPortMalloc>
 8010472:	60f8      	str	r0, [r7, #12]

		/* Generate the (binary) data. */
		uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	463a      	mov	r2, r7
 8010478:	4619      	mov	r1, r3
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7fe ff74 	bl	800f368 <uxTaskGetSystemState>
 8010480:	4603      	mov	r3, r0
 8010482:	60bb      	str	r3, [r7, #8]

		/* For percentage calculations. */
		ulTotalTime /= 100UL;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	4a1b      	ldr	r2, [pc, #108]	; (80104f4 <vTaskGetCurrentCounterValue+0xa0>)
 8010488:	fba2 2303 	umull	r2, r3, r2, r3
 801048c:	095b      	lsrs	r3, r3, #5
 801048e:	603b      	str	r3, [r7, #0]

				
		for( x = 0; x < uxArraySize; x++ )
 8010490:	2300      	movs	r3, #0
 8010492:	607b      	str	r3, [r7, #4]
 8010494:	e01a      	b.n	80104cc <vTaskGetCurrentCounterValue+0x78>
		{

			if (pxTaskStatusArray[ x ].eCurrentState == eRunning){
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	4613      	mov	r3, r2
 801049a:	00db      	lsls	r3, r3, #3
 801049c:	4413      	add	r3, r2
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	461a      	mov	r2, r3
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4413      	add	r3, r2
 80104a6:	7b1b      	ldrb	r3, [r3, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10c      	bne.n	80104c6 <vTaskGetCurrentCounterValue+0x72>
				vPortFree( pxTaskStatusArray );
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7fc fdab 	bl	800d008 <vPortFree>
				return (uint32_t)pxTaskStatusArray[ x ].ulRunTimeCounter;
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	4613      	mov	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	4413      	add	r3, r2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	461a      	mov	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	4413      	add	r3, r2
 80104c2:	699b      	ldr	r3, [r3, #24]
 80104c4:	e00f      	b.n	80104e6 <vTaskGetCurrentCounterValue+0x92>
		for( x = 0; x < uxArraySize; x++ )
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	3301      	adds	r3, #1
 80104ca:	607b      	str	r3, [r7, #4]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d3e0      	bcc.n	8010496 <vTaskGetCurrentCounterValue+0x42>
			}
		}
		return (uint32_t)pxTaskStatusArray[ x ].pcTaskName;
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	4613      	mov	r3, r2
 80104d8:	00db      	lsls	r3, r3, #3
 80104da:	4413      	add	r3, r2
 80104dc:	009b      	lsls	r3, r3, #2
 80104de:	461a      	mov	r2, r3
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	4413      	add	r3, r2
 80104e4:	685b      	ldr	r3, [r3, #4]
	}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3710      	adds	r7, #16
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	20003d4c 	.word	0x20003d4c
 80104f4:	51eb851f 	.word	0x51eb851f

080104f8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80104fe:	4b09      	ldr	r3, [pc, #36]	; (8010524 <uxTaskResetEventItemValue+0x2c>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	699b      	ldr	r3, [r3, #24]
 8010504:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010506:	4b07      	ldr	r3, [pc, #28]	; (8010524 <uxTaskResetEventItemValue+0x2c>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a06      	ldr	r2, [pc, #24]	; (8010524 <uxTaskResetEventItemValue+0x2c>)
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010510:	f1c2 0207 	rsb	r2, r2, #7
 8010514:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010516:	687b      	ldr	r3, [r7, #4]
}
 8010518:	4618      	mov	r0, r3
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	20003c4c 	.word	0x20003c4c

08010528 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8010528:	b480      	push	{r7}
 801052a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801052c:	4b07      	ldr	r3, [pc, #28]	; (801054c <pvTaskIncrementMutexHeldCount+0x24>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d004      	beq.n	801053e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010534:	4b05      	ldr	r3, [pc, #20]	; (801054c <pvTaskIncrementMutexHeldCount+0x24>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801053a:	3201      	adds	r2, #1
 801053c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801053e:	4b03      	ldr	r3, [pc, #12]	; (801054c <pvTaskIncrementMutexHeldCount+0x24>)
 8010540:	681b      	ldr	r3, [r3, #0]
	}
 8010542:	4618      	mov	r0, r3
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	20003c4c 	.word	0x20003c4c

08010550 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801055a:	f7fc fb77 	bl	800cc4c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801055e:	4b1e      	ldr	r3, [pc, #120]	; (80105d8 <ulTaskNotifyTake+0x88>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010564:	2b00      	cmp	r3, #0
 8010566:	d113      	bne.n	8010590 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010568:	4b1b      	ldr	r3, [pc, #108]	; (80105d8 <ulTaskNotifyTake+0x88>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2201      	movs	r2, #1
 801056e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00b      	beq.n	8010590 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010578:	2101      	movs	r1, #1
 801057a:	6838      	ldr	r0, [r7, #0]
 801057c:	f000 faa6 	bl	8010acc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010580:	4b16      	ldr	r3, [pc, #88]	; (80105dc <ulTaskNotifyTake+0x8c>)
 8010582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010586:	601a      	str	r2, [r3, #0]
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010590:	f7fc fb8a 	bl	800cca8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010594:	f7fc fb5a 	bl	800cc4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010598:	4b0f      	ldr	r3, [pc, #60]	; (80105d8 <ulTaskNotifyTake+0x88>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801059e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00c      	beq.n	80105c0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d004      	beq.n	80105b6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80105ac:	4b0a      	ldr	r3, [pc, #40]	; (80105d8 <ulTaskNotifyTake+0x88>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2200      	movs	r2, #0
 80105b2:	659a      	str	r2, [r3, #88]	; 0x58
 80105b4:	e004      	b.n	80105c0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80105b6:	4b08      	ldr	r3, [pc, #32]	; (80105d8 <ulTaskNotifyTake+0x88>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	3a01      	subs	r2, #1
 80105be:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105c0:	4b05      	ldr	r3, [pc, #20]	; (80105d8 <ulTaskNotifyTake+0x88>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2200      	movs	r2, #0
 80105c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 80105ca:	f7fc fb6d 	bl	800cca8 <vPortExitCritical>

		return ulReturn;
 80105ce:	68fb      	ldr	r3, [r7, #12]
	}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	20003c4c 	.word	0x20003c4c
 80105dc:	e000ed04 	.word	0xe000ed04

080105e0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b086      	sub	sp, #24
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
 80105ec:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80105ee:	f7fc fb2d 	bl	800cc4c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80105f2:	4b26      	ldr	r3, [pc, #152]	; (801068c <xTaskNotifyWait+0xac>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	d01a      	beq.n	8010636 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010600:	4b22      	ldr	r3, [pc, #136]	; (801068c <xTaskNotifyWait+0xac>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010606:	68fa      	ldr	r2, [r7, #12]
 8010608:	43d2      	mvns	r2, r2
 801060a:	400a      	ands	r2, r1
 801060c:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801060e:	4b1f      	ldr	r3, [pc, #124]	; (801068c <xTaskNotifyWait+0xac>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2201      	movs	r2, #1
 8010614:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00b      	beq.n	8010636 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801061e:	2101      	movs	r1, #1
 8010620:	6838      	ldr	r0, [r7, #0]
 8010622:	f000 fa53 	bl	8010acc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010626:	4b1a      	ldr	r3, [pc, #104]	; (8010690 <xTaskNotifyWait+0xb0>)
 8010628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801062c:	601a      	str	r2, [r3, #0]
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010636:	f7fc fb37 	bl	800cca8 <vPortExitCritical>

		taskENTER_CRITICAL();
 801063a:	f7fc fb07 	bl	800cc4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d004      	beq.n	801064e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010644:	4b11      	ldr	r3, [pc, #68]	; (801068c <xTaskNotifyWait+0xac>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801064e:	4b0f      	ldr	r3, [pc, #60]	; (801068c <xTaskNotifyWait+0xac>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b02      	cmp	r3, #2
 801065a:	d002      	beq.n	8010662 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801065c:	2300      	movs	r3, #0
 801065e:	617b      	str	r3, [r7, #20]
 8010660:	e008      	b.n	8010674 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010662:	4b0a      	ldr	r3, [pc, #40]	; (801068c <xTaskNotifyWait+0xac>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	43d2      	mvns	r2, r2
 801066c:	400a      	ands	r2, r1
 801066e:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 8010670:	2301      	movs	r3, #1
 8010672:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010674:	4b05      	ldr	r3, [pc, #20]	; (801068c <xTaskNotifyWait+0xac>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 801067e:	f7fc fb13 	bl	800cca8 <vPortExitCritical>

		return xReturn;
 8010682:	697b      	ldr	r3, [r7, #20]
	}
 8010684:	4618      	mov	r0, r3
 8010686:	3718      	adds	r7, #24
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	20003c4c 	.word	0x20003c4c
 8010690:	e000ed04 	.word	0xe000ed04

08010694 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010694:	b580      	push	{r7, lr}
 8010696:	b08a      	sub	sp, #40	; 0x28
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	603b      	str	r3, [r7, #0]
 80106a0:	4613      	mov	r3, r2
 80106a2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80106a4:	2301      	movs	r3, #1
 80106a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d109      	bne.n	80106c2 <xTaskGenericNotify+0x2e>
 80106ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b2:	f383 8811 	msr	BASEPRI, r3
 80106b6:	f3bf 8f6f 	isb	sy
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	61bb      	str	r3, [r7, #24]
 80106c0:	e7fe      	b.n	80106c0 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80106c6:	f7fc fac1 	bl	800cc4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d003      	beq.n	80106d8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80106d0:	6a3b      	ldr	r3, [r7, #32]
 80106d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80106de:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80106e0:	6a3b      	ldr	r3, [r7, #32]
 80106e2:	2202      	movs	r2, #2
 80106e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 80106e8:	79fb      	ldrb	r3, [r7, #7]
 80106ea:	2b04      	cmp	r3, #4
 80106ec:	d827      	bhi.n	801073e <xTaskGenericNotify+0xaa>
 80106ee:	a201      	add	r2, pc, #4	; (adr r2, 80106f4 <xTaskGenericNotify+0x60>)
 80106f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f4:	0801073f 	.word	0x0801073f
 80106f8:	08010709 	.word	0x08010709
 80106fc:	08010717 	.word	0x08010717
 8010700:	08010723 	.word	0x08010723
 8010704:	0801072b 	.word	0x0801072b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010708:	6a3b      	ldr	r3, [r7, #32]
 801070a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	431a      	orrs	r2, r3
 8010710:	6a3b      	ldr	r3, [r7, #32]
 8010712:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8010714:	e013      	b.n	801073e <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	6a3b      	ldr	r3, [r7, #32]
 801071e:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8010720:	e00d      	b.n	801073e <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010722:	6a3b      	ldr	r3, [r7, #32]
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8010728:	e009      	b.n	801073e <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801072a:	7ffb      	ldrb	r3, [r7, #31]
 801072c:	2b02      	cmp	r3, #2
 801072e:	d003      	beq.n	8010738 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010730:	6a3b      	ldr	r3, [r7, #32]
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010736:	e001      	b.n	801073c <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8010738:	2300      	movs	r3, #0
 801073a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801073c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801073e:	7ffb      	ldrb	r3, [r7, #31]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d138      	bne.n	80107b6 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010744:	6a3b      	ldr	r3, [r7, #32]
 8010746:	3304      	adds	r3, #4
 8010748:	4618      	mov	r0, r3
 801074a:	f7fc f915 	bl	800c978 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801074e:	6a3b      	ldr	r3, [r7, #32]
 8010750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010752:	2201      	movs	r2, #1
 8010754:	409a      	lsls	r2, r3
 8010756:	4b1b      	ldr	r3, [pc, #108]	; (80107c4 <xTaskGenericNotify+0x130>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4313      	orrs	r3, r2
 801075c:	4a19      	ldr	r2, [pc, #100]	; (80107c4 <xTaskGenericNotify+0x130>)
 801075e:	6013      	str	r3, [r2, #0]
 8010760:	6a3b      	ldr	r3, [r7, #32]
 8010762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010764:	4613      	mov	r3, r2
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	4413      	add	r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4a16      	ldr	r2, [pc, #88]	; (80107c8 <xTaskGenericNotify+0x134>)
 801076e:	441a      	add	r2, r3
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	3304      	adds	r3, #4
 8010774:	4619      	mov	r1, r3
 8010776:	4610      	mov	r0, r2
 8010778:	f7fc f8a1 	bl	800c8be <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801077c:	6a3b      	ldr	r3, [r7, #32]
 801077e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010780:	2b00      	cmp	r3, #0
 8010782:	d009      	beq.n	8010798 <xTaskGenericNotify+0x104>
 8010784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010788:	f383 8811 	msr	BASEPRI, r3
 801078c:	f3bf 8f6f 	isb	sy
 8010790:	f3bf 8f4f 	dsb	sy
 8010794:	617b      	str	r3, [r7, #20]
 8010796:	e7fe      	b.n	8010796 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010798:	6a3b      	ldr	r3, [r7, #32]
 801079a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079c:	4b0b      	ldr	r3, [pc, #44]	; (80107cc <xTaskGenericNotify+0x138>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d907      	bls.n	80107b6 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80107a6:	4b0a      	ldr	r3, [pc, #40]	; (80107d0 <xTaskGenericNotify+0x13c>)
 80107a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ac:	601a      	str	r2, [r3, #0]
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80107b6:	f7fc fa77 	bl	800cca8 <vPortExitCritical>

		return xReturn;
 80107ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80107bc:	4618      	mov	r0, r3
 80107be:	3728      	adds	r7, #40	; 0x28
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	20003d54 	.word	0x20003d54
 80107c8:	20003c50 	.word	0x20003c50
 80107cc:	20003c4c 	.word	0x20003c4c
 80107d0:	e000ed04 	.word	0xe000ed04

080107d4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b08e      	sub	sp, #56	; 0x38
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	603b      	str	r3, [r7, #0]
 80107e0:	4613      	mov	r3, r2
 80107e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80107e4:	2301      	movs	r3, #1
 80107e6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d109      	bne.n	8010802 <xTaskGenericNotifyFromISR+0x2e>
 80107ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	627b      	str	r3, [r7, #36]	; 0x24
 8010800:	e7fe      	b.n	8010800 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010802:	f7fc fafd 	bl	800ce00 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801080a:	f3ef 8211 	mrs	r2, BASEPRI
 801080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010812:	f383 8811 	msr	BASEPRI, r3
 8010816:	f3bf 8f6f 	isb	sy
 801081a:	f3bf 8f4f 	dsb	sy
 801081e:	623a      	str	r2, [r7, #32]
 8010820:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010822:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010824:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d003      	beq.n	8010834 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010836:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801083a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	2202      	movs	r2, #2
 8010842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 8010846:	79fb      	ldrb	r3, [r7, #7]
 8010848:	2b04      	cmp	r3, #4
 801084a:	d829      	bhi.n	80108a0 <xTaskGenericNotifyFromISR+0xcc>
 801084c:	a201      	add	r2, pc, #4	; (adr r2, 8010854 <xTaskGenericNotifyFromISR+0x80>)
 801084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010852:	bf00      	nop
 8010854:	080108a1 	.word	0x080108a1
 8010858:	08010869 	.word	0x08010869
 801085c:	08010877 	.word	0x08010877
 8010860:	08010883 	.word	0x08010883
 8010864:	0801088b 	.word	0x0801088b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	431a      	orrs	r2, r3
 8010870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010872:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8010874:	e014      	b.n	80108a0 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801087a:	1c5a      	adds	r2, r3, #1
 801087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087e:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8010880:	e00e      	b.n	80108a0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010884:	68ba      	ldr	r2, [r7, #8]
 8010886:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8010888:	e00a      	b.n	80108a0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801088a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801088e:	2b02      	cmp	r3, #2
 8010890:	d003      	beq.n	801089a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010898:	e001      	b.n	801089e <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 801089a:	2300      	movs	r3, #0
 801089c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801089e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80108a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d145      	bne.n	8010934 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80108a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d009      	beq.n	80108c4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80108b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	61bb      	str	r3, [r7, #24]
 80108c2:	e7fe      	b.n	80108c2 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108c4:	4b20      	ldr	r3, [pc, #128]	; (8010948 <xTaskGenericNotifyFromISR+0x174>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d11c      	bne.n	8010906 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ce:	3304      	adds	r3, #4
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fc f851 	bl	800c978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80108d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108da:	2201      	movs	r2, #1
 80108dc:	409a      	lsls	r2, r3
 80108de:	4b1b      	ldr	r3, [pc, #108]	; (801094c <xTaskGenericNotifyFromISR+0x178>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4313      	orrs	r3, r2
 80108e4:	4a19      	ldr	r2, [pc, #100]	; (801094c <xTaskGenericNotifyFromISR+0x178>)
 80108e6:	6013      	str	r3, [r2, #0]
 80108e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ec:	4613      	mov	r3, r2
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	4413      	add	r3, r2
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	4a16      	ldr	r2, [pc, #88]	; (8010950 <xTaskGenericNotifyFromISR+0x17c>)
 80108f6:	441a      	add	r2, r3
 80108f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fa:	3304      	adds	r3, #4
 80108fc:	4619      	mov	r1, r3
 80108fe:	4610      	mov	r0, r2
 8010900:	f7fb ffdd 	bl	800c8be <vListInsertEnd>
 8010904:	e005      	b.n	8010912 <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010908:	3318      	adds	r3, #24
 801090a:	4619      	mov	r1, r3
 801090c:	4811      	ldr	r0, [pc, #68]	; (8010954 <xTaskGenericNotifyFromISR+0x180>)
 801090e:	f7fb ffd6 	bl	800c8be <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010916:	4b10      	ldr	r3, [pc, #64]	; (8010958 <xTaskGenericNotifyFromISR+0x184>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801091c:	429a      	cmp	r2, r3
 801091e:	d909      	bls.n	8010934 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010922:	2b00      	cmp	r3, #0
 8010924:	d003      	beq.n	801092e <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010928:	2201      	movs	r2, #1
 801092a:	601a      	str	r2, [r3, #0]
 801092c:	e002      	b.n	8010934 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 801092e:	4b0b      	ldr	r3, [pc, #44]	; (801095c <xTaskGenericNotifyFromISR+0x188>)
 8010930:	2201      	movs	r2, #1
 8010932:	601a      	str	r2, [r3, #0]
 8010934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010936:	617b      	str	r3, [r7, #20]
	__asm volatile
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010940:	4618      	mov	r0, r3
 8010942:	3738      	adds	r7, #56	; 0x38
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	20003d74 	.word	0x20003d74
 801094c:	20003d54 	.word	0x20003d54
 8010950:	20003c50 	.word	0x20003c50
 8010954:	20003d0c 	.word	0x20003d0c
 8010958:	20003c4c 	.word	0x20003c4c
 801095c:	20003d60 	.word	0x20003d60

08010960 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010960:	b580      	push	{r7, lr}
 8010962:	b08a      	sub	sp, #40	; 0x28
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d109      	bne.n	8010984 <vTaskNotifyGiveFromISR+0x24>
	__asm volatile
 8010970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	61bb      	str	r3, [r7, #24]
 8010982:	e7fe      	b.n	8010982 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010984:	f7fc fa3c 	bl	800ce00 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 801098c:	f3ef 8211 	mrs	r2, BASEPRI
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	617a      	str	r2, [r7, #20]
 80109a2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80109a4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109a6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80109ae:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	2202      	movs	r2, #2
 80109b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80109b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c0:	659a      	str	r2, [r3, #88]	; 0x58

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80109c2:	7ffb      	ldrb	r3, [r7, #31]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d145      	bne.n	8010a54 <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d009      	beq.n	80109e4 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 80109d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	e7fe      	b.n	80109e2 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109e4:	4b20      	ldr	r3, [pc, #128]	; (8010a68 <vTaskNotifyGiveFromISR+0x108>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d11c      	bne.n	8010a26 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	3304      	adds	r3, #4
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fb ffc1 	bl	800c978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80109f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fa:	2201      	movs	r2, #1
 80109fc:	409a      	lsls	r2, r3
 80109fe:	4b1b      	ldr	r3, [pc, #108]	; (8010a6c <vTaskNotifyGiveFromISR+0x10c>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	4a19      	ldr	r2, [pc, #100]	; (8010a6c <vTaskNotifyGiveFromISR+0x10c>)
 8010a06:	6013      	str	r3, [r2, #0]
 8010a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	4a16      	ldr	r2, [pc, #88]	; (8010a70 <vTaskNotifyGiveFromISR+0x110>)
 8010a16:	441a      	add	r2, r3
 8010a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1a:	3304      	adds	r3, #4
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	4610      	mov	r0, r2
 8010a20:	f7fb ff4d 	bl	800c8be <vListInsertEnd>
 8010a24:	e005      	b.n	8010a32 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a28:	3318      	adds	r3, #24
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	4811      	ldr	r0, [pc, #68]	; (8010a74 <vTaskNotifyGiveFromISR+0x114>)
 8010a2e:	f7fb ff46 	bl	800c8be <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a36:	4b10      	ldr	r3, [pc, #64]	; (8010a78 <vTaskNotifyGiveFromISR+0x118>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d909      	bls.n	8010a54 <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d003      	beq.n	8010a4e <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	601a      	str	r2, [r3, #0]
 8010a4c:	e002      	b.n	8010a54 <vTaskNotifyGiveFromISR+0xf4>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8010a4e:	4b0b      	ldr	r3, [pc, #44]	; (8010a7c <vTaskNotifyGiveFromISR+0x11c>)
 8010a50:	2201      	movs	r2, #1
 8010a52:	601a      	str	r2, [r3, #0]
 8010a54:	6a3b      	ldr	r3, [r7, #32]
 8010a56:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8010a5e:	bf00      	nop
 8010a60:	3728      	adds	r7, #40	; 0x28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	20003d74 	.word	0x20003d74
 8010a6c:	20003d54 	.word	0x20003d54
 8010a70:	20003c50 	.word	0x20003c50
 8010a74:	20003d0c 	.word	0x20003d0c
 8010a78:	20003c4c 	.word	0x20003c4c
 8010a7c:	20003d60 	.word	0x20003d60

08010a80 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d102      	bne.n	8010a94 <xTaskNotifyStateClear+0x14>
 8010a8e:	4b0e      	ldr	r3, [pc, #56]	; (8010ac8 <xTaskNotifyStateClear+0x48>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	e000      	b.n	8010a96 <xTaskNotifyStateClear+0x16>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8010a98:	f7fc f8d8 	bl	800cc4c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	2b02      	cmp	r3, #2
 8010aa6:	d106      	bne.n	8010ab6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				xReturn = pdPASS;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e001      	b.n	8010aba <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8010aba:	f7fc f8f5 	bl	800cca8 <vPortExitCritical>

		return xReturn;
 8010abe:	68fb      	ldr	r3, [r7, #12]
	}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	20003c4c 	.word	0x20003c4c

08010acc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010ad6:	4b29      	ldr	r3, [pc, #164]	; (8010b7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010adc:	4b28      	ldr	r3, [pc, #160]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	3304      	adds	r3, #4
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fb ff48 	bl	800c978 <uxListRemove>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d10b      	bne.n	8010b06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8010aee:	4b24      	ldr	r3, [pc, #144]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af4:	2201      	movs	r2, #1
 8010af6:	fa02 f303 	lsl.w	r3, r2, r3
 8010afa:	43da      	mvns	r2, r3
 8010afc:	4b21      	ldr	r3, [pc, #132]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4013      	ands	r3, r2
 8010b02:	4a20      	ldr	r2, [pc, #128]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010b04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b0c:	d10a      	bne.n	8010b24 <prvAddCurrentTaskToDelayedList+0x58>
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d007      	beq.n	8010b24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b14:	4b1a      	ldr	r3, [pc, #104]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	3304      	adds	r3, #4
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	481a      	ldr	r0, [pc, #104]	; (8010b88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010b1e:	f7fb fece 	bl	800c8be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b22:	e026      	b.n	8010b72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	4413      	add	r3, r2
 8010b2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b2c:	4b14      	ldr	r3, [pc, #80]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b34:	68ba      	ldr	r2, [r7, #8]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d209      	bcs.n	8010b50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b3c:	4b13      	ldr	r3, [pc, #76]	; (8010b8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8010b3e:	681a      	ldr	r2, [r3, #0]
 8010b40:	4b0f      	ldr	r3, [pc, #60]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	3304      	adds	r3, #4
 8010b46:	4619      	mov	r1, r3
 8010b48:	4610      	mov	r0, r2
 8010b4a:	f7fb fedc 	bl	800c906 <vListInsert>
}
 8010b4e:	e010      	b.n	8010b72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b50:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	4b0a      	ldr	r3, [pc, #40]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	3304      	adds	r3, #4
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	4610      	mov	r0, r2
 8010b5e:	f7fb fed2 	bl	800c906 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b62:	4b0c      	ldr	r3, [pc, #48]	; (8010b94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	68ba      	ldr	r2, [r7, #8]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d202      	bcs.n	8010b72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010b6c:	4a09      	ldr	r2, [pc, #36]	; (8010b94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	6013      	str	r3, [r2, #0]
}
 8010b72:	bf00      	nop
 8010b74:	3710      	adds	r7, #16
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	20003d50 	.word	0x20003d50
 8010b80:	20003c4c 	.word	0x20003c4c
 8010b84:	20003d54 	.word	0x20003d54
 8010b88:	20003d38 	.word	0x20003d38
 8010b8c:	20003d08 	.word	0x20003d08
 8010b90:	20003d04 	.word	0x20003d04
 8010b94:	20003d6c 	.word	0x20003d6c

08010b98 <CLIPutChar>:
/* USER CODE BEGIN Variables */

/* USER CODE BEGIN Header_StartTerminalTask */


void CLIPutChar(char ucData){
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	71fb      	strb	r3, [r7, #7]
		// Envia um caracter
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)&ucData,1);
 8010ba2:	1dfb      	adds	r3, r7, #7
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4806      	ldr	r0, [pc, #24]	; (8010bc4 <CLIPutChar+0x2c>)
 8010baa:	f7f9 fa77 	bl	800a09c <HAL_UART_Transmit_IT>
		// Espera por uma interrupï¿½ï¿½o da UART
		xSemaphoreTake(semtxUSART2, portMAX_DELAY);
 8010bae:	4b06      	ldr	r3, [pc, #24]	; (8010bc8 <CLIPutChar+0x30>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fc ffd6 	bl	800db68 <xQueueSemaphoreTake>
}
 8010bbc:	bf00      	nop
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	20004440 	.word	0x20004440
 8010bc8:	20004038 	.word	0x20004038

08010bcc <CLIPutString>:



void CLIPutString(char *string, uint16_t size){
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	807b      	strh	r3, [r7, #2]
		/* Descobre o tamanho da string, caso não informado*/
		if (size == 0){
 8010bd8:	887b      	ldrh	r3, [r7, #2]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10b      	bne.n	8010bf6 <CLIPutString+0x2a>
			uint8_t *tmp = (uint8_t *)string;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	60fb      	str	r3, [r7, #12]

			while(*tmp++){
 8010be2:	e002      	b.n	8010bea <CLIPutString+0x1e>
				size++;
 8010be4:	887b      	ldrh	r3, [r7, #2]
 8010be6:	3301      	adds	r3, #1
 8010be8:	807b      	strh	r3, [r7, #2]
			while(*tmp++){
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	60fa      	str	r2, [r7, #12]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d1f6      	bne.n	8010be4 <CLIPutString+0x18>
			}
		}

		/* Transmite uma sequencia de dados, com fluxo controlado pela interrupção */
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)string, size);
 8010bf6:	887b      	ldrh	r3, [r7, #2]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	6879      	ldr	r1, [r7, #4]
 8010bfc:	4806      	ldr	r0, [pc, #24]	; (8010c18 <CLIPutString+0x4c>)
 8010bfe:	f7f9 fa4d 	bl	800a09c <HAL_UART_Transmit_IT>

		/*Aguarda o fim da transmissão*/
		xSemaphoreTake(semtxUSART2, portMAX_DELAY);
 8010c02:	4b06      	ldr	r3, [pc, #24]	; (8010c1c <CLIPutString+0x50>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fc ffac 	bl	800db68 <xQueueSemaphoreTake>
}
 8010c10:	bf00      	nop
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	20004440 	.word	0x20004440
 8010c1c:	20004038 	.word	0x20004038

08010c20 <CLIGetChar>:


void CLIGetChar(UART_HandleTypeDef *huart, uint8_t *data, uint32_t timeout)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b088      	sub	sp, #32
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	607a      	str	r2, [r7, #4]
	osEvent event;

	if (huart->Instance == USART2)
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4a0a      	ldr	r2, [pc, #40]	; (8010c5c <CLIGetChar+0x3c>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d10e      	bne.n	8010c54 <CLIGetChar+0x34>
	{
		event = osMessageGet(CLIReceptEvent, timeout);
 8010c36:	4b0a      	ldr	r3, [pc, #40]	; (8010c60 <CLIGetChar+0x40>)
 8010c38:	6819      	ldr	r1, [r3, #0]
 8010c3a:	f107 0314 	add.w	r3, r7, #20
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fb fb27 	bl	800c294 <osMessageGet>
		if(event.status == osEventMessage){
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	2b10      	cmp	r3, #16
 8010c4a:	d103      	bne.n	8010c54 <CLIGetChar+0x34>
			*data = (uint8_t)event.value.v;
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	b2da      	uxtb	r2, r3
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8010c54:	bf00      	nop
 8010c56:	3720      	adds	r7, #32
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	40004400 	.word	0x40004400
 8010c60:	2000403c 	.word	0x2000403c

08010c64 <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void const * argument)
{
 8010c64:	b590      	push	{r4, r7, lr}
 8010c66:	b08b      	sub	sp, #44	; 0x2c
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
	MX_USART2_UART_Init();
 8010c6c:	f002 fed8 	bl	8013a20 <MX_USART2_UART_Init>
	semtxUSART2 = xSemaphoreCreateBinary();
 8010c70:	2203      	movs	r2, #3
 8010c72:	2100      	movs	r1, #0
 8010c74:	2001      	movs	r0, #1
 8010c76:	f7fc fbd5 	bl	800d424 <xQueueGenericCreate>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	4b18      	ldr	r3, [pc, #96]	; (8010ce0 <StartTerminalTask+0x7c>)
 8010c7e:	601a      	str	r2, [r3, #0]

	semtxUSART3 = xSemaphoreCreateBinary();
 8010c80:	2203      	movs	r2, #3
 8010c82:	2100      	movs	r1, #0
 8010c84:	2001      	movs	r0, #1
 8010c86:	f7fc fbcd 	bl	800d424 <xQueueGenericCreate>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	4b15      	ldr	r3, [pc, #84]	; (8010ce4 <StartTerminalTask+0x80>)
 8010c8e:	601a      	str	r2, [r3, #0]

	osMessageQDef(CLIReceptEvent, 128, unsigned char);
 8010c90:	4b15      	ldr	r3, [pc, #84]	; (8010ce8 <StartTerminalTask+0x84>)
 8010c92:	f107 0418 	add.w	r4, r7, #24
 8010c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CLIReceptEvent = osMessageCreate(osMessageQ(CLIReceptEvent), NULL);
 8010c9c:	f107 0318 	add.w	r3, r7, #24
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7fb fa8c 	bl	800c1c0 <osMessageCreate>
 8010ca8:	4602      	mov	r2, r0
 8010caa:	4b10      	ldr	r3, [pc, #64]	; (8010cec <StartTerminalTask+0x88>)
 8010cac:	601a      	str	r2, [r3, #0]

	osMessageQDef(MonitorReceptEvent, 128, unsigned char);
 8010cae:	4b0e      	ldr	r3, [pc, #56]	; (8010ce8 <StartTerminalTask+0x84>)
 8010cb0:	f107 0408 	add.w	r4, r7, #8
 8010cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MonitorReceptEvent = osMessageCreate(osMessageQ(MonitorReceptEvent), NULL);
 8010cba:	f107 0308 	add.w	r3, r7, #8
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fb fa7d 	bl	800c1c0 <osMessageCreate>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	4b09      	ldr	r3, [pc, #36]	; (8010cf0 <StartTerminalTask+0x8c>)
 8010cca:	601a      	str	r2, [r3, #0]

	 for(;;)
	{
		//CLIGetChar(&huart2, (uint8_t*)&teste[0], osWaitForever);

		CLIPutString ("Envio do CLI (USART2)\n", 22);
 8010ccc:	2116      	movs	r1, #22
 8010cce:	4809      	ldr	r0, [pc, #36]	; (8010cf4 <StartTerminalTask+0x90>)
 8010cd0:	f7ff ff7c 	bl	8010bcc <CLIPutString>

		vTaskDelay(1000);
 8010cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010cd8:	f7fd feba 	bl	800ea50 <vTaskDelay>
		CLIPutString ("Envio do CLI (USART2)\n", 22);
 8010cdc:	e7f6      	b.n	8010ccc <StartTerminalTask+0x68>
 8010cde:	bf00      	nop
 8010ce0:	20004038 	.word	0x20004038
 8010ce4:	20004034 	.word	0x20004034
 8010ce8:	08014a74 	.word	0x08014a74
 8010cec:	2000403c 	.word	0x2000403c
 8010cf0:	20004040 	.word	0x20004040
 8010cf4:	08014a5c 	.word	0x08014a5c

08010cf8 <StartEventsProcessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEventsProcessTask */
void StartEventsProcessTask(void const * argument)
{
 8010cf8:	b590      	push	{r4, r7, lr}
 8010cfa:	b089      	sub	sp, #36	; 0x24
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
	semEventControl = xSemaphoreCreateBinary();
 8010d00:	2203      	movs	r2, #3
 8010d02:	2100      	movs	r1, #0
 8010d04:	2001      	movs	r0, #1
 8010d06:	f7fc fb8d 	bl	800d424 <xQueueGenericCreate>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	4b67      	ldr	r3, [pc, #412]	; (8010eac <StartEventsProcessTask+0x1b4>)
 8010d0e:	601a      	str	r2, [r3, #0]
	MX_TIM5_Init();   /*<!Timer que controla a remoção de peças*/
 8010d10:	f002 fd5a 	bl	80137c8 <MX_TIM5_Init>
	MX_TIM2_Init();   /*<!Timer que controla o speaker*/
 8010d14:	f002 fcf8 	bl	8013708 <MX_TIM2_Init>
	occurenceMonitor send;
	piece removed;

  for(;;)
  {
    xSemaphoreTake(semEventControl, portMAX_DELAY);
 8010d18:	4b64      	ldr	r3, [pc, #400]	; (8010eac <StartEventsProcessTask+0x1b4>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fc ff21 	bl	800db68 <xQueueSemaphoreTake>

	if (getSystemTime() % getPeriodoB2() == 0){
 8010d26:	f001 f8c1 	bl	8011eac <getSystemTime>
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	f001 f89a 	bl	8011e64 <getPeriodoB2>
 8010d30:	4603      	mov	r3, r0
 8010d32:	fbb4 f2f3 	udiv	r2, r4, r3
 8010d36:	fb03 f302 	mul.w	r3, r3, r2
 8010d3a:	1ae3      	subs	r3, r4, r3
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d151      	bne.n	8010de4 <StartEventsProcessTask+0xec>
		/*Deve-se retirar uma peça de B2*/
		if (xQueueReceive(qB2, &removed, 0)){
 8010d40:	4b5b      	ldr	r3, [pc, #364]	; (8010eb0 <StartEventsProcessTask+0x1b8>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f107 010c 	add.w	r1, r7, #12
 8010d48:	2200      	movs	r2, #0
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fc fe2f 	bl	800d9ae <xQueueReceive>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d046      	beq.n	8010de4 <StartEventsProcessTask+0xec>
			if (getSystemTime() - removed.tempo_insercao >= getTempoMaximo()){
 8010d56:	f001 f8a9 	bl	8011eac <getSystemTime>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	1ad4      	subs	r4, r2, r3
 8010d60:	f001 f898 	bl	8011e94 <getTempoMaximo>
 8010d64:	4603      	mov	r3, r0
 8010d66:	429c      	cmp	r4, r3
 8010d68:	d302      	bcc.n	8010d70 <StartEventsProcessTask+0x78>
				send.occurence = B2_estraga;
 8010d6a:	2307      	movs	r3, #7
 8010d6c:	753b      	strb	r3, [r7, #20]
 8010d6e:	e001      	b.n	8010d74 <StartEventsProcessTask+0x7c>
			}else{
				send.occurence = B2_retira;
 8010d70:	2305      	movs	r3, #5
 8010d72:	753b      	strb	r3, [r7, #20]
			}
			send.moment = getSystemTime();
 8010d74:	f001 f89a 	bl	8011eac <getSystemTime>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	61bb      	str	r3, [r7, #24]
			send.id = removed.id_peca;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	61fb      	str	r3, [r7, #28]

			xQueueSendToBack(qMonitor, &send, 1000);
 8010d80:	4b4c      	ldr	r3, [pc, #304]	; (8010eb4 <StartEventsProcessTask+0x1bc>)
 8010d82:	6818      	ldr	r0, [r3, #0]
 8010d84:	f107 0114 	add.w	r1, r7, #20
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d8e:	f7fc fbf6 	bl	800d57e <xQueueGenericSend>

			if (xQueueIsQueueEmptyFromISR(qB1) && xQueueIsQueueEmptyFromISR(qB2) && xQueueIsQueueEmptyFromISR(qB3)){
 8010d92:	4b49      	ldr	r3, [pc, #292]	; (8010eb8 <StartEventsProcessTask+0x1c0>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fd fb61 	bl	800e45e <xQueueIsQueueEmptyFromISR>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d020      	beq.n	8010de4 <StartEventsProcessTask+0xec>
 8010da2:	4b43      	ldr	r3, [pc, #268]	; (8010eb0 <StartEventsProcessTask+0x1b8>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fd fb59 	bl	800e45e <xQueueIsQueueEmptyFromISR>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d018      	beq.n	8010de4 <StartEventsProcessTask+0xec>
 8010db2:	4b42      	ldr	r3, [pc, #264]	; (8010ebc <StartEventsProcessTask+0x1c4>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7fd fb51 	bl	800e45e <xQueueIsQueueEmptyFromISR>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d010      	beq.n	8010de4 <StartEventsProcessTask+0xec>
				send.moment = getSystemTime();
 8010dc2:	f001 f873 	bl	8011eac <getSystemTime>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	61bb      	str	r3, [r7, #24]
				send.id = removed.id_peca;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	61fb      	str	r3, [r7, #28]
				send.occurence = end_process;
 8010dce:	2304      	movs	r3, #4
 8010dd0:	753b      	strb	r3, [r7, #20]

				xQueueSendToBack(qMonitor, &send, 1000);
 8010dd2:	4b38      	ldr	r3, [pc, #224]	; (8010eb4 <StartEventsProcessTask+0x1bc>)
 8010dd4:	6818      	ldr	r0, [r3, #0]
 8010dd6:	f107 0114 	add.w	r1, r7, #20
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010de0:	f7fc fbcd 	bl	800d57e <xQueueGenericSend>
			}

		}

	}
	if (getSystemTime() % getPeriodoB3() == 0){
 8010de4:	f001 f862 	bl	8011eac <getSystemTime>
 8010de8:	4604      	mov	r4, r0
 8010dea:	f001 f847 	bl	8011e7c <getPeriodoB3>
 8010dee:	4603      	mov	r3, r0
 8010df0:	fbb4 f2f3 	udiv	r2, r4, r3
 8010df4:	fb03 f302 	mul.w	r3, r3, r2
 8010df8:	1ae3      	subs	r3, r4, r3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d18c      	bne.n	8010d18 <StartEventsProcessTask+0x20>
		/*Deve-se retirar uma peça de B3*/
		if (xQueueReceive(qB3, &removed, 0)){
 8010dfe:	4b2f      	ldr	r3, [pc, #188]	; (8010ebc <StartEventsProcessTask+0x1c4>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f107 010c 	add.w	r1, r7, #12
 8010e06:	2200      	movs	r2, #0
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7fc fdd0 	bl	800d9ae <xQueueReceive>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d081      	beq.n	8010d18 <StartEventsProcessTask+0x20>
			if (getSystemTime() - removed.tempo_insercao >= getTempoMaximo()){
 8010e14:	f001 f84a 	bl	8011eac <getSystemTime>
 8010e18:	4602      	mov	r2, r0
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	1ad4      	subs	r4, r2, r3
 8010e1e:	f001 f839 	bl	8011e94 <getTempoMaximo>
 8010e22:	4603      	mov	r3, r0
 8010e24:	429c      	cmp	r4, r3
 8010e26:	d302      	bcc.n	8010e2e <StartEventsProcessTask+0x136>
				send.occurence = B3_estraga;
 8010e28:	2308      	movs	r3, #8
 8010e2a:	753b      	strb	r3, [r7, #20]
 8010e2c:	e001      	b.n	8010e32 <StartEventsProcessTask+0x13a>
			}else{
				send.occurence = B3_retira;
 8010e2e:	2306      	movs	r3, #6
 8010e30:	753b      	strb	r3, [r7, #20]
			}
			send.moment = getSystemTime();
 8010e32:	f001 f83b 	bl	8011eac <getSystemTime>
 8010e36:	4603      	mov	r3, r0
 8010e38:	61bb      	str	r3, [r7, #24]
			send.id = removed.id_peca;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	61fb      	str	r3, [r7, #28]

			xQueueSendToBack(qMonitor, &send, 1000);
 8010e3e:	4b1d      	ldr	r3, [pc, #116]	; (8010eb4 <StartEventsProcessTask+0x1bc>)
 8010e40:	6818      	ldr	r0, [r3, #0]
 8010e42:	f107 0114 	add.w	r1, r7, #20
 8010e46:	2300      	movs	r3, #0
 8010e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010e4c:	f7fc fb97 	bl	800d57e <xQueueGenericSend>

			if (xQueueIsQueueEmptyFromISR(qB1) && xQueueIsQueueEmptyFromISR(qB2) && xQueueIsQueueEmptyFromISR(qB3)){
 8010e50:	4b19      	ldr	r3, [pc, #100]	; (8010eb8 <StartEventsProcessTask+0x1c0>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fd fb02 	bl	800e45e <xQueueIsQueueEmptyFromISR>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	f43f af5b 	beq.w	8010d18 <StartEventsProcessTask+0x20>
 8010e62:	4b13      	ldr	r3, [pc, #76]	; (8010eb0 <StartEventsProcessTask+0x1b8>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fd faf9 	bl	800e45e <xQueueIsQueueEmptyFromISR>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f43f af52 	beq.w	8010d18 <StartEventsProcessTask+0x20>
 8010e74:	4b11      	ldr	r3, [pc, #68]	; (8010ebc <StartEventsProcessTask+0x1c4>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fd faf0 	bl	800e45e <xQueueIsQueueEmptyFromISR>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f43f af49 	beq.w	8010d18 <StartEventsProcessTask+0x20>
				send.moment = getSystemTime();
 8010e86:	f001 f811 	bl	8011eac <getSystemTime>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	61bb      	str	r3, [r7, #24]
				send.id = removed.id_peca;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	61fb      	str	r3, [r7, #28]
				send.occurence = end_process;
 8010e92:	2304      	movs	r3, #4
 8010e94:	753b      	strb	r3, [r7, #20]

				xQueueSendToBack(qMonitor, &send, 1000);
 8010e96:	4b07      	ldr	r3, [pc, #28]	; (8010eb4 <StartEventsProcessTask+0x1bc>)
 8010e98:	6818      	ldr	r0, [r3, #0]
 8010e9a:	f107 0114 	add.w	r1, r7, #20
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010ea4:	f7fc fb6b 	bl	800d57e <xQueueGenericSend>
    xSemaphoreTake(semEventControl, portMAX_DELAY);
 8010ea8:	e736      	b.n	8010d18 <StartEventsProcessTask+0x20>
 8010eaa:	bf00      	nop
 8010eac:	20004044 	.word	0x20004044
 8010eb0:	200041f4 	.word	0x200041f4
 8010eb4:	20003fe8 	.word	0x20003fe8
 8010eb8:	20004210 	.word	0x20004210
 8010ebc:	2000420c 	.word	0x2000420c

08010ec0 <event_A1_GO>:
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin);


/* ---------------------------------- FUNÇÕES EVENTOS -----------------------------------*/

void event_A1_GO (){
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_SET);
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	2108      	movs	r1, #8
 8010ec8:	4802      	ldr	r0, [pc, #8]	; (8010ed4 <event_A1_GO+0x14>)
 8010eca:	f7f0 ffa9 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8010ece:	bf00      	nop
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	40020400 	.word	0x40020400

08010ed8 <event_A2_GO>:

void event_A2_GO (){
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_SET);
 8010edc:	2201      	movs	r2, #1
 8010ede:	2110      	movs	r1, #16
 8010ee0:	4802      	ldr	r0, [pc, #8]	; (8010eec <event_A2_GO+0x14>)
 8010ee2:	f7f0 ff9d 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8010ee6:	bf00      	nop
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	40020400 	.word	0x40020400

08010ef0 <event_A3_GO>:

void event_A3_GO (){
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A3_go_GPIO_Port, A3_go_Pin, GPIO_PIN_SET);
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	2120      	movs	r1, #32
 8010ef8:	4806      	ldr	r0, [pc, #24]	; (8010f14 <event_A3_GO+0x24>)
 8010efa:	f7f0 ff91 	bl	8001e20 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 8010efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010f02:	f7fd fda5 	bl	800ea50 <vTaskDelay>
	HAL_GPIO_WritePin(A3_go_GPIO_Port, A3_go_Pin, GPIO_PIN_RESET);
 8010f06:	2200      	movs	r2, #0
 8010f08:	2120      	movs	r1, #32
 8010f0a:	4802      	ldr	r0, [pc, #8]	; (8010f14 <event_A3_GO+0x24>)
 8010f0c:	f7f0 ff88 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8010f10:	bf00      	nop
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	40020400 	.word	0x40020400

08010f18 <event_A1_ret>:

void event_A1_ret (){
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	2108      	movs	r1, #8
 8010f20:	4802      	ldr	r0, [pc, #8]	; (8010f2c <event_A1_ret+0x14>)
 8010f22:	f7f0 ff7d 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8010f26:	bf00      	nop
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	40020400 	.word	0x40020400

08010f30 <event_A2_ret>:

void event_A2_ret (){
 8010f30:	b580      	push	{r7, lr}
 8010f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8010f34:	2200      	movs	r2, #0
 8010f36:	2110      	movs	r1, #16
 8010f38:	4802      	ldr	r0, [pc, #8]	; (8010f44 <event_A2_ret+0x14>)
 8010f3a:	f7f0 ff71 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8010f3e:	bf00      	nop
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	40020400 	.word	0x40020400

08010f48 <event_A3_ret>:

void event_A3_ret (){
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A3_ret_GPIO_Port, A3_ret_Pin, GPIO_PIN_SET);
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010f52:	4807      	ldr	r0, [pc, #28]	; (8010f70 <event_A3_ret+0x28>)
 8010f54:	f7f0 ff64 	bl	8001e20 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 8010f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010f5c:	f7fd fd78 	bl	800ea50 <vTaskDelay>
	HAL_GPIO_WritePin(A3_ret_GPIO_Port, A3_ret_Pin, GPIO_PIN_RESET);
 8010f60:	2200      	movs	r2, #0
 8010f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010f66:	4802      	ldr	r0, [pc, #8]	; (8010f70 <event_A3_ret+0x28>)
 8010f68:	f7f0 ff5a 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8010f6c:	bf00      	nop
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	40020400 	.word	0x40020400

08010f74 <event_sp>:

void event_sp(){
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b086      	sub	sp, #24
 8010f78:	af00      	add	r7, sp, #0
	occurenceMonitor send;
	BaseType_t qResult;

	/*O elemento do início do processo produtivo necessariamente saiu de B1*/
	piece recieved;
	if (xSemaphoreTake(ChangeB1, portMAX_DELAY) == pdTRUE){
 8010f7a:	4b1f      	ldr	r3, [pc, #124]	; (8010ff8 <event_sp+0x84>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fc fdf0 	bl	800db68 <xQueueSemaphoreTake>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d10e      	bne.n	8010fac <event_sp+0x38>
		qResult = xQueueReceive(qB1, &recieved, 0);
 8010f8e:	4b1b      	ldr	r3, [pc, #108]	; (8010ffc <event_sp+0x88>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4639      	mov	r1, r7
 8010f94:	2200      	movs	r2, #0
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fc fd09 	bl	800d9ae <xQueueReceive>
 8010f9c:	6178      	str	r0, [r7, #20]

		xSemaphoreGive(ChangeB1);  /*!< Libera o Mutex*/
 8010f9e:	4b16      	ldr	r3, [pc, #88]	; (8010ff8 <event_sp+0x84>)
 8010fa0:	6818      	ldr	r0, [r3, #0]
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	f7fc fae9 	bl	800d57e <xQueueGenericSend>
	}

	if (qResult == pdTRUE){
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d113      	bne.n	8010fda <event_sp+0x66>
		recieved.tempo_insercao = getSystemTime();
 8010fb2:	f000 ff7b 	bl	8011eac <getSystemTime>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	607b      	str	r3, [r7, #4]

		esteira = recieved; /*O elemento agora está na esteira*/
 8010fba:	4b11      	ldr	r3, [pc, #68]	; (8011000 <event_sp+0x8c>)
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	463b      	mov	r3, r7
 8010fc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010fc4:	e882 0003 	stmia.w	r2, {r0, r1}

		send.occurence = peca_inicio;
 8010fc8:	2309      	movs	r3, #9
 8010fca:	723b      	strb	r3, [r7, #8]
		send.moment = getSystemTime();
 8010fcc:	f000 ff6e 	bl	8011eac <getSystemTime>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	60fb      	str	r3, [r7, #12]
		send.id = recieved.id_peca;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	613b      	str	r3, [r7, #16]
 8010fd8:	e001      	b.n	8010fde <event_sp+0x6a>

	}else{
		/*Não faz sentido, pois todas as peças que ingressam no processo
		produtivo devem vir de B1, e B1 está vazio!!! Sinaliza-se com um
		erro.*/
		send.occurence = qEvensType_max;
 8010fda:	230d      	movs	r3, #13
 8010fdc:	723b      	strb	r3, [r7, #8]
	}

	/*Envia para o monitor a mensagem para ser informada na na UART*/
	xQueueSendToBack(qMonitor, &send, 1000);
 8010fde:	4b09      	ldr	r3, [pc, #36]	; (8011004 <event_sp+0x90>)
 8010fe0:	6818      	ldr	r0, [r3, #0]
 8010fe2:	f107 0108 	add.w	r1, r7, #8
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010fec:	f7fc fac7 	bl	800d57e <xQueueGenericSend>

}
 8010ff0:	bf00      	nop
 8010ff2:	3718      	adds	r7, #24
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	20004228 	.word	0x20004228
 8010ffc:	20004210 	.word	0x20004210
 8011000:	2000422c 	.word	0x2000422c
 8011004:	20003fe8 	.word	0x20003fe8

08011008 <event_s1>:

void event_s1(){
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0

	occurenceMonitor send;

	send.occurence = B1_cai;
 801100e:	230a      	movs	r3, #10
 8011010:	713b      	strb	r3, [r7, #4]
	send.moment = getSystemTime();
 8011012:	f000 ff4b 	bl	8011eac <getSystemTime>
 8011016:	4603      	mov	r3, r0
 8011018:	60bb      	str	r3, [r7, #8]
	send.id = esteira.id_peca;
 801101a:	4b0b      	ldr	r3, [pc, #44]	; (8011048 <event_s1+0x40>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	60fb      	str	r3, [r7, #12]

	/*Envia para o monitor a mensagem para ser informada na na UART*/
	xQueueSendToBack(qMonitor, &send, 1000);
 8011020:	4b0a      	ldr	r3, [pc, #40]	; (801104c <event_s1+0x44>)
 8011022:	6818      	ldr	r0, [r3, #0]
 8011024:	1d39      	adds	r1, r7, #4
 8011026:	2300      	movs	r3, #0
 8011028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801102c:	f7fc faa7 	bl	800d57e <xQueueGenericSend>

	/*Insere o elemento no buffer B1*/
	xQueueSendToBack(qB1, &esteira, 1000);
 8011030:	4b07      	ldr	r3, [pc, #28]	; (8011050 <event_s1+0x48>)
 8011032:	6818      	ldr	r0, [r3, #0]
 8011034:	2300      	movs	r3, #0
 8011036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801103a:	4903      	ldr	r1, [pc, #12]	; (8011048 <event_s1+0x40>)
 801103c:	f7fc fa9f 	bl	800d57e <xQueueGenericSend>

}
 8011040:	bf00      	nop
 8011042:	3710      	adds	r7, #16
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	2000422c 	.word	0x2000422c
 801104c:	20003fe8 	.word	0x20003fe8
 8011050:	20004210 	.word	0x20004210

08011054 <event_s2>:

void event_s2(){
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0

	occurenceMonitor send;

	send.occurence = B2_cai;
 801105a:	230b      	movs	r3, #11
 801105c:	713b      	strb	r3, [r7, #4]
	send.moment = getSystemTime();
 801105e:	f000 ff25 	bl	8011eac <getSystemTime>
 8011062:	4603      	mov	r3, r0
 8011064:	60bb      	str	r3, [r7, #8]
	send.id = esteira.id_peca;
 8011066:	4b0b      	ldr	r3, [pc, #44]	; (8011094 <event_s2+0x40>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	60fb      	str	r3, [r7, #12]

	/*Envia para o monitor a mensagem para ser informada na na UART*/
	xQueueSendToBack(qMonitor, &send, 1000);
 801106c:	4b0a      	ldr	r3, [pc, #40]	; (8011098 <event_s2+0x44>)
 801106e:	6818      	ldr	r0, [r3, #0]
 8011070:	1d39      	adds	r1, r7, #4
 8011072:	2300      	movs	r3, #0
 8011074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011078:	f7fc fa81 	bl	800d57e <xQueueGenericSend>

	/*Insere o elemento no buffer B1*/
	xQueueSendToBack(qB2, &esteira, 1000);
 801107c:	4b07      	ldr	r3, [pc, #28]	; (801109c <event_s2+0x48>)
 801107e:	6818      	ldr	r0, [r3, #0]
 8011080:	2300      	movs	r3, #0
 8011082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011086:	4903      	ldr	r1, [pc, #12]	; (8011094 <event_s2+0x40>)
 8011088:	f7fc fa79 	bl	800d57e <xQueueGenericSend>

}
 801108c:	bf00      	nop
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	2000422c 	.word	0x2000422c
 8011098:	20003fe8 	.word	0x20003fe8
 801109c:	200041f4 	.word	0x200041f4

080110a0 <event_s3>:

void event_s3(){
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0

	occurenceMonitor send;

	send.occurence = B3_cai;
 80110a6:	230c      	movs	r3, #12
 80110a8:	713b      	strb	r3, [r7, #4]
	send.moment = getSystemTime();
 80110aa:	f000 feff 	bl	8011eac <getSystemTime>
 80110ae:	4603      	mov	r3, r0
 80110b0:	60bb      	str	r3, [r7, #8]
	send.id = esteira.id_peca;
 80110b2:	4b0b      	ldr	r3, [pc, #44]	; (80110e0 <event_s3+0x40>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	60fb      	str	r3, [r7, #12]

	/*Envia para o monitor a mensagem para ser informada na na UART*/
	xQueueSendToBack(qMonitor, &send, 1000);
 80110b8:	4b0a      	ldr	r3, [pc, #40]	; (80110e4 <event_s3+0x44>)
 80110ba:	6818      	ldr	r0, [r3, #0]
 80110bc:	1d39      	adds	r1, r7, #4
 80110be:	2300      	movs	r3, #0
 80110c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80110c4:	f7fc fa5b 	bl	800d57e <xQueueGenericSend>

	/*Insere o elemento no buffer B1*/
	xQueueSendToBack(qB3, &esteira, 1000);
 80110c8:	4b07      	ldr	r3, [pc, #28]	; (80110e8 <event_s3+0x48>)
 80110ca:	6818      	ldr	r0, [r3, #0]
 80110cc:	2300      	movs	r3, #0
 80110ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80110d2:	4903      	ldr	r1, [pc, #12]	; (80110e0 <event_s3+0x40>)
 80110d4:	f7fc fa53 	bl	800d57e <xQueueGenericSend>

}
 80110d8:	bf00      	nop
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	2000422c 	.word	0x2000422c
 80110e4:	20003fe8 	.word	0x20003fe8
 80110e8:	2000420c 	.word	0x2000420c

080110ec <initStateMachine>:
  * @brief  Incializa uma máquina de estados para o controle do Banco de Ensaios
  * XC231. Esta função prepara a máquina para ser executada, porém não a executa.
  * @param sm: Ponteiro para a máquina de estados ao qual deseja-se inicializar.
  * @retval None
  */
void initStateMachine (sm_t* sm){
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]

	sm->state = &sm->states_list[ST_INITIAL]; /*Aponta o estado atual para o estado inicial*/
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	sm->occur_event = alphabet_max;   /*Quando nenhum evento ocorre na planta*/
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	220a      	movs	r2, #10
 8011100:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	/*Definir para cada evento um callback (ou manter o callback nulo)*/
	sm->events_list[B1_in].event_id = B1_in;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	sm->events_list[B1_in].callback = (Callb_event_t)event_A1_GO;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4a9b      	ldr	r2, [pc, #620]	; (801137c <initStateMachine+0x290>)
 8011110:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	sm->events_list[B1_in].controllable = TRUE;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2201      	movs	r2, #1
 8011118:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

	sm->events_list[B2_in].event_id = B2_in;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2201      	movs	r2, #1
 8011120:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	sm->events_list[B2_in].callback = (Callb_event_t)event_A2_GO;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	4a96      	ldr	r2, [pc, #600]	; (8011380 <initStateMachine+0x294>)
 8011128:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	sm->events_list[B2_in].controllable = TRUE;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2201      	movs	r2, #1
 8011130:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

	sm->events_list[B3_in].event_id = B3_in;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2202      	movs	r2, #2
 8011138:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	sm->events_list[B3_in].callback = (Callb_event_t)event_A3_GO;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4a91      	ldr	r2, [pc, #580]	; (8011384 <initStateMachine+0x298>)
 8011140:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	sm->events_list[B3_in].controllable = TRUE;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2201      	movs	r2, #1
 8011148:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	sm->events_list[B1_out].event_id = B1_out;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2203      	movs	r2, #3
 8011150:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	sm->events_list[B1_out].callback = (Callb_event_t)event_A1_ret;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4a8c      	ldr	r2, [pc, #560]	; (8011388 <initStateMachine+0x29c>)
 8011158:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	sm->events_list[B1_out].controllable = TRUE;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2201      	movs	r2, #1
 8011160:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	sm->events_list[B2_out].event_id = B2_out;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2204      	movs	r2, #4
 8011168:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	sm->events_list[B2_out].callback = (Callb_event_t)event_A2_ret;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4a87      	ldr	r2, [pc, #540]	; (801138c <initStateMachine+0x2a0>)
 8011170:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	sm->events_list[B2_out].controllable = TRUE;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2201      	movs	r2, #1
 8011178:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

	sm->events_list[B3_out].event_id = B3_out;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2205      	movs	r2, #5
 8011180:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	sm->events_list[B3_out].callback = (Callb_event_t)event_A3_ret;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a82      	ldr	r2, [pc, #520]	; (8011390 <initStateMachine+0x2a4>)
 8011188:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	sm->events_list[B3_out].controllable = TRUE;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164

	sm->events_list[s1].event_id = s1;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2206      	movs	r2, #6
 8011198:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	sm->events_list[s1].callback = (Callb_event_t)event_s1;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	4a7d      	ldr	r2, [pc, #500]	; (8011394 <initStateMachine+0x2a8>)
 80111a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	sm->events_list[s1].controllable = FALSE;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	sm->events_list[s2].event_id = s2;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2207      	movs	r2, #7
 80111b0:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	sm->events_list[s2].callback = (Callb_event_t)event_s2;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	4a78      	ldr	r2, [pc, #480]	; (8011398 <initStateMachine+0x2ac>)
 80111b8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	sm->events_list[s2].controllable = FALSE;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	sm->events_list[s3].event_id = s3;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2208      	movs	r2, #8
 80111c8:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	sm->events_list[s3].callback = (Callb_event_t)event_s3;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4a73      	ldr	r2, [pc, #460]	; (801139c <initStateMachine+0x2b0>)
 80111d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	sm->events_list[s3].controllable = FALSE;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188

	sm->events_list[sp].event_id = sp;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2209      	movs	r2, #9
 80111e0:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	sm->events_list[sp].callback = (Callb_event_t)event_sp;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4a6e      	ldr	r2, [pc, #440]	; (80113a0 <initStateMachine+0x2b4>)
 80111e8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	sm->events_list[sp].controllable = FALSE;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2200      	movs	r2, #0
 80111f0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194


	/*Definir as transições de cada estado do autômato*/
	sm->states_list[ST_INITIAL].list_trans[0].dst = &sm->states_list[ST_1];
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	605a      	str	r2, [r3, #4]
	sm->states_list[ST_INITIAL].list_trans[0].event = &sm->events_list[sp];
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	601a      	str	r2, [r3, #0]
	sm->states_list[ST_INITIAL].list_trans[1].event = NULL;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2200      	movs	r2, #0
 801120c:	609a      	str	r2, [r3, #8]
	sm->states_list[ST_INITIAL].list_trans[1].event = NULL;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2200      	movs	r2, #0
 8011212:	609a      	str	r2, [r3, #8]
	sm->states_list[ST_INITIAL].marked = TRUE;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2201      	movs	r2, #1
 8011218:	f883 2020 	strb.w	r2, [r3, #32]

	sm->states_list[ST_1].list_trans[0].dst = &sm->states_list[ST_6];
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	629a      	str	r2, [r3, #40]	; 0x28
	sm->states_list[ST_1].list_trans[0].event = &sm->events_list[B1_in];
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f503 7290 	add.w	r2, r3, #288	; 0x120
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	625a      	str	r2, [r3, #36]	; 0x24
	sm->states_list[ST_1].list_trans[1].dst = &sm->states_list[ST_4];
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	631a      	str	r2, [r3, #48]	; 0x30
	sm->states_list[ST_1].list_trans[1].event = &sm->events_list[B2_in];
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	62da      	str	r2, [r3, #44]	; 0x2c
	sm->states_list[ST_1].list_trans[2].dst = &sm->states_list[ST_2];
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f103 0248 	add.w	r2, r3, #72	; 0x48
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	639a      	str	r2, [r3, #56]	; 0x38
	sm->states_list[ST_1].list_trans[2].event = &sm->events_list[B3_in];
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	635a      	str	r2, [r3, #52]	; 0x34
	sm->states_list[ST_1].list_trans[3].event = NULL;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	63da      	str	r2, [r3, #60]	; 0x3c
	sm->states_list[ST_1].list_trans[3].event = NULL;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	63da      	str	r2, [r3, #60]	; 0x3c
	sm->states_list[ST_1].marked = FALSE;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	sm->states_list[ST_2].list_trans[0].dst = &sm->states_list[ST_3];
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	64da      	str	r2, [r3, #76]	; 0x4c
	sm->states_list[ST_2].list_trans[0].event = &sm->events_list[s3];
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	649a      	str	r2, [r3, #72]	; 0x48
	sm->states_list[ST_2].list_trans[1].event = NULL;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	651a      	str	r2, [r3, #80]	; 0x50
	sm->states_list[ST_2].list_trans[1].event = NULL;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2200      	movs	r2, #0
 801128a:	651a      	str	r2, [r3, #80]	; 0x50
	sm->states_list[ST_2].marked = FALSE;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	sm->states_list[ST_3].list_trans[0].dst = &sm->states_list[ST_INITIAL];
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	671a      	str	r2, [r3, #112]	; 0x70
	sm->states_list[ST_3].list_trans[0].event = &sm->events_list[B3_out];
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	66da      	str	r2, [r3, #108]	; 0x6c
	sm->states_list[ST_3].list_trans[1].event = NULL;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	675a      	str	r2, [r3, #116]	; 0x74
	sm->states_list[ST_3].list_trans[1].event = NULL;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2200      	movs	r2, #0
 80112ae:	675a      	str	r2, [r3, #116]	; 0x74
	sm->states_list[ST_3].marked = FALSE;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2200      	movs	r2, #0
 80112b4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	sm->states_list[ST_4].list_trans[0].dst = &sm->states_list[ST_5];
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	sm->states_list[ST_4].list_trans[0].event = &sm->events_list[s2];
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sm->states_list[ST_4].list_trans[1].event = NULL;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	sm->states_list[ST_4].list_trans[1].event = NULL;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	sm->states_list[ST_4].marked = FALSE;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2200      	movs	r2, #0
 80112e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

	sm->states_list[ST_5].list_trans[0].dst = &sm->states_list[ST_INITIAL];
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	sm->states_list[ST_5].list_trans[0].event = &sm->events_list[B2_out];
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	sm->states_list[ST_5].list_trans[1].event = NULL;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	sm->states_list[ST_5].list_trans[1].event = NULL;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	sm->states_list[ST_5].marked = FALSE;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4

	sm->states_list[ST_6].list_trans[0].dst = &sm->states_list[ST_7];
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	sm->states_list[ST_6].list_trans[0].event = &sm->events_list[s1];
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	sm->states_list[ST_6].list_trans[1].event = NULL;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	sm->states_list[ST_6].list_trans[1].event = NULL;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	sm->states_list[ST_6].marked = FALSE;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8

	sm->states_list[ST_7].list_trans[0].dst = &sm->states_list[ST_INITIAL];
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	sm->states_list[ST_7].list_trans[0].event = &sm->events_list[B1_out];
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	sm->states_list[ST_7].list_trans[1].event = NULL;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	sm->states_list[ST_7].list_trans[1].event = NULL;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2200      	movs	r2, #0
 8011364:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	sm->states_list[ST_7].marked = FALSE;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2200      	movs	r2, #0
 801136c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	08010ec1 	.word	0x08010ec1
 8011380:	08010ed9 	.word	0x08010ed9
 8011384:	08010ef1 	.word	0x08010ef1
 8011388:	08010f19 	.word	0x08010f19
 801138c:	08010f31 	.word	0x08010f31
 8011390:	08010f49 	.word	0x08010f49
 8011394:	08011009 	.word	0x08011009
 8011398:	08011055 	.word	0x08011055
 801139c:	080110a1 	.word	0x080110a1
 80113a0:	08010f75 	.word	0x08010f75

080113a4 <execSM_classic>:
  * @param sm: Ponteiro para a máquina de estados ao qual deseja-se executar.
  * @note A máquina de estados sm deve neccessariamente já estar inicializada
  * com a função initStateMachine.
  * @retval None
  */
void execSM_classic(sm_t* sm){
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b086      	sub	sp, #24
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80113ac:	2300      	movs	r3, #0
 80113ae:	75fb      	strb	r3, [r7, #23]

	Callb_event_t exec_func = NULL;
 80113b0:	2300      	movs	r3, #0
 80113b2:	613b      	str	r3, [r7, #16]
	State* new_state = NULL;
 80113b4:	2300      	movs	r3, #0
 80113b6:	60fb      	str	r3, [r7, #12]

	/*Adquire o mutex para que ninguém possa modificar a máquina de estados
	 * durante sua execução*/
	if (xSemaphoreTake(ChangeSmMutex, portMAX_DELAY) == pdTRUE){
 80113b8:	4b38      	ldr	r3, [pc, #224]	; (801149c <execSM_classic+0xf8>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fc fbd1 	bl	800db68 <xQueueSemaphoreTake>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d159      	bne.n	8011480 <execSM_classic+0xdc>

		/*Varre a lista de transições em busca de alguma que possa ocorrer*/
		while (new_state == NULL){
 80113cc:	e04e      	b.n	801146c <execSM_classic+0xc8>

			/*Chegou no final vetor de eventos e não encontrou
			 * transição pra ocorrrer, deve-se esperar um evento da planta*/
			if (sm->state->list_trans[i].event == NULL){
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80113d4:	7dfa      	ldrb	r2, [r7, #23]
 80113d6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d11a      	bne.n	8011414 <execSM_classic+0x70>
				i=0;
 80113de:	2300      	movs	r3, #0
 80113e0:	75fb      	strb	r3, [r7, #23]
				/*Libera o mutex e dorme*/
				xSemaphoreGive(ChangeSmMutex);
 80113e2:	4b2e      	ldr	r3, [pc, #184]	; (801149c <execSM_classic+0xf8>)
 80113e4:	6818      	ldr	r0, [r3, #0]
 80113e6:	2300      	movs	r3, #0
 80113e8:	2200      	movs	r2, #0
 80113ea:	2100      	movs	r1, #0
 80113ec:	f7fc f8c7 	bl	800d57e <xQueueGenericSend>
				xSemaphoreTake(semBlocking, portMAX_DELAY);
 80113f0:	4b2b      	ldr	r3, [pc, #172]	; (80114a0 <execSM_classic+0xfc>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fc fbb5 	bl	800db68 <xQueueSemaphoreTake>
				/*Ao acordar, adquire o mutex novamente, pois ele foi liberado antes de dormir*/
				while(xSemaphoreTake(ChangeSmMutex, portMAX_DELAY) != pdTRUE);
 80113fe:	bf00      	nop
 8011400:	4b26      	ldr	r3, [pc, #152]	; (801149c <execSM_classic+0xf8>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011408:	4618      	mov	r0, r3
 801140a:	f7fc fbad 	bl	800db68 <xQueueSemaphoreTake>
 801140e:	4603      	mov	r3, r0
 8011410:	2b01      	cmp	r3, #1
 8011412:	d1f5      	bne.n	8011400 <execSM_classic+0x5c>
			}

			/*Se o evento for controlável, ocorre de toda forma
			 *Se o evento não for controlável, verifica se ele ocorreu na planta*/
			if (sm->state->list_trans[i].event->controllable == TRUE ||
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 801141a:	7dfa      	ldrb	r2, [r7, #23]
 801141c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8011420:	7a1b      	ldrb	r3, [r3, #8]
 8011422:	2b01      	cmp	r3, #1
 8011424:	d00b      	beq.n	801143e <execSM_classic+0x9a>
				sm->state->list_trans[i].event->event_id == sm->occur_event){
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 801142c:	7dfa      	ldrb	r2, [r7, #23]
 801142e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8011432:	781a      	ldrb	r2, [r3, #0]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
			if (sm->state->list_trans[i].event->controllable == TRUE ||
 801143a:	429a      	cmp	r2, r3
 801143c:	d113      	bne.n	8011466 <execSM_classic+0xc2>

				/*Controle clássico - A primeira transição encontrada vai ocorrer*/
				sm->occur_event = alphabet_max;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	220a      	movs	r2, #10
 8011442:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
				exec_func = sm->state->list_trans[i].event->callback;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 801144c:	7dfa      	ldrb	r2, [r7, #23]
 801144e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	613b      	str	r3, [r7, #16]
				new_state = sm->state->list_trans[i].dst;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 801145c:	7dfb      	ldrb	r3, [r7, #23]
 801145e:	00db      	lsls	r3, r3, #3
 8011460:	4413      	add	r3, r2
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	60fb      	str	r3, [r7, #12]
			}

			i++;
 8011466:	7dfb      	ldrb	r3, [r7, #23]
 8011468:	3301      	adds	r3, #1
 801146a:	75fb      	strb	r3, [r7, #23]
		while (new_state == NULL){
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d0ad      	beq.n	80113ce <execSM_classic+0x2a>
		}
		xSemaphoreGive(ChangeSmMutex);
 8011472:	4b0a      	ldr	r3, [pc, #40]	; (801149c <execSM_classic+0xf8>)
 8011474:	6818      	ldr	r0, [r3, #0]
 8011476:	2300      	movs	r3, #0
 8011478:	2200      	movs	r2, #0
 801147a:	2100      	movs	r1, #0
 801147c:	f7fc f87f 	bl	800d57e <xQueueGenericSend>
	}

	/*No controle clássico apenas executa-se a transição encontrada*/
	if (exec_func != NULL)
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <execSM_classic+0xe6>
		exec_func();
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	4798      	blx	r3
	sm->state = new_state;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	68fa      	ldr	r2, [r7, #12]
 801148e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

}
 8011492:	bf00      	nop
 8011494:	3718      	adds	r7, #24
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	2000423c 	.word	0x2000423c
 80114a0:	20004224 	.word	0x20004224

080114a4 <execSM_otm>:
  * de forma otimizada.
  * @note A máquina de estados sm deve neccessariamente já estar inicializada
  * com a função initStateMachine.
  * @retval None
  */
void execSM_otm(sm_t* sm){
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b088      	sub	sp, #32
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]

	Trans* enabled_trans[4];
	uint8_t numb_enabled_trans = 0;
 80114ac:	2300      	movs	r3, #0
 80114ae:	77fb      	strb	r3, [r7, #31]
	uint8_t i=0;
 80114b0:	2300      	movs	r3, #0
 80114b2:	77bb      	strb	r3, [r7, #30]

	/*Apaga resquísios de execuções antigas*/
	memset (enabled_trans, 0, 4*sizeof(Trans*));
 80114b4:	f107 030c 	add.w	r3, r7, #12
 80114b8:	2210      	movs	r2, #16
 80114ba:	2100      	movs	r1, #0
 80114bc:	4618      	mov	r0, r3
 80114be:	f003 fa5e 	bl	801497e <memset>

	/*Adquire o mutex para que ninguém possa modificar a máquina de estados
	 * durante sua execução*/
	if (xSemaphoreTake(ChangeSmMutex, portMAX_DELAY) == pdTRUE){
 80114c2:	4b41      	ldr	r3, [pc, #260]	; (80115c8 <execSM_otm+0x124>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fc fb4c 	bl	800db68 <xQueueSemaphoreTake>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d174      	bne.n	80115c0 <execSM_otm+0x11c>

		/*Varre a lista de transições em busca de alguma que possa ocorrer*/
		while (!(sm->state->list_trans[i].event == NULL && numb_enabled_trans > 0)){
 80114d6:	e04a      	b.n	801156e <execSM_otm+0xca>

			/*Chegou no final vetor de eventos e não encontrou
			 * transição pra ocorrrer, deve-se esperar um evento da planta*/
			if (sm->state->list_trans[i].event == NULL){
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80114de:	7fba      	ldrb	r2, [r7, #30]
 80114e0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d11a      	bne.n	801151e <execSM_otm+0x7a>
				i=0;
 80114e8:	2300      	movs	r3, #0
 80114ea:	77bb      	strb	r3, [r7, #30]
				/*Libera o mutex e dorme*/
				xSemaphoreGive(ChangeSmMutex);
 80114ec:	4b36      	ldr	r3, [pc, #216]	; (80115c8 <execSM_otm+0x124>)
 80114ee:	6818      	ldr	r0, [r3, #0]
 80114f0:	2300      	movs	r3, #0
 80114f2:	2200      	movs	r2, #0
 80114f4:	2100      	movs	r1, #0
 80114f6:	f7fc f842 	bl	800d57e <xQueueGenericSend>
				xSemaphoreTake(semBlocking, portMAX_DELAY);
 80114fa:	4b34      	ldr	r3, [pc, #208]	; (80115cc <execSM_otm+0x128>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011502:	4618      	mov	r0, r3
 8011504:	f7fc fb30 	bl	800db68 <xQueueSemaphoreTake>
				/*Ao acordar, adquire o mutex novamente, pois ele foi liberado antes de dormir*/
				while(xSemaphoreTake(ChangeSmMutex, portMAX_DELAY) != pdTRUE);
 8011508:	bf00      	nop
 801150a:	4b2f      	ldr	r3, [pc, #188]	; (80115c8 <execSM_otm+0x124>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011512:	4618      	mov	r0, r3
 8011514:	f7fc fb28 	bl	800db68 <xQueueSemaphoreTake>
 8011518:	4603      	mov	r3, r0
 801151a:	2b01      	cmp	r3, #1
 801151c:	d1f5      	bne.n	801150a <execSM_otm+0x66>

			}

			if (sm->state->list_trans[i].event->controllable == TRUE ||
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8011524:	7fba      	ldrb	r2, [r7, #30]
 8011526:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801152a:	7a1b      	ldrb	r3, [r3, #8]
 801152c:	2b01      	cmp	r3, #1
 801152e:	d00b      	beq.n	8011548 <execSM_otm+0xa4>
				sm->state->list_trans[i].event->event_id == sm->occur_event){
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8011536:	7fba      	ldrb	r2, [r7, #30]
 8011538:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801153c:	781a      	ldrb	r2, [r3, #0]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
			if (sm->state->list_trans[i].event->controllable == TRUE ||
 8011544:	429a      	cmp	r2, r3
 8011546:	d10f      	bne.n	8011568 <execSM_otm+0xc4>
					/*Controle estendido - Cria uma lista de transições habilitadas*/
					enabled_trans[numb_enabled_trans++] = &(sm->state->list_trans[i]);
 8011548:	7ffb      	ldrb	r3, [r7, #31]
 801154a:	1c5a      	adds	r2, r3, #1
 801154c:	77fa      	strb	r2, [r7, #31]
 801154e:	4619      	mov	r1, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8011556:	7fbb      	ldrb	r3, [r7, #30]
 8011558:	00db      	lsls	r3, r3, #3
 801155a:	441a      	add	r2, r3
 801155c:	008b      	lsls	r3, r1, #2
 801155e:	f107 0120 	add.w	r1, r7, #32
 8011562:	440b      	add	r3, r1
 8011564:	f843 2c14 	str.w	r2, [r3, #-20]
			}

			i++;
 8011568:	7fbb      	ldrb	r3, [r7, #30]
 801156a:	3301      	adds	r3, #1
 801156c:	77bb      	strb	r3, [r7, #30]
		while (!(sm->state->list_trans[i].event == NULL && numb_enabled_trans > 0)){
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8011574:	7fba      	ldrb	r2, [r7, #30]
 8011576:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1ac      	bne.n	80114d8 <execSM_otm+0x34>
 801157e:	7ffb      	ldrb	r3, [r7, #31]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d0a9      	beq.n	80114d8 <execSM_otm+0x34>
		}


		enabled_trans[numb_enabled_trans]=NULL; /*Para indicar o fim do vetor*/
 8011584:	7ffb      	ldrb	r3, [r7, #31]
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	f107 0220 	add.w	r2, r7, #32
 801158c:	4413      	add	r3, r2
 801158e:	2200      	movs	r2, #0
 8011590:	f843 2c14 	str.w	r2, [r3, #-20]

		/*Notifica o Otimizador, acordando-o*/
		xTaskNotify(ComSup2Otm, (uint32_t)&enabled_trans[0], eSetValueWithOverwrite);
 8011594:	4b0e      	ldr	r3, [pc, #56]	; (80115d0 <execSM_otm+0x12c>)
 8011596:	6818      	ldr	r0, [r3, #0]
 8011598:	f107 010c 	add.w	r1, r7, #12
 801159c:	2300      	movs	r3, #0
 801159e:	2203      	movs	r2, #3
 80115a0:	f7ff f878 	bl	8010694 <xTaskGenericNotify>
		/*Coloca o Supervisor pra Dormir*/
		xSemaphoreTake(inOtm, portMAX_DELAY);
 80115a4:	4b0b      	ldr	r3, [pc, #44]	; (80115d4 <execSM_otm+0x130>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fc fadb 	bl	800db68 <xQueueSemaphoreTake>

		xSemaphoreGive(ChangeSmMutex);
 80115b2:	4b05      	ldr	r3, [pc, #20]	; (80115c8 <execSM_otm+0x124>)
 80115b4:	6818      	ldr	r0, [r3, #0]
 80115b6:	2300      	movs	r3, #0
 80115b8:	2200      	movs	r2, #0
 80115ba:	2100      	movs	r1, #0
 80115bc:	f7fb ffdf 	bl	800d57e <xQueueGenericSend>
	}

}
 80115c0:	bf00      	nop
 80115c2:	3720      	adds	r7, #32
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	2000423c 	.word	0x2000423c
 80115cc:	20004224 	.word	0x20004224
 80115d0:	20003d80 	.word	0x20003d80
 80115d4:	200041ec 	.word	0x200041ec

080115d8 <calc_beneficio>:

volatile uint32_t buf;
volatile float beneficio;
float calc_beneficio(SystemParameters* p, Trans* transa, uint32_t time){
 80115d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	60f8      	str	r0, [r7, #12]
 80115e2:	60b9      	str	r1, [r7, #8]
 80115e4:	607a      	str	r2, [r7, #4]


	if (transa->event->event_id == B2_in){
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d16d      	bne.n	80116cc <calc_beneficio+0xf4>
		buf = (uint32_t)uxQueueMessagesWaiting(qB2);
 80115f0:	4b76      	ldr	r3, [pc, #472]	; (80117cc <calc_beneficio+0x1f4>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fc fd7f 	bl	800e0f8 <uxQueueMessagesWaiting>
 80115fa:	4602      	mov	r2, r0
 80115fc:	4b74      	ldr	r3, [pc, #464]	; (80117d0 <calc_beneficio+0x1f8>)
 80115fe:	601a      	str	r2, [r3, #0]

		if ((((buf + 1)*p->periodo_B2) - (time% p->periodo_B2)) >= (uint32_t)p->tempo_maximo){
 8011600:	4b73      	ldr	r3, [pc, #460]	; (80117d0 <calc_beneficio+0x1f8>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	3301      	adds	r3, #1
 8011606:	68fa      	ldr	r2, [r7, #12]
 8011608:	6912      	ldr	r2, [r2, #16]
 801160a:	fb02 f103 	mul.w	r1, r2, r3
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	691a      	ldr	r2, [r3, #16]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	fbb3 f0f2 	udiv	r0, r3, r2
 8011618:	fb02 f200 	mul.w	r2, r2, r0
 801161c:	1a9b      	subs	r3, r3, r2
 801161e:	1acb      	subs	r3, r1, r3
 8011620:	68fa      	ldr	r2, [r7, #12]
 8011622:	7e12      	ldrb	r2, [r2, #24]
 8011624:	4293      	cmp	r3, r2
 8011626:	d32e      	bcc.n	8011686 <calc_beneficio+0xae>
			beneficio = (-1.0*p->custo_peca)/(((buf + 1)*p->periodo_B2) - (time% p->periodo_B2));
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	4618      	mov	r0, r3
 801162e:	f002 fced 	bl	801400c <__aeabi_ui2d>
 8011632:	4603      	mov	r3, r0
 8011634:	460c      	mov	r4, r1
 8011636:	4698      	mov	r8, r3
 8011638:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 801163c:	4b64      	ldr	r3, [pc, #400]	; (80117d0 <calc_beneficio+0x1f8>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	3301      	adds	r3, #1
 8011642:	68fa      	ldr	r2, [r7, #12]
 8011644:	6912      	ldr	r2, [r2, #16]
 8011646:	fb02 f103 	mul.w	r1, r2, r3
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	691a      	ldr	r2, [r3, #16]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	fbb3 f0f2 	udiv	r0, r3, r2
 8011654:	fb02 f200 	mul.w	r2, r2, r0
 8011658:	1a9b      	subs	r3, r3, r2
 801165a:	1acb      	subs	r3, r1, r3
 801165c:	4618      	mov	r0, r3
 801165e:	f002 fcd5 	bl	801400c <__aeabi_ui2d>
 8011662:	4603      	mov	r3, r0
 8011664:	460c      	mov	r4, r1
 8011666:	461a      	mov	r2, r3
 8011668:	4623      	mov	r3, r4
 801166a:	4640      	mov	r0, r8
 801166c:	4649      	mov	r1, r9
 801166e:	f002 fe6d 	bl	801434c <__aeabi_ddiv>
 8011672:	4603      	mov	r3, r0
 8011674:	460c      	mov	r4, r1
 8011676:	4618      	mov	r0, r3
 8011678:	4621      	mov	r1, r4
 801167a:	f002 ff4f 	bl	801451c <__aeabi_d2f>
 801167e:	4602      	mov	r2, r0
 8011680:	4b54      	ldr	r3, [pc, #336]	; (80117d4 <calc_beneficio+0x1fc>)
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	e097      	b.n	80117b6 <calc_beneficio+0x1de>
		}
		else
			beneficio = (p->receita_B3 - p->custo_peca)/(float)(((buf + 1)*p->periodo_B3) - (time% p->periodo_B3));
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	68da      	ldr	r2, [r3, #12]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	ee07 3a90 	vmov	s15, r3
 8011694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011698:	4b4d      	ldr	r3, [pc, #308]	; (80117d0 <calc_beneficio+0x1f8>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3301      	adds	r3, #1
 801169e:	68fa      	ldr	r2, [r7, #12]
 80116a0:	6952      	ldr	r2, [r2, #20]
 80116a2:	fb02 f103 	mul.w	r1, r2, r3
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	695a      	ldr	r2, [r3, #20]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80116b0:	fb02 f200 	mul.w	r2, r2, r0
 80116b4:	1a9b      	subs	r3, r3, r2
 80116b6:	1acb      	subs	r3, r1, r3
 80116b8:	ee07 3a90 	vmov	s15, r3
 80116bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80116c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116c4:	4b43      	ldr	r3, [pc, #268]	; (80117d4 <calc_beneficio+0x1fc>)
 80116c6:	edc3 7a00 	vstr	s15, [r3]
 80116ca:	e074      	b.n	80117b6 <calc_beneficio+0x1de>

	} else if (transa->event->event_id == B3_in){
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	d16b      	bne.n	80117ae <calc_beneficio+0x1d6>
		buf = (uint32_t)uxQueueMessagesWaiting(qB3);
 80116d6:	4b40      	ldr	r3, [pc, #256]	; (80117d8 <calc_beneficio+0x200>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fc fd0c 	bl	800e0f8 <uxQueueMessagesWaiting>
 80116e0:	4602      	mov	r2, r0
 80116e2:	4b3b      	ldr	r3, [pc, #236]	; (80117d0 <calc_beneficio+0x1f8>)
 80116e4:	601a      	str	r2, [r3, #0]

		if ((((buf + 1)*p->periodo_B3) - (time% p->periodo_B3)) >= (uint32_t)p->tempo_maximo){
 80116e6:	4b3a      	ldr	r3, [pc, #232]	; (80117d0 <calc_beneficio+0x1f8>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	3301      	adds	r3, #1
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	6952      	ldr	r2, [r2, #20]
 80116f0:	fb02 f103 	mul.w	r1, r2, r3
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	695a      	ldr	r2, [r3, #20]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80116fe:	fb02 f200 	mul.w	r2, r2, r0
 8011702:	1a9b      	subs	r3, r3, r2
 8011704:	1acb      	subs	r3, r1, r3
 8011706:	68fa      	ldr	r2, [r7, #12]
 8011708:	7e12      	ldrb	r2, [r2, #24]
 801170a:	4293      	cmp	r3, r2
 801170c:	d32c      	bcc.n	8011768 <calc_beneficio+0x190>
			beneficio = (-1.0*p->custo_peca)/(((buf + 1)*p->periodo_B3) - (time% p->periodo_B3));
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	4618      	mov	r0, r3
 8011714:	f002 fc7a 	bl	801400c <__aeabi_ui2d>
 8011718:	4602      	mov	r2, r0
 801171a:	460b      	mov	r3, r1
 801171c:	4614      	mov	r4, r2
 801171e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8011722:	4b2b      	ldr	r3, [pc, #172]	; (80117d0 <calc_beneficio+0x1f8>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	3301      	adds	r3, #1
 8011728:	68fa      	ldr	r2, [r7, #12]
 801172a:	6952      	ldr	r2, [r2, #20]
 801172c:	fb02 f103 	mul.w	r1, r2, r3
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	695a      	ldr	r2, [r3, #20]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	fbb3 f0f2 	udiv	r0, r3, r2
 801173a:	fb02 f200 	mul.w	r2, r2, r0
 801173e:	1a9b      	subs	r3, r3, r2
 8011740:	1acb      	subs	r3, r1, r3
 8011742:	4618      	mov	r0, r3
 8011744:	f002 fc62 	bl	801400c <__aeabi_ui2d>
 8011748:	4602      	mov	r2, r0
 801174a:	460b      	mov	r3, r1
 801174c:	4620      	mov	r0, r4
 801174e:	4629      	mov	r1, r5
 8011750:	f002 fdfc 	bl	801434c <__aeabi_ddiv>
 8011754:	4603      	mov	r3, r0
 8011756:	460c      	mov	r4, r1
 8011758:	4618      	mov	r0, r3
 801175a:	4621      	mov	r1, r4
 801175c:	f002 fede 	bl	801451c <__aeabi_d2f>
 8011760:	4602      	mov	r2, r0
 8011762:	4b1c      	ldr	r3, [pc, #112]	; (80117d4 <calc_beneficio+0x1fc>)
 8011764:	601a      	str	r2, [r3, #0]
 8011766:	e026      	b.n	80117b6 <calc_beneficio+0x1de>
		}
		else
			beneficio = (p->receita_B3 - p->custo_peca)/(float)(((buf + 1)*p->periodo_B3) - (time% p->periodo_B3));
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	68da      	ldr	r2, [r3, #12]
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	ee07 3a90 	vmov	s15, r3
 8011776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801177a:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <calc_beneficio+0x1f8>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3301      	adds	r3, #1
 8011780:	68fa      	ldr	r2, [r7, #12]
 8011782:	6952      	ldr	r2, [r2, #20]
 8011784:	fb02 f103 	mul.w	r1, r2, r3
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	695a      	ldr	r2, [r3, #20]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011792:	fb02 f200 	mul.w	r2, r2, r0
 8011796:	1a9b      	subs	r3, r3, r2
 8011798:	1acb      	subs	r3, r1, r3
 801179a:	ee07 3a90 	vmov	s15, r3
 801179e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80117a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80117a6:	4b0b      	ldr	r3, [pc, #44]	; (80117d4 <calc_beneficio+0x1fc>)
 80117a8:	edc3 7a00 	vstr	s15, [r3]
 80117ac:	e003      	b.n	80117b6 <calc_beneficio+0x1de>

	} else{

		beneficio = 0.0;
 80117ae:	4b09      	ldr	r3, [pc, #36]	; (80117d4 <calc_beneficio+0x1fc>)
 80117b0:	f04f 0200 	mov.w	r2, #0
 80117b4:	601a      	str	r2, [r3, #0]

	}

	return beneficio;
 80117b6:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <calc_beneficio+0x1fc>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	ee07 3a90 	vmov	s15, r3
}
 80117be:	eeb0 0a67 	vmov.f32	s0, s15
 80117c2:	3710      	adds	r7, #16
 80117c4:	46bd      	mov	sp, r7
 80117c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80117ca:	bf00      	nop
 80117cc:	200041f4 	.word	0x200041f4
 80117d0:	20004238 	.word	0x20004238
 80117d4:	20004214 	.word	0x20004214
 80117d8:	2000420c 	.word	0x2000420c

080117dc <troca_trans>:

void troca_trans (Trans** t1, Trans** t2){
 80117dc:	b480      	push	{r7}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
	Trans* aux;
	aux = *t1;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	60fb      	str	r3, [r7, #12]
	*t1 = *t2;
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	681a      	ldr	r2, [r3, #0]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	601a      	str	r2, [r3, #0]
	*t2 = aux;
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	601a      	str	r2, [r3, #0]
}
 80117fa:	bf00      	nop
 80117fc:	3714      	adds	r7, #20
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr

08011806 <Otimiza>:
  * com a função initStateMachine.
  * @retval Tupla (vetor de ponteiros pra transições) ordenado de forma
  * cresente de benefícios ao sistema.
  */

void Otimiza(sm_t* sm, Trans** vec_trans, uint8_t n_trans){
 8011806:	b580      	push	{r7, lr}
 8011808:	ed2d 8b02 	vpush	{d8}
 801180c:	b08c      	sub	sp, #48	; 0x30
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	60b9      	str	r1, [r7, #8]
 8011814:	4613      	mov	r3, r2
 8011816:	71fb      	strb	r3, [r7, #7]

	SystemParameters p = getSystemParameters();
 8011818:	f107 0310 	add.w	r3, r7, #16
 801181c:	4618      	mov	r0, r3
 801181e:	f000 fa67 	bl	8011cf0 <getSystemParameters>
	uint32_t temp = getSystemTime();
 8011822:	f000 fb43 	bl	8011eac <getSystemTime>
 8011826:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (calc_beneficio(&p, vec_trans[0], temp) < calc_beneficio(&p, vec_trans[1], temp)){
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	6819      	ldr	r1, [r3, #0]
 801182c:	f107 0310 	add.w	r3, r7, #16
 8011830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011832:	4618      	mov	r0, r3
 8011834:	f7ff fed0 	bl	80115d8 <calc_beneficio>
 8011838:	eeb0 8a40 	vmov.f32	s16, s0
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	3304      	adds	r3, #4
 8011840:	6819      	ldr	r1, [r3, #0]
 8011842:	f107 0310 	add.w	r3, r7, #16
 8011846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011848:	4618      	mov	r0, r3
 801184a:	f7ff fec5 	bl	80115d8 <calc_beneficio>
 801184e:	eef0 7a40 	vmov.f32	s15, s0
 8011852:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185a:	d505      	bpl.n	8011868 <Otimiza+0x62>
		troca_trans (&vec_trans[0], &vec_trans[1]);
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	3304      	adds	r3, #4
 8011860:	4619      	mov	r1, r3
 8011862:	68b8      	ldr	r0, [r7, #8]
 8011864:	f7ff ffba 	bl	80117dc <troca_trans>
	}

	if (calc_beneficio(&p, vec_trans[1], temp) < calc_beneficio(&p, vec_trans[2], temp)){
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	3304      	adds	r3, #4
 801186c:	6819      	ldr	r1, [r3, #0]
 801186e:	f107 0310 	add.w	r3, r7, #16
 8011872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011874:	4618      	mov	r0, r3
 8011876:	f7ff feaf 	bl	80115d8 <calc_beneficio>
 801187a:	eeb0 8a40 	vmov.f32	s16, s0
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	3308      	adds	r3, #8
 8011882:	6819      	ldr	r1, [r3, #0]
 8011884:	f107 0310 	add.w	r3, r7, #16
 8011888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801188a:	4618      	mov	r0, r3
 801188c:	f7ff fea4 	bl	80115d8 <calc_beneficio>
 8011890:	eef0 7a40 	vmov.f32	s15, s0
 8011894:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189c:	d507      	bpl.n	80118ae <Otimiza+0xa8>
			troca_trans (&vec_trans[1], &vec_trans[2]);
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	1d1a      	adds	r2, r3, #4
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	3308      	adds	r3, #8
 80118a6:	4619      	mov	r1, r3
 80118a8:	4610      	mov	r0, r2
 80118aa:	f7ff ff97 	bl	80117dc <troca_trans>
	}

	if (calc_beneficio(&p, vec_trans[0], temp) < calc_beneficio(&p, vec_trans[1], temp)){
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	6819      	ldr	r1, [r3, #0]
 80118b2:	f107 0310 	add.w	r3, r7, #16
 80118b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7ff fe8d 	bl	80115d8 <calc_beneficio>
 80118be:	eeb0 8a40 	vmov.f32	s16, s0
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	3304      	adds	r3, #4
 80118c6:	6819      	ldr	r1, [r3, #0]
 80118c8:	f107 0310 	add.w	r3, r7, #16
 80118cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7ff fe82 	bl	80115d8 <calc_beneficio>
 80118d4:	eef0 7a40 	vmov.f32	s15, s0
 80118d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80118dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e0:	d400      	bmi.n	80118e4 <Otimiza+0xde>
			troca_trans (&vec_trans[0], &vec_trans[1]);
	}

}
 80118e2:	e005      	b.n	80118f0 <Otimiza+0xea>
			troca_trans (&vec_trans[0], &vec_trans[1]);
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	3304      	adds	r3, #4
 80118e8:	4619      	mov	r1, r3
 80118ea:	68b8      	ldr	r0, [r7, #8]
 80118ec:	f7ff ff76 	bl	80117dc <troca_trans>
}
 80118f0:	bf00      	nop
 80118f2:	3730      	adds	r7, #48	; 0x30
 80118f4:	46bd      	mov	sp, r7
 80118f6:	ecbd 8b02 	vpop	{d8}
 80118fa:	bd80      	pop	{r7, pc}

080118fc <StartStateMachineTask>:
  * @brief  Tarefas para a máquina de estados. Executa os eventos controláveis sempre
  * quando possivel (quando habilitados). Quando não há evento controlável para ser
  * habilitado, dorme esperando a ocorrência de um evento não controlável.
  * @retval None
  */
void StartStateMachineTask(void const * argument){
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]

	/*Inicializa a máquina de estados do banco de ensaios*/
	initStateMachine (&BancoDeEnsaios_sm);
 8011904:	4849      	ldr	r0, [pc, #292]	; (8011a2c <StartStateMachineTask+0x130>)
 8011906:	f7ff fbf1 	bl	80110ec <initStateMachine>

	/*Este semáforo é fechado quando não há eventos possíveis para evoluir a máquina de
	 * estados e é aberto quando surgir um evento.*/
	semBlocking = xSemaphoreCreateBinary();
 801190a:	2203      	movs	r2, #3
 801190c:	2100      	movs	r1, #0
 801190e:	2001      	movs	r0, #1
 8011910:	f7fb fd88 	bl	800d424 <xQueueGenericCreate>
 8011914:	4602      	mov	r2, r0
 8011916:	4b46      	ldr	r3, [pc, #280]	; (8011a30 <StartStateMachineTask+0x134>)
 8011918:	601a      	str	r2, [r3, #0]

	inOtm = xSemaphoreCreateBinary();
 801191a:	2203      	movs	r2, #3
 801191c:	2100      	movs	r1, #0
 801191e:	2001      	movs	r0, #1
 8011920:	f7fb fd80 	bl	800d424 <xQueueGenericCreate>
 8011924:	4602      	mov	r2, r0
 8011926:	4b43      	ldr	r3, [pc, #268]	; (8011a34 <StartStateMachineTask+0x138>)
 8011928:	601a      	str	r2, [r3, #0]

	qB1 = xQueueCreate(BUFERS_SIZE, sizeof(piece));
 801192a:	2200      	movs	r2, #0
 801192c:	2108      	movs	r1, #8
 801192e:	200f      	movs	r0, #15
 8011930:	f7fb fd78 	bl	800d424 <xQueueGenericCreate>
 8011934:	4602      	mov	r2, r0
 8011936:	4b40      	ldr	r3, [pc, #256]	; (8011a38 <StartStateMachineTask+0x13c>)
 8011938:	601a      	str	r2, [r3, #0]
	qB2 = xQueueCreate(BUFERS_SIZE, sizeof(piece));
 801193a:	2200      	movs	r2, #0
 801193c:	2108      	movs	r1, #8
 801193e:	200f      	movs	r0, #15
 8011940:	f7fb fd70 	bl	800d424 <xQueueGenericCreate>
 8011944:	4602      	mov	r2, r0
 8011946:	4b3d      	ldr	r3, [pc, #244]	; (8011a3c <StartStateMachineTask+0x140>)
 8011948:	601a      	str	r2, [r3, #0]
	qB3 = xQueueCreate(BUFERS_SIZE, sizeof(piece));
 801194a:	2200      	movs	r2, #0
 801194c:	2108      	movs	r1, #8
 801194e:	200f      	movs	r0, #15
 8011950:	f7fb fd68 	bl	800d424 <xQueueGenericCreate>
 8011954:	4602      	mov	r2, r0
 8011956:	4b3a      	ldr	r3, [pc, #232]	; (8011a40 <StartStateMachineTask+0x144>)
 8011958:	601a      	str	r2, [r3, #0]

	/*Cria o semáforo que controla o estado de ligado/desligado da máquina*/
	BancoDeEnsaios_sm.semPower = xSemaphoreCreateBinary();
 801195a:	2203      	movs	r2, #3
 801195c:	2100      	movs	r1, #0
 801195e:	2001      	movs	r0, #1
 8011960:	f7fb fd60 	bl	800d424 <xQueueGenericCreate>
 8011964:	4602      	mov	r2, r0
 8011966:	4b31      	ldr	r3, [pc, #196]	; (8011a2c <StartStateMachineTask+0x130>)
 8011968:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	ChangeB1 = xSemaphoreCreateMutex();
 801196c:	2001      	movs	r0, #1
 801196e:	f7fb fdd3 	bl	800d518 <xQueueCreateMutex>
 8011972:	4602      	mov	r2, r0
 8011974:	4b33      	ldr	r3, [pc, #204]	; (8011a44 <StartStateMachineTask+0x148>)
 8011976:	601a      	str	r2, [r3, #0]
	ChangeSmMutex = xSemaphoreCreateMutex();
 8011978:	2001      	movs	r0, #1
 801197a:	f7fb fdcd 	bl	800d518 <xQueueCreateMutex>
 801197e:	4602      	mov	r2, r0
 8011980:	4b31      	ldr	r3, [pc, #196]	; (8011a48 <StartStateMachineTask+0x14c>)
 8011982:	601a      	str	r2, [r3, #0]

	num_optimizable_events = 3;
 8011984:	4b31      	ldr	r3, [pc, #196]	; (8011a4c <StartStateMachineTask+0x150>)
 8011986:	2203      	movs	r2, #3
 8011988:	701a      	strb	r2, [r3, #0]
	optimizable_events[0] = &BancoDeEnsaios_sm.events_list[B1_in];
 801198a:	4b31      	ldr	r3, [pc, #196]	; (8011a50 <StartStateMachineTask+0x154>)
 801198c:	4a31      	ldr	r2, [pc, #196]	; (8011a54 <StartStateMachineTask+0x158>)
 801198e:	601a      	str	r2, [r3, #0]
	optimizable_events[1] = &BancoDeEnsaios_sm.events_list[B2_in];
 8011990:	4b2f      	ldr	r3, [pc, #188]	; (8011a50 <StartStateMachineTask+0x154>)
 8011992:	4a31      	ldr	r2, [pc, #196]	; (8011a58 <StartStateMachineTask+0x15c>)
 8011994:	605a      	str	r2, [r3, #4]
	optimizable_events[2] = &BancoDeEnsaios_sm.events_list[B3_in];
 8011996:	4b2e      	ldr	r3, [pc, #184]	; (8011a50 <StartStateMachineTask+0x154>)
 8011998:	4a30      	ldr	r2, [pc, #192]	; (8011a5c <StartStateMachineTask+0x160>)
 801199a:	609a      	str	r2, [r3, #8]


	/*Espera indentificador da tarefa a ser notificada ser iniciado*/
	while (ComSup2Otm == NULL){
 801199c:	e002      	b.n	80119a4 <StartStateMachineTask+0xa8>
		vTaskDelay(10);
 801199e:	200a      	movs	r0, #10
 80119a0:	f7fd f856 	bl	800ea50 <vTaskDelay>
	while (ComSup2Otm == NULL){
 80119a4:	4b2e      	ldr	r3, [pc, #184]	; (8011a60 <StartStateMachineTask+0x164>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d0f8      	beq.n	801199e <StartStateMachineTask+0xa2>
	}

	/*A máquina de estados inicia desligada*/
	xSemaphoreTake(BancoDeEnsaios_sm.semPower, portMAX_DELAY);
 80119ac:	4b1f      	ldr	r3, [pc, #124]	; (8011a2c <StartStateMachineTask+0x130>)
 80119ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80119b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7fc f8d6 	bl	800db68 <xQueueSemaphoreTake>

	while (qMonitor == NULL){
 80119bc:	e002      	b.n	80119c4 <StartStateMachineTask+0xc8>
		vTaskDelay(10);
 80119be:	200a      	movs	r0, #10
 80119c0:	f7fd f846 	bl	800ea50 <vTaskDelay>
	while (qMonitor == NULL){
 80119c4:	4b27      	ldr	r3, [pc, #156]	; (8011a64 <StartStateMachineTask+0x168>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d0f8      	beq.n	80119be <StartStateMachineTask+0xc2>
	}

	uint32_t ant_counter_value=0, curr_counter_value=vTaskGetCurrentCounterValue();
 80119cc:	2300      	movs	r3, #0
 80119ce:	61bb      	str	r3, [r7, #24]
 80119d0:	f7fe fd40 	bl	8010454 <vTaskGetCurrentCounterValue>
 80119d4:	61f8      	str	r0, [r7, #28]
	volatile uint32_t curr_exec_time;

	while(1){

		/*Apenas para a tarefa sofrer preempção para atualizar o seu contador*/
		vTaskDelay(1);
 80119d6:	2001      	movs	r0, #1
 80119d8:	f7fd f83a 	bl	800ea50 <vTaskDelay>

		ant_counter_value = curr_counter_value;
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	61bb      	str	r3, [r7, #24]
		curr_counter_value = vTaskGetCurrentCounterValue();
 80119e0:	f7fe fd38 	bl	8010454 <vTaskGetCurrentCounterValue>
 80119e4:	61f8      	str	r0, [r7, #28]
		curr_exec_time = curr_counter_value - ant_counter_value;
 80119e6:	69fa      	ldr	r2, [r7, #28]
 80119e8:	69bb      	ldr	r3, [r7, #24]
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	617b      	str	r3, [r7, #20]

		occurenceMonitor send;
		send.occurence = sm_time;
 80119ee:	2302      	movs	r3, #2
 80119f0:	723b      	strb	r3, [r7, #8]
		send.moment = curr_exec_time * 10;
 80119f2:	697a      	ldr	r2, [r7, #20]
 80119f4:	4613      	mov	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	60fb      	str	r3, [r7, #12]

		/*Envia para o monitor a mensagem para ser informada na na UART*/

		xQueueSendToBack(qMonitor, &send, 1000);
 80119fe:	4b19      	ldr	r3, [pc, #100]	; (8011a64 <StartStateMachineTask+0x168>)
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	f107 0108 	add.w	r1, r7, #8
 8011a06:	2300      	movs	r3, #0
 8011a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011a0c:	f7fb fdb7 	bl	800d57e <xQueueGenericSend>

		if (BancoDeEnsaios_sm.mode != ES)
 8011a10:	4b06      	ldr	r3, [pc, #24]	; (8011a2c <StartStateMachineTask+0x130>)
 8011a12:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8011a16:	2b04      	cmp	r3, #4
 8011a18:	d003      	beq.n	8011a22 <StartStateMachineTask+0x126>
			execSM_classic(&BancoDeEnsaios_sm);
 8011a1a:	4804      	ldr	r0, [pc, #16]	; (8011a2c <StartStateMachineTask+0x130>)
 8011a1c:	f7ff fcc2 	bl	80113a4 <execSM_classic>
 8011a20:	e7d9      	b.n	80119d6 <StartStateMachineTask+0xda>
		else
			execSM_otm(&BancoDeEnsaios_sm);
 8011a22:	4802      	ldr	r0, [pc, #8]	; (8011a2c <StartStateMachineTask+0x130>)
 8011a24:	f7ff fd3e 	bl	80114a4 <execSM_otm>
	while(1){
 8011a28:	e7d5      	b.n	80119d6 <StartStateMachineTask+0xda>
 8011a2a:	bf00      	nop
 8011a2c:	20004048 	.word	0x20004048
 8011a30:	20004224 	.word	0x20004224
 8011a34:	200041ec 	.word	0x200041ec
 8011a38:	20004210 	.word	0x20004210
 8011a3c:	200041f4 	.word	0x200041f4
 8011a40:	2000420c 	.word	0x2000420c
 8011a44:	20004228 	.word	0x20004228
 8011a48:	2000423c 	.word	0x2000423c
 8011a4c:	2000421d 	.word	0x2000421d
 8011a50:	200041f8 	.word	0x200041f8
 8011a54:	20004168 	.word	0x20004168
 8011a58:	20004174 	.word	0x20004174
 8011a5c:	20004180 	.word	0x20004180
 8011a60:	20003d80 	.word	0x20003d80
 8011a64:	20003fe8 	.word	0x20003fe8

08011a68 <StartOptimizerTask>:
uint8_t n_events;           /*<! Total de transições habilitadas*/
uint8_t n_opt_events;       /*<! Total de eventos otimizáveis habilitados*/
State *new_state;
Callb_event_t exec_func;

void StartOptimizerTask(void const * argument){
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b088      	sub	sp, #32
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]

	/*Adquire o Habdler da Tarefa que será notificada*/
	ComSup2Otm = xTaskGetCurrentTaskHandle();
 8011a70:	f7fe f9d8 	bl	800fe24 <xTaskGetCurrentTaskHandle>
 8011a74:	4602      	mov	r2, r0
 8011a76:	4b79      	ldr	r3, [pc, #484]	; (8011c5c <StartOptimizerTask+0x1f4>)
 8011a78:	601a      	str	r2, [r3, #0]

	xTaskNotifyStateClear(ComSup2Otm);
 8011a7a:	4b78      	ldr	r3, [pc, #480]	; (8011c5c <StartOptimizerTask+0x1f4>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fe fffe 	bl	8010a80 <xTaskNotifyStateClear>

	while (qMonitor == NULL){
 8011a84:	e002      	b.n	8011a8c <StartOptimizerTask+0x24>
		vTaskDelay(10);
 8011a86:	200a      	movs	r0, #10
 8011a88:	f7fc ffe2 	bl	800ea50 <vTaskDelay>
	while (qMonitor == NULL){
 8011a8c:	4b74      	ldr	r3, [pc, #464]	; (8011c60 <StartOptimizerTask+0x1f8>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d0f8      	beq.n	8011a86 <StartOptimizerTask+0x1e>
	}

	uint32_t ant_counter_value=0, curr_counter_value=vTaskGetCurrentCounterValue();
 8011a94:	2300      	movs	r3, #0
 8011a96:	61bb      	str	r3, [r7, #24]
 8011a98:	f7fe fcdc 	bl	8010454 <vTaskGetCurrentCounterValue>
 8011a9c:	61f8      	str	r0, [r7, #28]
	volatile uint32_t curr_exec_time;

	while(1){

		/*Apenas para a tarefa sofrer preempção para atualizar o seu contador*/
		vTaskDelay(1);
 8011a9e:	2001      	movs	r0, #1
 8011aa0:	f7fc ffd6 	bl	800ea50 <vTaskDelay>
		ant_counter_value = curr_counter_value;
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	61bb      	str	r3, [r7, #24]
		curr_counter_value = vTaskGetCurrentCounterValue();
 8011aa8:	f7fe fcd4 	bl	8010454 <vTaskGetCurrentCounterValue>
 8011aac:	61f8      	str	r0, [r7, #28]
		curr_exec_time = curr_counter_value - ant_counter_value;
 8011aae:	69fa      	ldr	r2, [r7, #28]
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	617b      	str	r3, [r7, #20]

		occurenceMonitor send;
		send.occurence = otm_time;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	723b      	strb	r3, [r7, #8]
		send.moment = curr_exec_time * 10;
 8011aba:	697a      	ldr	r2, [r7, #20]
 8011abc:	4613      	mov	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	005b      	lsls	r3, r3, #1
 8011ac4:	60fb      	str	r3, [r7, #12]

		/*Envia para o monitor a mensagem para ser informada na na UART*/
		if (curr_exec_time !=0)
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d008      	beq.n	8011ade <StartOptimizerTask+0x76>
			xQueueSendToBack(qMonitor, &send, 1000);
 8011acc:	4b64      	ldr	r3, [pc, #400]	; (8011c60 <StartOptimizerTask+0x1f8>)
 8011ace:	6818      	ldr	r0, [r3, #0]
 8011ad0:	f107 0108 	add.w	r1, r7, #8
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011ada:	f7fb fd50 	bl	800d57e <xQueueGenericSend>

		/*Aguarda o supervisor enviar um conjunto de transições habilitadas,
		 * este conjunto contém os eventos, necessários para o processamento. Esta
		 * é uma função bloqueante, portanto o Otimizador dorme enquanto espera um
		 * conjunto.*/
		while (xTaskNotifyWait(0X00, UINT32_MAX, (uint32_t*)&conjunto, portMAX_DELAY) != pdTRUE);
 8011ade:	bf00      	nop
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ae4:	4a5f      	ldr	r2, [pc, #380]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011ae6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011aea:	2000      	movs	r0, #0
 8011aec:	f7fe fd78 	bl	80105e0 <xTaskNotifyWait>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d1f4      	bne.n	8011ae0 <StartOptimizerTask+0x78>

		n_events = 0; n_opt_events = 0;
 8011af6:	4b5c      	ldr	r3, [pc, #368]	; (8011c68 <StartOptimizerTask+0x200>)
 8011af8:	2200      	movs	r2, #0
 8011afa:	701a      	strb	r2, [r3, #0]
 8011afc:	4b5b      	ldr	r3, [pc, #364]	; (8011c6c <StartOptimizerTask+0x204>)
 8011afe:	2200      	movs	r2, #0
 8011b00:	701a      	strb	r2, [r3, #0]

		/*Faz a intersecção*/
		while (conjunto[n_events] != NULL){
 8011b02:	e02b      	b.n	8011b5c <StartOptimizerTask+0xf4>
			for (i=0; i< num_optimizable_events; i++){
 8011b04:	4b5a      	ldr	r3, [pc, #360]	; (8011c70 <StartOptimizerTask+0x208>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	701a      	strb	r2, [r3, #0]
 8011b0a:	e01b      	b.n	8011b44 <StartOptimizerTask+0xdc>
				if (conjunto[n_events]->event == optimizable_events[i]){
 8011b0c:	4b55      	ldr	r3, [pc, #340]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	4b55      	ldr	r3, [pc, #340]	; (8011c68 <StartOptimizerTask+0x200>)
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	4413      	add	r3, r2
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	4b54      	ldr	r3, [pc, #336]	; (8011c70 <StartOptimizerTask+0x208>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	4619      	mov	r1, r3
 8011b22:	4b54      	ldr	r3, [pc, #336]	; (8011c74 <StartOptimizerTask+0x20c>)
 8011b24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d105      	bne.n	8011b38 <StartOptimizerTask+0xd0>
					n_opt_events++;
 8011b2c:	4b4f      	ldr	r3, [pc, #316]	; (8011c6c <StartOptimizerTask+0x204>)
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	3301      	adds	r3, #1
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	4b4d      	ldr	r3, [pc, #308]	; (8011c6c <StartOptimizerTask+0x204>)
 8011b36:	701a      	strb	r2, [r3, #0]
			for (i=0; i< num_optimizable_events; i++){
 8011b38:	4b4d      	ldr	r3, [pc, #308]	; (8011c70 <StartOptimizerTask+0x208>)
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	4b4b      	ldr	r3, [pc, #300]	; (8011c70 <StartOptimizerTask+0x208>)
 8011b42:	701a      	strb	r2, [r3, #0]
 8011b44:	4b4a      	ldr	r3, [pc, #296]	; (8011c70 <StartOptimizerTask+0x208>)
 8011b46:	781a      	ldrb	r2, [r3, #0]
 8011b48:	4b4b      	ldr	r3, [pc, #300]	; (8011c78 <StartOptimizerTask+0x210>)
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d3dd      	bcc.n	8011b0c <StartOptimizerTask+0xa4>
				}
			}
			n_events++;
 8011b50:	4b45      	ldr	r3, [pc, #276]	; (8011c68 <StartOptimizerTask+0x200>)
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	3301      	adds	r3, #1
 8011b56:	b2da      	uxtb	r2, r3
 8011b58:	4b43      	ldr	r3, [pc, #268]	; (8011c68 <StartOptimizerTask+0x200>)
 8011b5a:	701a      	strb	r2, [r3, #0]
		while (conjunto[n_events] != NULL){
 8011b5c:	4b41      	ldr	r3, [pc, #260]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	4b41      	ldr	r3, [pc, #260]	; (8011c68 <StartOptimizerTask+0x200>)
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	4413      	add	r3, r2
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1ca      	bne.n	8011b04 <StartOptimizerTask+0x9c>
		}

		/*Condição para realizar o processo de otimização*/
		if (n_opt_events !=0 && conjunto[1] != NULL){
 8011b6e:	4b3f      	ldr	r3, [pc, #252]	; (8011c6c <StartOptimizerTask+0x204>)
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d00d      	beq.n	8011b92 <StartOptimizerTask+0x12a>
 8011b76:	4b3b      	ldr	r3, [pc, #236]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	3304      	adds	r3, #4
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d007      	beq.n	8011b92 <StartOptimizerTask+0x12a>
			Otimiza(&BancoDeEnsaios_sm, conjunto, n_opt_events);
 8011b82:	4b38      	ldr	r3, [pc, #224]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011b84:	6819      	ldr	r1, [r3, #0]
 8011b86:	4b39      	ldr	r3, [pc, #228]	; (8011c6c <StartOptimizerTask+0x204>)
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	483b      	ldr	r0, [pc, #236]	; (8011c7c <StartOptimizerTask+0x214>)
 8011b8e:	f7ff fe3a 	bl	8011806 <Otimiza>
		}

		/*De posse da tupla otimizada, executa-se a tupla como se fosse
		 * controle clássico*/
		i=0;
 8011b92:	4b37      	ldr	r3, [pc, #220]	; (8011c70 <StartOptimizerTask+0x208>)
 8011b94:	2200      	movs	r2, #0
 8011b96:	701a      	strb	r2, [r3, #0]
		exec_func = NULL; new_state = NULL;
 8011b98:	4b39      	ldr	r3, [pc, #228]	; (8011c80 <StartOptimizerTask+0x218>)
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	601a      	str	r2, [r3, #0]
 8011b9e:	4b39      	ldr	r3, [pc, #228]	; (8011c84 <StartOptimizerTask+0x21c>)
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	601a      	str	r2, [r3, #0]
		while (new_state == NULL){
 8011ba4:	e041      	b.n	8011c2a <StartOptimizerTask+0x1c2>

			if (conjunto[i] == NULL){
 8011ba6:	4b2f      	ldr	r3, [pc, #188]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	4b31      	ldr	r3, [pc, #196]	; (8011c70 <StartOptimizerTask+0x208>)
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d100      	bne.n	8011bba <StartOptimizerTask+0x152>
				/*Não faz sentido cair aqui*/
				asm("NOP");
 8011bb8:	bf00      	nop
			}

			/*Se o evento for conrolável, ocorre de toda forma
			 *Se o evento não for controlável, verifica se ele ocorreu na planta*/
			if (conjunto[i]->event->controllable == TRUE ||
 8011bba:	4b2a      	ldr	r3, [pc, #168]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	4b2c      	ldr	r3, [pc, #176]	; (8011c70 <StartOptimizerTask+0x208>)
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	4413      	add	r3, r2
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	7a1b      	ldrb	r3, [r3, #8]
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d00d      	beq.n	8011bec <StartOptimizerTask+0x184>
					conjunto[i]->event->event_id == BancoDeEnsaios_sm.occur_event){
 8011bd0:	4b24      	ldr	r3, [pc, #144]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	4b26      	ldr	r3, [pc, #152]	; (8011c70 <StartOptimizerTask+0x208>)
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	009b      	lsls	r3, r3, #2
 8011bda:	4413      	add	r3, r2
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	781a      	ldrb	r2, [r3, #0]
 8011be2:	4b26      	ldr	r3, [pc, #152]	; (8011c7c <StartOptimizerTask+0x214>)
 8011be4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
			if (conjunto[i]->event->controllable == TRUE ||
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d118      	bne.n	8011c1e <StartOptimizerTask+0x1b6>
				/*A primeira transição encontrada vai ocorrer*/
				BancoDeEnsaios_sm.occur_event = alphabet_max;
 8011bec:	4b23      	ldr	r3, [pc, #140]	; (8011c7c <StartOptimizerTask+0x214>)
 8011bee:	220a      	movs	r2, #10
 8011bf0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
				exec_func = conjunto[i]->event->callback;
 8011bf4:	4b1b      	ldr	r3, [pc, #108]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	4b1d      	ldr	r3, [pc, #116]	; (8011c70 <StartOptimizerTask+0x208>)
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	4a1e      	ldr	r2, [pc, #120]	; (8011c80 <StartOptimizerTask+0x218>)
 8011c08:	6013      	str	r3, [r2, #0]
				new_state = conjunto[i]->dst;
 8011c0a:	4b16      	ldr	r3, [pc, #88]	; (8011c64 <StartOptimizerTask+0x1fc>)
 8011c0c:	681a      	ldr	r2, [r3, #0]
 8011c0e:	4b18      	ldr	r3, [pc, #96]	; (8011c70 <StartOptimizerTask+0x208>)
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	4413      	add	r3, r2
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	4a1a      	ldr	r2, [pc, #104]	; (8011c84 <StartOptimizerTask+0x21c>)
 8011c1c:	6013      	str	r3, [r2, #0]
			}

			i++;
 8011c1e:	4b14      	ldr	r3, [pc, #80]	; (8011c70 <StartOptimizerTask+0x208>)
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	3301      	adds	r3, #1
 8011c24:	b2da      	uxtb	r2, r3
 8011c26:	4b12      	ldr	r3, [pc, #72]	; (8011c70 <StartOptimizerTask+0x208>)
 8011c28:	701a      	strb	r2, [r3, #0]
		while (new_state == NULL){
 8011c2a:	4b16      	ldr	r3, [pc, #88]	; (8011c84 <StartOptimizerTask+0x21c>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d0b9      	beq.n	8011ba6 <StartOptimizerTask+0x13e>
		}

		if (exec_func != NULL)
 8011c32:	4b13      	ldr	r3, [pc, #76]	; (8011c80 <StartOptimizerTask+0x218>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d002      	beq.n	8011c40 <StartOptimizerTask+0x1d8>
			exec_func();
 8011c3a:	4b11      	ldr	r3, [pc, #68]	; (8011c80 <StartOptimizerTask+0x218>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	4798      	blx	r3

		BancoDeEnsaios_sm.state = new_state;
 8011c40:	4b10      	ldr	r3, [pc, #64]	; (8011c84 <StartOptimizerTask+0x21c>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4a0d      	ldr	r2, [pc, #52]	; (8011c7c <StartOptimizerTask+0x214>)
 8011c46:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

		/*Acorda o Supervisor*/
		xSemaphoreGive(inOtm);
 8011c4a:	4b0f      	ldr	r3, [pc, #60]	; (8011c88 <StartOptimizerTask+0x220>)
 8011c4c:	6818      	ldr	r0, [r3, #0]
 8011c4e:	2300      	movs	r3, #0
 8011c50:	2200      	movs	r2, #0
 8011c52:	2100      	movs	r1, #0
 8011c54:	f7fb fc93 	bl	800d57e <xQueueGenericSend>
	while(1){
 8011c58:	e721      	b.n	8011a9e <StartOptimizerTask+0x36>
 8011c5a:	bf00      	nop
 8011c5c:	20003d80 	.word	0x20003d80
 8011c60:	20003fe8 	.word	0x20003fe8
 8011c64:	20004220 	.word	0x20004220
 8011c68:	20004234 	.word	0x20004234
 8011c6c:	20004208 	.word	0x20004208
 8011c70:	2000421c 	.word	0x2000421c
 8011c74:	200041f8 	.word	0x200041f8
 8011c78:	2000421d 	.word	0x2000421d
 8011c7c:	20004048 	.word	0x20004048
 8011c80:	200041f0 	.word	0x200041f0
 8011c84:	20004218 	.word	0x20004218
 8011c88:	200041ec 	.word	0x200041ec

08011c8c <HAL_GPIO_EXTI_Callback>:

}

/*----------------------------- INTERRUPÇÕES E CALLBACKS ------------------------------*/

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	4603      	mov	r3, r0
 8011c94:	80fb      	strh	r3, [r7, #6]

	/*Um evento ocorreu na planta*/
	if (GPIO_Pin == Sp_Pin)
 8011c96:	88fb      	ldrh	r3, [r7, #6]
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d104      	bne.n	8011ca6 <HAL_GPIO_EXTI_Callback+0x1a>
		BancoDeEnsaios_sm.occur_event = sp;
 8011c9c:	4b12      	ldr	r3, [pc, #72]	; (8011ce8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8011c9e:	2209      	movs	r2, #9
 8011ca0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8011ca4:	e016      	b.n	8011cd4 <HAL_GPIO_EXTI_Callback+0x48>
	else if (GPIO_Pin == S1_Pin)
 8011ca6:	88fb      	ldrh	r3, [r7, #6]
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	d104      	bne.n	8011cb6 <HAL_GPIO_EXTI_Callback+0x2a>
		BancoDeEnsaios_sm.occur_event = s1;
 8011cac:	4b0e      	ldr	r3, [pc, #56]	; (8011ce8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8011cae:	2206      	movs	r2, #6
 8011cb0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8011cb4:	e00e      	b.n	8011cd4 <HAL_GPIO_EXTI_Callback+0x48>
	else if(GPIO_Pin == S2_Pin)
 8011cb6:	88fb      	ldrh	r3, [r7, #6]
 8011cb8:	2b04      	cmp	r3, #4
 8011cba:	d104      	bne.n	8011cc6 <HAL_GPIO_EXTI_Callback+0x3a>
		BancoDeEnsaios_sm.occur_event = s2;
 8011cbc:	4b0a      	ldr	r3, [pc, #40]	; (8011ce8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8011cbe:	2207      	movs	r2, #7
 8011cc0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8011cc4:	e006      	b.n	8011cd4 <HAL_GPIO_EXTI_Callback+0x48>
	else if(GPIO_Pin == S3_Pin)
 8011cc6:	88fb      	ldrh	r3, [r7, #6]
 8011cc8:	2b08      	cmp	r3, #8
 8011cca:	d103      	bne.n	8011cd4 <HAL_GPIO_EXTI_Callback+0x48>
		BancoDeEnsaios_sm.occur_event = s3;
 8011ccc:	4b06      	ldr	r3, [pc, #24]	; (8011ce8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8011cce:	2208      	movs	r2, #8
 8011cd0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


	/*Abre o semáforo que espera por um sensor*/
	xSemaphoreGiveFromISR(semBlocking, pdFALSE);
 8011cd4:	4b05      	ldr	r3, [pc, #20]	; (8011cec <HAL_GPIO_EXTI_Callback+0x60>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2100      	movs	r1, #0
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fb fdde 	bl	800d89c <xQueueGiveFromISR>

}
 8011ce0:	bf00      	nop
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	20004048 	.word	0x20004048
 8011cec:	20004224 	.word	0x20004224

08011cf0 <getSystemParameters>:
extern xQueueHandle qB1;

Bool powerMode;


SystemParameters getSystemParameters(){
 8011cf0:	b4b0      	push	{r4, r5, r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
	return parameters;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4a07      	ldr	r2, [pc, #28]	; (8011d18 <getSystemParameters+0x28>)
 8011cfc:	461c      	mov	r4, r3
 8011cfe:	4615      	mov	r5, r2
 8011d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011d08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bcb0      	pop	{r4, r5, r7}
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	20004248 	.word	0x20004248

08011d1c <setSpeakerPeriod>:

void setSpeakerPeriod (uint8_t period){
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	4603      	mov	r3, r0
 8011d24:	71fb      	strb	r3, [r7, #7]
	if (period < 80)
 8011d26:	79fb      	ldrb	r3, [r7, #7]
 8011d28:	2b4f      	cmp	r3, #79	; 0x4f
 8011d2a:	d802      	bhi.n	8011d32 <setSpeakerPeriod+0x16>
		parameters.Speaker_Period = period;
 8011d2c:	4a04      	ldr	r2, [pc, #16]	; (8011d40 <setSpeakerPeriod+0x24>)
 8011d2e:	79fb      	ldrb	r3, [r7, #7]
 8011d30:	7013      	strb	r3, [r2, #0]
}
 8011d32:	bf00      	nop
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	20004248 	.word	0x20004248

08011d44 <setCustoPeca>:

void setCustoPeca (uint32_t custo_peca){
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
	parameters.custo_peca = custo_peca;
 8011d4c:	4a04      	ldr	r2, [pc, #16]	; (8011d60 <setCustoPeca+0x1c>)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6053      	str	r3, [r2, #4]
}
 8011d52:	bf00      	nop
 8011d54:	370c      	adds	r7, #12
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	20004248 	.word	0x20004248

08011d64 <setReceitaB2>:

void setReceitaB2(uint32_t receita_B2){
 8011d64:	b480      	push	{r7}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
	parameters.receita_B2 = receita_B2;
 8011d6c:	4a04      	ldr	r2, [pc, #16]	; (8011d80 <setReceitaB2+0x1c>)
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6093      	str	r3, [r2, #8]
}
 8011d72:	bf00      	nop
 8011d74:	370c      	adds	r7, #12
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr
 8011d7e:	bf00      	nop
 8011d80:	20004248 	.word	0x20004248

08011d84 <setReceitaB3>:

void setReceitaB3(uint32_t receita_B3){
 8011d84:	b480      	push	{r7}
 8011d86:	b083      	sub	sp, #12
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
	parameters.receita_B3 = receita_B3;
 8011d8c:	4a04      	ldr	r2, [pc, #16]	; (8011da0 <setReceitaB3+0x1c>)
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	60d3      	str	r3, [r2, #12]
}
 8011d92:	bf00      	nop
 8011d94:	370c      	adds	r7, #12
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	20004248 	.word	0x20004248

08011da4 <setPeriodoB2>:

void setPeriodoB2 (uint32_t periodoB2){
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
	parameters.periodo_B2 = periodoB2;
 8011dac:	4a04      	ldr	r2, [pc, #16]	; (8011dc0 <setPeriodoB2+0x1c>)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6113      	str	r3, [r2, #16]
}
 8011db2:	bf00      	nop
 8011db4:	370c      	adds	r7, #12
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	20004248 	.word	0x20004248

08011dc4 <setPeriodoB3>:

void setPeriodoB3 (uint32_t periodoB3){
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
	parameters.periodo_B3 = periodoB3;
 8011dcc:	4a04      	ldr	r2, [pc, #16]	; (8011de0 <setPeriodoB3+0x1c>)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6153      	str	r3, [r2, #20]
}
 8011dd2:	bf00      	nop
 8011dd4:	370c      	adds	r7, #12
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr
 8011dde:	bf00      	nop
 8011de0:	20004248 	.word	0x20004248

08011de4 <setTempoMaximo>:

void setTempoMaximo (uint8_t tempo_maximo){
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	4603      	mov	r3, r0
 8011dec:	71fb      	strb	r3, [r7, #7]
	parameters.tempo_maximo = tempo_maximo;
 8011dee:	4a04      	ldr	r2, [pc, #16]	; (8011e00 <setTempoMaximo+0x1c>)
 8011df0:	79fb      	ldrb	r3, [r7, #7]
 8011df2:	7613      	strb	r3, [r2, #24]
}
 8011df4:	bf00      	nop
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr
 8011e00:	20004248 	.word	0x20004248

08011e04 <getSpeakerPeriod>:

uint8_t getSpeakerPeriod (void){
 8011e04:	b480      	push	{r7}
 8011e06:	af00      	add	r7, sp, #0
	return parameters.Speaker_Period;
 8011e08:	4b03      	ldr	r3, [pc, #12]	; (8011e18 <getSpeakerPeriod+0x14>)
 8011e0a:	781b      	ldrb	r3, [r3, #0]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	20004248 	.word	0x20004248

08011e1c <getCustoPeca>:

uint32_t getCustoPeca (void){
 8011e1c:	b480      	push	{r7}
 8011e1e:	af00      	add	r7, sp, #0
	return parameters.custo_peca;
 8011e20:	4b03      	ldr	r3, [pc, #12]	; (8011e30 <getCustoPeca+0x14>)
 8011e22:	685b      	ldr	r3, [r3, #4]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	20004248 	.word	0x20004248

08011e34 <getReceitaB2>:

uint32_t getReceitaB2(void){
 8011e34:	b480      	push	{r7}
 8011e36:	af00      	add	r7, sp, #0
	return parameters.receita_B2;
 8011e38:	4b03      	ldr	r3, [pc, #12]	; (8011e48 <getReceitaB2+0x14>)
 8011e3a:	689b      	ldr	r3, [r3, #8]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr
 8011e46:	bf00      	nop
 8011e48:	20004248 	.word	0x20004248

08011e4c <getReceitaB3>:

uint32_t getReceitaB3(void){
 8011e4c:	b480      	push	{r7}
 8011e4e:	af00      	add	r7, sp, #0
	return parameters.receita_B3;
 8011e50:	4b03      	ldr	r3, [pc, #12]	; (8011e60 <getReceitaB3+0x14>)
 8011e52:	68db      	ldr	r3, [r3, #12]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	20004248 	.word	0x20004248

08011e64 <getPeriodoB2>:

uint32_t getPeriodoB2 (void){
 8011e64:	b480      	push	{r7}
 8011e66:	af00      	add	r7, sp, #0
	return parameters.periodo_B2;
 8011e68:	4b03      	ldr	r3, [pc, #12]	; (8011e78 <getPeriodoB2+0x14>)
 8011e6a:	691b      	ldr	r3, [r3, #16]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	20004248 	.word	0x20004248

08011e7c <getPeriodoB3>:

uint32_t getPeriodoB3 (void){
 8011e7c:	b480      	push	{r7}
 8011e7e:	af00      	add	r7, sp, #0
	return parameters.periodo_B3;
 8011e80:	4b03      	ldr	r3, [pc, #12]	; (8011e90 <getPeriodoB3+0x14>)
 8011e82:	695b      	ldr	r3, [r3, #20]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop
 8011e90:	20004248 	.word	0x20004248

08011e94 <getTempoMaximo>:

uint8_t getTempoMaximo (void){
 8011e94:	b480      	push	{r7}
 8011e96:	af00      	add	r7, sp, #0
	return parameters.tempo_maximo;
 8011e98:	4b03      	ldr	r3, [pc, #12]	; (8011ea8 <getTempoMaximo+0x14>)
 8011e9a:	7e1b      	ldrb	r3, [r3, #24]
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	20004248 	.word	0x20004248

08011eac <getSystemTime>:

uint32_t getSystemTime(void){
 8011eac:	b480      	push	{r7}
 8011eae:	af00      	add	r7, sp, #0
	return system_time;
 8011eb0:	4b03      	ldr	r3, [pc, #12]	; (8011ec0 <getSystemTime+0x14>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebc:	4770      	bx	lr
 8011ebe:	bf00      	nop
 8011ec0:	20003d84 	.word	0x20003d84

08011ec4 <addSystemTime>:

void addSystemTime(void){
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
	system_time++;
 8011eca:	4b0e      	ldr	r3, [pc, #56]	; (8011f04 <addSystemTime+0x40>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	4a0c      	ldr	r2, [pc, #48]	; (8011f04 <addSystemTime+0x40>)
 8011ed2:	6013      	str	r3, [r2, #0]
	BaseType_t pxHigherPriority = pdFALSE;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR(semEventControl, &pxHigherPriority);
 8011ed8:	4b0b      	ldr	r3, [pc, #44]	; (8011f08 <addSystemTime+0x44>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	1d3a      	adds	r2, r7, #4
 8011ede:	4611      	mov	r1, r2
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fb fcdb 	bl	800d89c <xQueueGiveFromISR>
	if (pxHigherPriority == pdTRUE){
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d107      	bne.n	8011efc <addSystemTime+0x38>
		portYIELD();
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <addSystemTime+0x48>)
 8011eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	f3bf 8f4f 	dsb	sy
 8011ef8:	f3bf 8f6f 	isb	sy
	}
}
 8011efc:	bf00      	nop
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	20003d84 	.word	0x20003d84
 8011f08:	20004044 	.word	0x20004044
 8011f0c:	e000ed04 	.word	0xe000ed04

08011f10 <addPieces>:
 * @param q: Buffer ao qual deseja-se inserir as peças.
*  @retval None
*  @note: só é seguro chamar esta função quando a máquina de estados NÃO
*  estiver em execução
*/
void addPieces(uint8_t n, xQueueHandle* q){
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b088      	sub	sp, #32
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	4603      	mov	r3, r0
 8011f18:	6039      	str	r1, [r7, #0]
 8011f1a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	piece p;

	if (xSemaphoreTake(ChangeB1, portMAX_DELAY) == pdTRUE){
 8011f1c:	4b20      	ldr	r3, [pc, #128]	; (8011fa0 <addPieces+0x90>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7fb fe1f 	bl	800db68 <xQueueSemaphoreTake>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d11e      	bne.n	8011f6e <addPieces+0x5e>

		for (i=0; i< n; i++){
 8011f30:	2300      	movs	r3, #0
 8011f32:	77fb      	strb	r3, [r7, #31]
 8011f34:	e010      	b.n	8011f58 <addPieces+0x48>
			p.id_peca = i+1;
 8011f36:	7ffb      	ldrb	r3, [r7, #31]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	617b      	str	r3, [r7, #20]
			p.tempo_insercao = 0;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	61bb      	str	r3, [r7, #24]
			xQueueSendToBack(*q, &p, 1000);
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	6818      	ldr	r0, [r3, #0]
 8011f44:	f107 0114 	add.w	r1, r7, #20
 8011f48:	2300      	movs	r3, #0
 8011f4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011f4e:	f7fb fb16 	bl	800d57e <xQueueGenericSend>
		for (i=0; i< n; i++){
 8011f52:	7ffb      	ldrb	r3, [r7, #31]
 8011f54:	3301      	adds	r3, #1
 8011f56:	77fb      	strb	r3, [r7, #31]
 8011f58:	7ffa      	ldrb	r2, [r7, #31]
 8011f5a:	79fb      	ldrb	r3, [r7, #7]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d3ea      	bcc.n	8011f36 <addPieces+0x26>
		}

		xSemaphoreGive(ChangeB1);  /*!< Libera o Mutex*/
 8011f60:	4b0f      	ldr	r3, [pc, #60]	; (8011fa0 <addPieces+0x90>)
 8011f62:	6818      	ldr	r0, [r3, #0]
 8011f64:	2300      	movs	r3, #0
 8011f66:	2200      	movs	r2, #0
 8011f68:	2100      	movs	r1, #0
 8011f6a:	f7fb fb08 	bl	800d57e <xQueueGenericSend>
	}

	occurenceMonitor init;
	init.occurence = ins_piece;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	723b      	strb	r3, [r7, #8]
	init.id = n;
 8011f72:	79fb      	ldrb	r3, [r7, #7]
 8011f74:	613b      	str	r3, [r7, #16]

	while (qMonitor == NULL){
 8011f76:	e002      	b.n	8011f7e <addPieces+0x6e>
		osDelay(10);
 8011f78:	200a      	movs	r0, #10
 8011f7a:	f7f9 fdb8 	bl	800baee <osDelay>
	while (qMonitor == NULL){
 8011f7e:	4b09      	ldr	r3, [pc, #36]	; (8011fa4 <addPieces+0x94>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d0f8      	beq.n	8011f78 <addPieces+0x68>
	}
	xQueueSendToBack(qMonitor, &init, 1000);
 8011f86:	4b07      	ldr	r3, [pc, #28]	; (8011fa4 <addPieces+0x94>)
 8011f88:	6818      	ldr	r0, [r3, #0]
 8011f8a:	f107 0108 	add.w	r1, r7, #8
 8011f8e:	2300      	movs	r3, #0
 8011f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011f94:	f7fb faf3 	bl	800d57e <xQueueGenericSend>

}
 8011f98:	bf00      	nop
 8011f9a:	3720      	adds	r7, #32
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	20004228 	.word	0x20004228
 8011fa4:	20003fe8 	.word	0x20003fe8

08011fa8 <changeMode>:
 * @param new_mode: Modo ao qual deseja-se operar;
*  @retval None
*  @note: só é seguro chamar esta função quando a máquina de estados NÃO
*  estiver em execução
*/
void changeMode(sm_t* sm, Mode_t new_mode){
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	70fb      	strb	r3, [r7, #3]
	if (xSemaphoreTake(ChangeSmMutex, portMAX_DELAY) == pdTRUE){
 8011fb4:	4b37      	ldr	r3, [pc, #220]	; (8012094 <changeMode+0xec>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fb fdd3 	bl	800db68 <xQueueSemaphoreTake>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d15a      	bne.n	801207e <changeMode+0xd6>
		sm->mode = new_mode;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	78fa      	ldrb	r2, [r7, #3]
 8011fcc:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d

		if (new_mode == C1){
 8011fd0:	78fb      	ldrb	r3, [r7, #3]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d128      	bne.n	8012028 <changeMode+0x80>
			sm->states_list[ST_1].list_trans[1].dst = &sm->states_list[ST_6];
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	631a      	str	r2, [r3, #48]	; 0x30
			sm->states_list[ST_1].list_trans[1].event = &sm->events_list[B1_in];
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	62da      	str	r2, [r3, #44]	; 0x2c
			sm->states_list[ST_1].list_trans[0].dst = &sm->states_list[ST_4];
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	629a      	str	r2, [r3, #40]	; 0x28
			sm->states_list[ST_1].list_trans[0].event = &sm->events_list[B2_in];
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	625a      	str	r2, [r3, #36]	; 0x24
			sm->states_list[ST_1].list_trans[2].dst = &sm->states_list[ST_2];
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	639a      	str	r2, [r3, #56]	; 0x38
			sm->states_list[ST_1].list_trans[2].event = &sm->events_list[B3_in];
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	635a      	str	r2, [r3, #52]	; 0x34
			sm->states_list[ST_1].list_trans[3].event = NULL;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	63da      	str	r2, [r3, #60]	; 0x3c
			sm->states_list[ST_1].list_trans[3].event = NULL;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	63da      	str	r2, [r3, #60]	; 0x3c
			sm->states_list[ST_1].marked = FALSE;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2200      	movs	r2, #0
 8012022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012026:	e02a      	b.n	801207e <changeMode+0xd6>
		}else if (new_mode == C2){
 8012028:	78fb      	ldrb	r3, [r7, #3]
 801202a:	2b01      	cmp	r3, #1
 801202c:	d127      	bne.n	801207e <changeMode+0xd6>
			sm->states_list[ST_1].list_trans[1].dst = &sm->states_list[ST_6];
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	631a      	str	r2, [r3, #48]	; 0x30
			sm->states_list[ST_1].list_trans[1].event = &sm->events_list[B1_in];
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f503 7290 	add.w	r2, r3, #288	; 0x120
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	62da      	str	r2, [r3, #44]	; 0x2c
			sm->states_list[ST_1].list_trans[2].dst = &sm->states_list[ST_4];
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	639a      	str	r2, [r3, #56]	; 0x38
			sm->states_list[ST_1].list_trans[2].event = &sm->events_list[B2_in];
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	635a      	str	r2, [r3, #52]	; 0x34
			sm->states_list[ST_1].list_trans[0].dst = &sm->states_list[ST_2];
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f103 0248 	add.w	r2, r3, #72	; 0x48
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	629a      	str	r2, [r3, #40]	; 0x28
			sm->states_list[ST_1].list_trans[0].event = &sm->events_list[B3_in];
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	625a      	str	r2, [r3, #36]	; 0x24
			sm->states_list[ST_1].list_trans[3].event = NULL;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	63da      	str	r2, [r3, #60]	; 0x3c
			sm->states_list[ST_1].list_trans[3].event = NULL;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	63da      	str	r2, [r3, #60]	; 0x3c
			sm->states_list[ST_1].marked = FALSE;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2200      	movs	r2, #0
 801207a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		}
	}

	xSemaphoreGive(ChangeSmMutex);  /*!< Libera o Mutex*/
 801207e:	4b05      	ldr	r3, [pc, #20]	; (8012094 <changeMode+0xec>)
 8012080:	6818      	ldr	r0, [r3, #0]
 8012082:	2300      	movs	r3, #0
 8012084:	2200      	movs	r2, #0
 8012086:	2100      	movs	r1, #0
 8012088:	f7fb fa79 	bl	800d57e <xQueueGenericSend>

}
 801208c:	bf00      	nop
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	2000423c 	.word	0x2000423c

08012098 <powerOnStateMachine>:

void powerOnStateMachine(sm_t* sm){
 8012098:	b580      	push	{r7, lr}
 801209a:	b086      	sub	sp, #24
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(ChangeSmMutex, portMAX_DELAY) == pdTRUE){
 80120a0:	4b16      	ldr	r3, [pc, #88]	; (80120fc <powerOnStateMachine+0x64>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7fb fd5d 	bl	800db68 <xQueueSemaphoreTake>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d10c      	bne.n	80120ce <powerOnStateMachine+0x36>
		if (sm->semPower !=NULL){
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d007      	beq.n	80120ce <powerOnStateMachine+0x36>
				xSemaphoreGive(sm->semPower);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8d3 01a0 	ldr.w	r0, [r3, #416]	; 0x1a0
 80120c4:	2300      	movs	r3, #0
 80120c6:	2200      	movs	r2, #0
 80120c8:	2100      	movs	r1, #0
 80120ca:	f7fb fa58 	bl	800d57e <xQueueGenericSend>
			}
	}

	xSemaphoreGive(ChangeSmMutex);  /*!< Libera o Mutex*/
 80120ce:	4b0b      	ldr	r3, [pc, #44]	; (80120fc <powerOnStateMachine+0x64>)
 80120d0:	6818      	ldr	r0, [r3, #0]
 80120d2:	2300      	movs	r3, #0
 80120d4:	2200      	movs	r2, #0
 80120d6:	2100      	movs	r1, #0
 80120d8:	f7fb fa51 	bl	800d57e <xQueueGenericSend>

	occurenceMonitor init;
	init.occurence = init_process;
 80120dc:	2303      	movs	r3, #3
 80120de:	733b      	strb	r3, [r7, #12]
	xQueueSendToBack(qMonitor, &init, 1000);
 80120e0:	4b07      	ldr	r3, [pc, #28]	; (8012100 <powerOnStateMachine+0x68>)
 80120e2:	6818      	ldr	r0, [r3, #0]
 80120e4:	f107 010c 	add.w	r1, r7, #12
 80120e8:	2300      	movs	r3, #0
 80120ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80120ee:	f7fb fa46 	bl	800d57e <xQueueGenericSend>
}
 80120f2:	bf00      	nop
 80120f4:	3718      	adds	r7, #24
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	2000423c 	.word	0x2000423c
 8012100:	20003fe8 	.word	0x20003fe8

08012104 <PowerOffStateMachine>:

void PowerOffStateMachine(sm_t* sm){
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]

	if (xSemaphoreTake(ChangeSmMutex, portMAX_DELAY) == pdTRUE){
 801210c:	4b10      	ldr	r3, [pc, #64]	; (8012150 <PowerOffStateMachine+0x4c>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012114:	4618      	mov	r0, r3
 8012116:	f7fb fd27 	bl	800db68 <xQueueSemaphoreTake>
 801211a:	4603      	mov	r3, r0
 801211c:	2b01      	cmp	r3, #1
 801211e:	d10c      	bne.n	801213a <PowerOffStateMachine+0x36>
		if (sm->semPower != NULL){
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8012126:	2b00      	cmp	r3, #0
 8012128:	d007      	beq.n	801213a <PowerOffStateMachine+0x36>
			xSemaphoreTake(sm->semPower, portMAX_DELAY);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8012130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012134:	4618      	mov	r0, r3
 8012136:	f7fb fd17 	bl	800db68 <xQueueSemaphoreTake>
		}
	}
	xSemaphoreGive(ChangeSmMutex);  /*!< Libera o Mutex*/
 801213a:	4b05      	ldr	r3, [pc, #20]	; (8012150 <PowerOffStateMachine+0x4c>)
 801213c:	6818      	ldr	r0, [r3, #0]
 801213e:	2300      	movs	r3, #0
 8012140:	2200      	movs	r2, #0
 8012142:	2100      	movs	r1, #0
 8012144:	f7fb fa1b 	bl	800d57e <xQueueGenericSend>

}
 8012148:	bf00      	nop
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	2000423c 	.word	0x2000423c

08012154 <StartSystemControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSystemControlTask */
void StartSystemControlTask(void const * argument)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]

	semSystemControl = xSemaphoreCreateBinary();
 801215c:	2203      	movs	r2, #3
 801215e:	2100      	movs	r1, #0
 8012160:	2001      	movs	r0, #1
 8012162:	f7fb f95f 	bl	800d424 <xQueueGenericCreate>
 8012166:	4602      	mov	r2, r0
 8012168:	4b0a      	ldr	r3, [pc, #40]	; (8012194 <StartSystemControlTask+0x40>)
 801216a:	601a      	str	r2, [r3, #0]

  for(;;)
  {
	changeMode(&BancoDeEnsaios_sm, ES);
 801216c:	2104      	movs	r1, #4
 801216e:	480a      	ldr	r0, [pc, #40]	; (8012198 <StartSystemControlTask+0x44>)
 8012170:	f7ff ff1a 	bl	8011fa8 <changeMode>
	addPieces (QTDE_B1_INIT, &qB1);
 8012174:	4909      	ldr	r1, [pc, #36]	; (801219c <StartSystemControlTask+0x48>)
 8012176:	2003      	movs	r0, #3
 8012178:	f7ff feca 	bl	8011f10 <addPieces>
	powerOnStateMachine(&BancoDeEnsaios_sm);
 801217c:	4806      	ldr	r0, [pc, #24]	; (8012198 <StartSystemControlTask+0x44>)
 801217e:	f7ff ff8b 	bl	8012098 <powerOnStateMachine>


    xSemaphoreTake(semSystemControl, portMAX_DELAY);
 8012182:	4b04      	ldr	r3, [pc, #16]	; (8012194 <StartSystemControlTask+0x40>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801218a:	4618      	mov	r0, r3
 801218c:	f7fb fcec 	bl	800db68 <xQueueSemaphoreTake>
	changeMode(&BancoDeEnsaios_sm, ES);
 8012190:	e7ec      	b.n	801216c <StartSystemControlTask+0x18>
 8012192:	bf00      	nop
 8012194:	20004240 	.word	0x20004240
 8012198:	20004048 	.word	0x20004048
 801219c:	20004210 	.word	0x20004210

080121a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80121a0:	b480      	push	{r7}
 80121a2:	b085      	sub	sp, #20
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	60f8      	str	r0, [r7, #12]
 80121a8:	60b9      	str	r1, [r7, #8]
 80121aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	4a07      	ldr	r2, [pc, #28]	; (80121cc <vApplicationGetIdleTaskMemory+0x2c>)
 80121b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	4a06      	ldr	r2, [pc, #24]	; (80121d0 <vApplicationGetIdleTaskMemory+0x30>)
 80121b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2280      	movs	r2, #128	; 0x80
 80121bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80121be:	bf00      	nop
 80121c0:	3714      	adds	r7, #20
 80121c2:	46bd      	mov	sp, r7
 80121c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c8:	4770      	bx	lr
 80121ca:	bf00      	nop
 80121cc:	20003d88 	.word	0x20003d88
 80121d0:	20003de8 	.word	0x20003de8

080121d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80121d4:	b5b0      	push	{r4, r5, r7, lr}
 80121d6:	b0b8      	sub	sp, #224	; 0xe0
 80121d8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80121da:	4b4d      	ldr	r3, [pc, #308]	; (8012310 <MX_FREERTOS_Init+0x13c>)
 80121dc:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80121e0:	461d      	mov	r5, r3
 80121e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80121ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80121ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80121f2:	2100      	movs	r1, #0
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7f9 fbd6 	bl	800b9a6 <osThreadCreate>
 80121fa:	4602      	mov	r2, r0
 80121fc:	4b45      	ldr	r3, [pc, #276]	; (8012314 <MX_FREERTOS_Init+0x140>)
 80121fe:	601a      	str	r2, [r3, #0]

  /* definition and creation of blinkLedTask */
  osThreadDef(blinkLedTask, StartblinkLedTask, osPriorityRealtime, 0, 128);
 8012200:	4b45      	ldr	r3, [pc, #276]	; (8012318 <MX_FREERTOS_Init+0x144>)
 8012202:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8012206:	461d      	mov	r5, r3
 8012208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801220c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkLedTaskHandle = osThreadCreate(osThread(blinkLedTask), NULL);
 8012214:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012218:	2100      	movs	r1, #0
 801221a:	4618      	mov	r0, r3
 801221c:	f7f9 fbc3 	bl	800b9a6 <osThreadCreate>
 8012220:	4602      	mov	r2, r0
 8012222:	4b3e      	ldr	r3, [pc, #248]	; (801231c <MX_FREERTOS_Init+0x148>)
 8012224:	601a      	str	r2, [r3, #0]

  /* definition and creation of StateMachineTas */
  osThreadDef(StateMachineTas, StartStateMachineTask, osPriorityHigh, 0, 128);
 8012226:	4b3e      	ldr	r3, [pc, #248]	; (8012320 <MX_FREERTOS_Init+0x14c>)
 8012228:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 801222c:	461d      	mov	r5, r3
 801222e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StateMachineTasHandle = osThreadCreate(osThread(StateMachineTas), NULL);
 801223a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801223e:	2100      	movs	r1, #0
 8012240:	4618      	mov	r0, r3
 8012242:	f7f9 fbb0 	bl	800b9a6 <osThreadCreate>
 8012246:	4602      	mov	r2, r0
 8012248:	4b36      	ldr	r3, [pc, #216]	; (8012324 <MX_FREERTOS_Init+0x150>)
 801224a:	601a      	str	r2, [r3, #0]

  /* definition and creation of OptimizerTask */
  osThreadDef(OptimizerTask, StartOptimizerTask, osPriorityHigh, 0, 128);
 801224c:	4b36      	ldr	r3, [pc, #216]	; (8012328 <MX_FREERTOS_Init+0x154>)
 801224e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8012252:	461d      	mov	r5, r3
 8012254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801225c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OptimizerTaskHandle = osThreadCreate(osThread(OptimizerTask), NULL);
 8012260:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012264:	2100      	movs	r1, #0
 8012266:	4618      	mov	r0, r3
 8012268:	f7f9 fb9d 	bl	800b9a6 <osThreadCreate>
 801226c:	4602      	mov	r2, r0
 801226e:	4b2f      	ldr	r3, [pc, #188]	; (801232c <MX_FREERTOS_Init+0x158>)
 8012270:	601a      	str	r2, [r3, #0]

  /* definition and creation of TerminalTask */
  osThreadDef(TerminalTask, StartTerminalTask, osPriorityAboveNormal, 0, 128);
 8012272:	4b2f      	ldr	r3, [pc, #188]	; (8012330 <MX_FREERTOS_Init+0x15c>)
 8012274:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8012278:	461d      	mov	r5, r3
 801227a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801227c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801227e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TerminalTaskHandle = osThreadCreate(osThread(TerminalTask), NULL);
 8012286:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801228a:	2100      	movs	r1, #0
 801228c:	4618      	mov	r0, r3
 801228e:	f7f9 fb8a 	bl	800b9a6 <osThreadCreate>
 8012292:	4602      	mov	r2, r0
 8012294:	4b27      	ldr	r3, [pc, #156]	; (8012334 <MX_FREERTOS_Init+0x160>)
 8012296:	601a      	str	r2, [r3, #0]

  /* definition and creation of SystemControlTa */
  osThreadDef(SystemControlTa, StartSystemControlTask, osPriorityAboveNormal, 0, 128);
 8012298:	4b27      	ldr	r3, [pc, #156]	; (8012338 <MX_FREERTOS_Init+0x164>)
 801229a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801229e:	461d      	mov	r5, r3
 80122a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80122a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SystemControlTaHandle = osThreadCreate(osThread(SystemControlTa), NULL);
 80122ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80122b0:	2100      	movs	r1, #0
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7f9 fb77 	bl	800b9a6 <osThreadCreate>
 80122b8:	4602      	mov	r2, r0
 80122ba:	4b20      	ldr	r3, [pc, #128]	; (801233c <MX_FREERTOS_Init+0x168>)
 80122bc:	601a      	str	r2, [r3, #0]

  /* definition and creation of EventsProcessTa */
  osThreadDef(EventsProcessTa, StartEventsProcessTask, osPriorityNormal, 0, 128);
 80122be:	4b20      	ldr	r3, [pc, #128]	; (8012340 <MX_FREERTOS_Init+0x16c>)
 80122c0:	f107 041c 	add.w	r4, r7, #28
 80122c4:	461d      	mov	r5, r3
 80122c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80122ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventsProcessTaHandle = osThreadCreate(osThread(EventsProcessTa), NULL);
 80122d2:	f107 031c 	add.w	r3, r7, #28
 80122d6:	2100      	movs	r1, #0
 80122d8:	4618      	mov	r0, r3
 80122da:	f7f9 fb64 	bl	800b9a6 <osThreadCreate>
 80122de:	4602      	mov	r2, r0
 80122e0:	4b18      	ldr	r3, [pc, #96]	; (8012344 <MX_FREERTOS_Init+0x170>)
 80122e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of MonitorTask */
  osThreadDef(MonitorTask, StartMonitorTask, osPriorityNormal, 0, 128);
 80122e4:	4b18      	ldr	r3, [pc, #96]	; (8012348 <MX_FREERTOS_Init+0x174>)
 80122e6:	463c      	mov	r4, r7
 80122e8:	461d      	mov	r5, r3
 80122ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80122f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitorHandle = osThreadCreate(osThread(MonitorTask), NULL);
 80122f6:	463b      	mov	r3, r7
 80122f8:	2100      	movs	r1, #0
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7f9 fb53 	bl	800b9a6 <osThreadCreate>
 8012300:	4602      	mov	r2, r0
 8012302:	4b12      	ldr	r3, [pc, #72]	; (801234c <MX_FREERTOS_Init+0x178>)
 8012304:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8012306:	bf00      	nop
 8012308:	37e0      	adds	r7, #224	; 0xe0
 801230a:	46bd      	mov	sp, r7
 801230c:	bdb0      	pop	{r4, r5, r7, pc}
 801230e:	bf00      	nop
 8012310:	08014a90 	.word	0x08014a90
 8012314:	20004264 	.word	0x20004264
 8012318:	08014abc 	.word	0x08014abc
 801231c:	20004278 	.word	0x20004278
 8012320:	08014ae8 	.word	0x08014ae8
 8012324:	2000426c 	.word	0x2000426c
 8012328:	08014b14 	.word	0x08014b14
 801232c:	2000427c 	.word	0x2000427c
 8012330:	08014b40 	.word	0x08014b40
 8012334:	20004274 	.word	0x20004274
 8012338:	08014b6c 	.word	0x08014b6c
 801233c:	20004268 	.word	0x20004268
 8012340:	08014b98 	.word	0x08014b98
 8012344:	20004270 	.word	0x20004270
 8012348:	08014bc0 	.word	0x08014bc0
 801234c:	20004284 	.word	0x20004284

08012350 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8012358:	2001      	movs	r0, #1
 801235a:	f7f9 fbc8 	bl	800baee <osDelay>
 801235e:	e7fb      	b.n	8012358 <StartDefaultTask+0x8>

08012360 <StartblinkLedTask>:
* de piscar, significa que houve alguma falha grave.
* @param argument: Not used
* @retval None
*/
void StartblinkLedTask(void const * argument)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8012368:	2120      	movs	r1, #32
 801236a:	4804      	ldr	r0, [pc, #16]	; (801237c <StartblinkLedTask+0x1c>)
 801236c:	f7ef fd71 	bl	8001e52 <HAL_GPIO_TogglePin>
    vTaskDelay(1000);
 8012370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012374:	f7fc fb6c 	bl	800ea50 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8012378:	e7f6      	b.n	8012368 <StartblinkLedTask+0x8>
 801237a:	bf00      	nop
 801237c:	40020000 	.word	0x40020000

08012380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b08a      	sub	sp, #40	; 0x28
 8012384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012386:	f107 0314 	add.w	r3, r7, #20
 801238a:	2200      	movs	r2, #0
 801238c:	601a      	str	r2, [r3, #0]
 801238e:	605a      	str	r2, [r3, #4]
 8012390:	609a      	str	r2, [r3, #8]
 8012392:	60da      	str	r2, [r3, #12]
 8012394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012396:	2300      	movs	r3, #0
 8012398:	613b      	str	r3, [r7, #16]
 801239a:	4a47      	ldr	r2, [pc, #284]	; (80124b8 <MX_GPIO_Init+0x138>)
 801239c:	4b46      	ldr	r3, [pc, #280]	; (80124b8 <MX_GPIO_Init+0x138>)
 801239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123a4:	6313      	str	r3, [r2, #48]	; 0x30
 80123a6:	4b44      	ldr	r3, [pc, #272]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123ae:	613b      	str	r3, [r7, #16]
 80123b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80123b2:	2300      	movs	r3, #0
 80123b4:	60fb      	str	r3, [r7, #12]
 80123b6:	4a40      	ldr	r2, [pc, #256]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123b8:	4b3f      	ldr	r3, [pc, #252]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123bc:	f043 0304 	orr.w	r3, r3, #4
 80123c0:	6313      	str	r3, [r2, #48]	; 0x30
 80123c2:	4b3d      	ldr	r3, [pc, #244]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123c6:	f003 0304 	and.w	r3, r3, #4
 80123ca:	60fb      	str	r3, [r7, #12]
 80123cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80123ce:	2300      	movs	r3, #0
 80123d0:	60bb      	str	r3, [r7, #8]
 80123d2:	4a39      	ldr	r2, [pc, #228]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123d4:	4b38      	ldr	r3, [pc, #224]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123d8:	f043 0301 	orr.w	r3, r3, #1
 80123dc:	6313      	str	r3, [r2, #48]	; 0x30
 80123de:	4b36      	ldr	r3, [pc, #216]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123e2:	f003 0301 	and.w	r3, r3, #1
 80123e6:	60bb      	str	r3, [r7, #8]
 80123e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80123ea:	2300      	movs	r3, #0
 80123ec:	607b      	str	r3, [r7, #4]
 80123ee:	4a32      	ldr	r2, [pc, #200]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123f0:	4b31      	ldr	r3, [pc, #196]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123f4:	f043 0302 	orr.w	r3, r3, #2
 80123f8:	6313      	str	r3, [r2, #48]	; 0x30
 80123fa:	4b2f      	ldr	r3, [pc, #188]	; (80124b8 <MX_GPIO_Init+0x138>)
 80123fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123fe:	f003 0302 	and.w	r3, r3, #2
 8012402:	607b      	str	r3, [r7, #4]
 8012404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8012406:	2200      	movs	r2, #0
 8012408:	2120      	movs	r1, #32
 801240a:	482c      	ldr	r0, [pc, #176]	; (80124bc <MX_GPIO_Init+0x13c>)
 801240c:	f7ef fd08 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A3_ret_Pin|esteira_Pin|speaker_Pin|A1_Pin 
 8012410:	2200      	movs	r2, #0
 8012412:	f24c 4138 	movw	r1, #50232	; 0xc438
 8012416:	482a      	ldr	r0, [pc, #168]	; (80124c0 <MX_GPIO_Init+0x140>)
 8012418:	f7ef fd02 	bl	8001e20 <HAL_GPIO_WritePin>
                          |A2_Pin|A3_go_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Sp_Pin|S1_Pin|S2_Pin|S3_Pin;
 801241c:	230f      	movs	r3, #15
 801241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012420:	4b28      	ldr	r3, [pc, #160]	; (80124c4 <MX_GPIO_Init+0x144>)
 8012422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012424:	2302      	movs	r3, #2
 8012426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012428:	f107 0314 	add.w	r3, r7, #20
 801242c:	4619      	mov	r1, r3
 801242e:	4826      	ldr	r0, [pc, #152]	; (80124c8 <MX_GPIO_Init+0x148>)
 8012430:	f7ef fa58 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8012434:	2320      	movs	r3, #32
 8012436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012438:	2301      	movs	r3, #1
 801243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801243c:	2300      	movs	r3, #0
 801243e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012440:	2300      	movs	r3, #0
 8012442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8012444:	f107 0314 	add.w	r3, r7, #20
 8012448:	4619      	mov	r1, r3
 801244a:	481c      	ldr	r0, [pc, #112]	; (80124bc <MX_GPIO_Init+0x13c>)
 801244c:	f7ef fa4a 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = A3_ret_Pin|esteira_Pin|speaker_Pin|A1_Pin 
 8012450:	f24c 4338 	movw	r3, #50232	; 0xc438
 8012454:	617b      	str	r3, [r7, #20]
                          |A2_Pin|A3_go_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012456:	2301      	movs	r3, #1
 8012458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801245a:	2300      	movs	r3, #0
 801245c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801245e:	2300      	movs	r3, #0
 8012460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012462:	f107 0314 	add.w	r3, r7, #20
 8012466:	4619      	mov	r1, r3
 8012468:	4815      	ldr	r0, [pc, #84]	; (80124c0 <MX_GPIO_Init+0x140>)
 801246a:	f7ef fa3b 	bl	80018e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 801246e:	2200      	movs	r2, #0
 8012470:	2105      	movs	r1, #5
 8012472:	2006      	movs	r0, #6
 8012474:	f7ee fa9d 	bl	80009b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8012478:	2006      	movs	r0, #6
 801247a:	f7ee fab6 	bl	80009ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 801247e:	2200      	movs	r2, #0
 8012480:	2105      	movs	r1, #5
 8012482:	2007      	movs	r0, #7
 8012484:	f7ee fa95 	bl	80009b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8012488:	2007      	movs	r0, #7
 801248a:	f7ee faae 	bl	80009ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 801248e:	2200      	movs	r2, #0
 8012490:	2105      	movs	r1, #5
 8012492:	2008      	movs	r0, #8
 8012494:	f7ee fa8d 	bl	80009b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8012498:	2008      	movs	r0, #8
 801249a:	f7ee faa6 	bl	80009ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 801249e:	2200      	movs	r2, #0
 80124a0:	2105      	movs	r1, #5
 80124a2:	2009      	movs	r0, #9
 80124a4:	f7ee fa85 	bl	80009b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80124a8:	2009      	movs	r0, #9
 80124aa:	f7ee fa9e 	bl	80009ea <HAL_NVIC_EnableIRQ>

}
 80124ae:	bf00      	nop
 80124b0:	3728      	adds	r7, #40	; 0x28
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	40023800 	.word	0x40023800
 80124bc:	40020000 	.word	0x40020000
 80124c0:	40020400 	.word	0x40020400
 80124c4:	10110000 	.word	0x10110000
 80124c8:	40020800 	.word	0x40020800

080124cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80124d0:	f7ed fe9e 	bl	8000210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80124d4:	f000 f827 	bl	8012526 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  ConfigureSystemParameters();
 80124d8:	f000 f809 	bl	80124ee <ConfigureSystemParameters>

  /* Initialize all configured peripherals */
  MX_USART3_UART_Init();
 80124dc:	f001 faca 	bl	8013a74 <MX_USART3_UART_Init>
  MX_GPIO_Init();
 80124e0:	f7ff ff4e 	bl	8012380 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80124e4:	f7ff fe76 	bl	80121d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80124e8:	f7f9 fa3a 	bl	800b960 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80124ec:	e7fe      	b.n	80124ec <main+0x20>

080124ee <ConfigureSystemParameters>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void ConfigureSystemParameters(void){
 80124ee:	b580      	push	{r7, lr}
 80124f0:	af00      	add	r7, sp, #0
	  setSpeakerPeriod(15);     /*<! Configura o período do speaker para 20 segundos*/
 80124f2:	200f      	movs	r0, #15
 80124f4:	f7ff fc12 	bl	8011d1c <setSpeakerPeriod>
	  setPeriodoB2(50);         /*<! Seta o período de remoção de peças de B2*/
 80124f8:	2032      	movs	r0, #50	; 0x32
 80124fa:	f7ff fc53 	bl	8011da4 <setPeriodoB2>
	  setPeriodoB3(60);         /*<! Seta o período de remoção de peças de B3*/
 80124fe:	203c      	movs	r0, #60	; 0x3c
 8012500:	f7ff fc60 	bl	8011dc4 <setPeriodoB3>
	  setTempoMaximo(110);      /*<! Seta o tempo máximo que uma peça pode ficar fora de B1*/
 8012504:	206e      	movs	r0, #110	; 0x6e
 8012506:	f7ff fc6d 	bl	8011de4 <setTempoMaximo>

	  setCustoPeca (5000);      /*<! Seta o custo unitário das peças a serem processadas*/
 801250a:	f241 3088 	movw	r0, #5000	; 0x1388
 801250e:	f7ff fc19 	bl	8011d44 <setCustoPeca>
	  setReceitaB2 (7500);      /*<! Receita gerada pelas peças do buffer B2 depois de processadas*/
 8012512:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8012516:	f7ff fc25 	bl	8011d64 <setReceitaB2>
	  setReceitaB3 (10000);     /*<! Receita gerada pelas peças do buffer B3 depois de processadas*/
 801251a:	f242 7010 	movw	r0, #10000	; 0x2710
 801251e:	f7ff fc31 	bl	8011d84 <setReceitaB3>

}
 8012522:	bf00      	nop
 8012524:	bd80      	pop	{r7, pc}

08012526 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b094      	sub	sp, #80	; 0x50
 801252a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801252c:	f107 031c 	add.w	r3, r7, #28
 8012530:	2234      	movs	r2, #52	; 0x34
 8012532:	2100      	movs	r1, #0
 8012534:	4618      	mov	r0, r3
 8012536:	f002 fa22 	bl	801497e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801253a:	f107 0308 	add.w	r3, r7, #8
 801253e:	2200      	movs	r2, #0
 8012540:	601a      	str	r2, [r3, #0]
 8012542:	605a      	str	r2, [r3, #4]
 8012544:	609a      	str	r2, [r3, #8]
 8012546:	60da      	str	r2, [r3, #12]
 8012548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801254a:	2300      	movs	r3, #0
 801254c:	607b      	str	r3, [r7, #4]
 801254e:	4a2a      	ldr	r2, [pc, #168]	; (80125f8 <SystemClock_Config+0xd2>)
 8012550:	4b29      	ldr	r3, [pc, #164]	; (80125f8 <SystemClock_Config+0xd2>)
 8012552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012558:	6413      	str	r3, [r2, #64]	; 0x40
 801255a:	4b27      	ldr	r3, [pc, #156]	; (80125f8 <SystemClock_Config+0xd2>)
 801255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012562:	607b      	str	r3, [r7, #4]
 8012564:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8012566:	2300      	movs	r3, #0
 8012568:	603b      	str	r3, [r7, #0]
 801256a:	4a24      	ldr	r2, [pc, #144]	; (80125fc <SystemClock_Config+0xd6>)
 801256c:	4b23      	ldr	r3, [pc, #140]	; (80125fc <SystemClock_Config+0xd6>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8012574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012578:	6013      	str	r3, [r2, #0]
 801257a:	4b20      	ldr	r3, [pc, #128]	; (80125fc <SystemClock_Config+0xd6>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012582:	603b      	str	r3, [r7, #0]
 8012584:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8012586:	2302      	movs	r3, #2
 8012588:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801258a:	2301      	movs	r3, #1
 801258c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801258e:	2310      	movs	r3, #16
 8012590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012592:	2302      	movs	r3, #2
 8012594:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8012596:	2300      	movs	r3, #0
 8012598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 801259a:	2308      	movs	r3, #8
 801259c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 54;
 801259e:	2336      	movs	r3, #54	; 0x36
 80125a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80125a2:	2302      	movs	r3, #2
 80125a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80125a6:	2302      	movs	r3, #2
 80125a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80125aa:	2302      	movs	r3, #2
 80125ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80125ae:	f107 031c 	add.w	r3, r7, #28
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7f1 fb82 	bl	8003cbc <HAL_RCC_OscConfig>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d001      	beq.n	80125c2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80125be:	f000 f883 	bl	80126c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80125c2:	230f      	movs	r3, #15
 80125c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80125c6:	2302      	movs	r3, #2
 80125c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80125ca:	2300      	movs	r3, #0
 80125cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80125ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80125d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80125da:	f107 0308 	add.w	r3, r7, #8
 80125de:	2101      	movs	r1, #1
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7ef fee7 	bl	80023b4 <HAL_RCC_ClockConfig>
 80125e6:	4603      	mov	r3, r0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d001      	beq.n	80125f0 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80125ec:	f000 f86c 	bl	80126c8 <Error_Handler>
  }
}
 80125f0:	bf00      	nop
 80125f2:	3750      	adds	r7, #80	; 0x50
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	40023800 	.word	0x40023800
 80125fc:	40007000 	.word	0x40007000

08012600 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012600:	b590      	push	{r4, r7, lr}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a25      	ldr	r2, [pc, #148]	; (80126a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d102      	bne.n	8012618 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8012612:	f7ed fe89 	bl	8000328 <HAL_IncTick>
	  HAL_GPIO_TogglePin(speaker_GPIO_Port, speaker_Pin);
  } else if (htim->Instance == TIM5){
	  addSystemTime();                 /*<! Realiza o controle de tempo (1 seg) das peças*/
  }

}
 8012616:	e041      	b.n	801269c <HAL_TIM_PeriodElapsedCallback+0x9c>
  }else if (htim->Instance == TIM6){
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a22      	ldr	r2, [pc, #136]	; (80126a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d105      	bne.n	801262e <HAL_TIM_PeriodElapsedCallback+0x2e>
	  ulHighFrequencyTimerTicks++;       /*<! Para o monitor de desempenho*/
 8012622:	4b22      	ldr	r3, [pc, #136]	; (80126ac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	3301      	adds	r3, #1
 8012628:	4a20      	ldr	r2, [pc, #128]	; (80126ac <HAL_TIM_PeriodElapsedCallback+0xac>)
 801262a:	6013      	str	r3, [r2, #0]
}
 801262c:	e036      	b.n	801269c <HAL_TIM_PeriodElapsedCallback+0x9c>
  else if (htim->Instance == TIM2){
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012636:	d12a      	bne.n	801268e <HAL_TIM_PeriodElapsedCallback+0x8e>
	  if (HAL_GPIO_ReadPin(speaker_GPIO_Port, speaker_Pin) == GPIO_PIN_SET){
 8012638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801263c:	481c      	ldr	r0, [pc, #112]	; (80126b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 801263e:	f7ef fbd7 	bl	8001df0 <HAL_GPIO_ReadPin>
 8012642:	4603      	mov	r3, r0
 8012644:	2b01      	cmp	r3, #1
 8012646:	d112      	bne.n	801266e <HAL_TIM_PeriodElapsedCallback+0x6e>
		  HAL_TIM_Base_Stop(&htim2);
 8012648:	481a      	ldr	r0, [pc, #104]	; (80126b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 801264a:	f7f1 fec0 	bl	80043ce <HAL_TIM_Base_Stop>
		  htim2.Instance->ARR = getSpeakerPeriod() * 54000000-27000000;
 801264e:	4b19      	ldr	r3, [pc, #100]	; (80126b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8012650:	681c      	ldr	r4, [r3, #0]
 8012652:	f7ff fbd7 	bl	8011e04 <getSpeakerPeriod>
 8012656:	4603      	mov	r3, r0
 8012658:	461a      	mov	r2, r3
 801265a:	4b17      	ldr	r3, [pc, #92]	; (80126b8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 801265c:	fb03 f202 	mul.w	r2, r3, r2
 8012660:	4b16      	ldr	r3, [pc, #88]	; (80126bc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8012662:	4413      	add	r3, r2
 8012664:	62e3      	str	r3, [r4, #44]	; 0x2c
		  HAL_TIM_Base_Start(&htim2);
 8012666:	4813      	ldr	r0, [pc, #76]	; (80126b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8012668:	f7f1 fe8d 	bl	8004386 <HAL_TIM_Base_Start>
 801266c:	e009      	b.n	8012682 <HAL_TIM_PeriodElapsedCallback+0x82>
		  HAL_TIM_Base_Stop(&htim2);
 801266e:	4811      	ldr	r0, [pc, #68]	; (80126b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8012670:	f7f1 fead 	bl	80043ce <HAL_TIM_Base_Stop>
		  htim2.Instance->ARR = 27000000;
 8012674:	4b0f      	ldr	r3, [pc, #60]	; (80126b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4a11      	ldr	r2, [pc, #68]	; (80126c0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 801267a:	62da      	str	r2, [r3, #44]	; 0x2c
		  HAL_TIM_Base_Start(&htim2);
 801267c:	480d      	ldr	r0, [pc, #52]	; (80126b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 801267e:	f7f1 fe82 	bl	8004386 <HAL_TIM_Base_Start>
	  HAL_GPIO_TogglePin(speaker_GPIO_Port, speaker_Pin);
 8012682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012686:	480a      	ldr	r0, [pc, #40]	; (80126b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8012688:	f7ef fbe3 	bl	8001e52 <HAL_GPIO_TogglePin>
}
 801268c:	e006      	b.n	801269c <HAL_TIM_PeriodElapsedCallback+0x9c>
  } else if (htim->Instance == TIM5){
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4a0c      	ldr	r2, [pc, #48]	; (80126c4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d101      	bne.n	801269c <HAL_TIM_PeriodElapsedCallback+0x9c>
	  addSystemTime();                 /*<! Realiza o controle de tempo (1 seg) das peças*/
 8012698:	f7ff fc14 	bl	8011ec4 <addSystemTime>
}
 801269c:	bf00      	nop
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd90      	pop	{r4, r7, pc}
 80126a4:	40002000 	.word	0x40002000
 80126a8:	40001000 	.word	0x40001000
 80126ac:	20003fec 	.word	0x20003fec
 80126b0:	40020400 	.word	0x40020400
 80126b4:	200043c0 	.word	0x200043c0
 80126b8:	0337f980 	.word	0x0337f980
 80126bc:	fe640340 	.word	0xfe640340
 80126c0:	019bfcc0 	.word	0x019bfcc0
 80126c4:	40000c00 	.word	0x40000c00

080126c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80126c8:	b480      	push	{r7}
 80126ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80126cc:	bf00      	nop
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop

080126d8 <vGetTimerForRunTimeStats>:


xQueueHandle  qMonitor=NULL;
uint32_t ulHighFrequencyTimerTicks = 0;

uint32_t vGetTimerForRunTimeStats (void){
 80126d8:	b480      	push	{r7}
 80126da:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80126dc:	4b03      	ldr	r3, [pc, #12]	; (80126ec <vGetTimerForRunTimeStats+0x14>)
 80126de:	681b      	ldr	r3, [r3, #0]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop
 80126ec:	20003fec 	.word	0x20003fec

080126f0 <MonitorPutChar>:

void MonitorPutChar(char ucData){
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	4603      	mov	r3, r0
 80126f8:	71fb      	strb	r3, [r7, #7]
		// Envia um caracter
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)&ucData, 1);
 80126fa:	1dfb      	adds	r3, r7, #7
 80126fc:	2201      	movs	r2, #1
 80126fe:	4619      	mov	r1, r3
 8012700:	4806      	ldr	r0, [pc, #24]	; (801271c <MonitorPutChar+0x2c>)
 8012702:	f7f7 fccb 	bl	800a09c <HAL_UART_Transmit_IT>
		// Espera por uma interrupção da UART
		xSemaphoreTake(semtxUSART3, portMAX_DELAY);
 8012706:	4b06      	ldr	r3, [pc, #24]	; (8012720 <MonitorPutChar+0x30>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801270e:	4618      	mov	r0, r3
 8012710:	f7fb fa2a 	bl	800db68 <xQueueSemaphoreTake>
}
 8012714:	bf00      	nop
 8012716:	3708      	adds	r7, #8
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}
 801271c:	20004400 	.word	0x20004400
 8012720:	20004034 	.word	0x20004034

08012724 <vConfigureTimerForRunTimeStats>:

void vConfigureTimerForRunTimeStats(void){
 8012724:	b580      	push	{r7, lr}
 8012726:	af00      	add	r7, sp, #0
	MX_TIM6_Init();
 8012728:	f001 f8a8 	bl	801387c <MX_TIM6_Init>
}
 801272c:	bf00      	nop
 801272e:	bd80      	pop	{r7, pc}

08012730 <MonitorPutString>:



void MonitorPutString(char *string, uint16_t size){
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	460b      	mov	r3, r1
 801273a:	807b      	strh	r3, [r7, #2]
		/* Descobre o tamanho da string, caso não informado*/
		if (size == 0){
 801273c:	887b      	ldrh	r3, [r7, #2]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d10b      	bne.n	801275a <MonitorPutString+0x2a>
			uint8_t *tmp = (uint8_t *)string;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	60fb      	str	r3, [r7, #12]

			while(*tmp++){
 8012746:	e002      	b.n	801274e <MonitorPutString+0x1e>
				size++;
 8012748:	887b      	ldrh	r3, [r7, #2]
 801274a:	3301      	adds	r3, #1
 801274c:	807b      	strh	r3, [r7, #2]
			while(*tmp++){
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	1c5a      	adds	r2, r3, #1
 8012752:	60fa      	str	r2, [r7, #12]
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1f6      	bne.n	8012748 <MonitorPutString+0x18>
			}
		}

		/* Transmite uma sequencia de dados, com fluxo controlado pela interrupção */
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)string, size);
 801275a:	887b      	ldrh	r3, [r7, #2]
 801275c:	461a      	mov	r2, r3
 801275e:	6879      	ldr	r1, [r7, #4]
 8012760:	4806      	ldr	r0, [pc, #24]	; (801277c <MonitorPutString+0x4c>)
 8012762:	f7f7 fc9b 	bl	800a09c <HAL_UART_Transmit_IT>

		/*Aguarda o fim da transmissão*/
		xSemaphoreTake(semtxUSART3, portMAX_DELAY);
 8012766:	4b06      	ldr	r3, [pc, #24]	; (8012780 <MonitorPutString+0x50>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801276e:	4618      	mov	r0, r3
 8012770:	f7fb f9fa 	bl	800db68 <xQueueSemaphoreTake>
}
 8012774:	bf00      	nop
 8012776:	3710      	adds	r7, #16
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}
 801277c:	20004400 	.word	0x20004400
 8012780:	20004034 	.word	0x20004034

08012784 <MonitorGetChar>:


void MonitorGetChar(UART_HandleTypeDef *huart, uint8_t *data, uint32_t timeout)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b088      	sub	sp, #32
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
	osEvent event;

	if (huart->Instance == USART3)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	4a0a      	ldr	r2, [pc, #40]	; (80127c0 <MonitorGetChar+0x3c>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d10e      	bne.n	80127b8 <MonitorGetChar+0x34>
	{
		event = osMessageGet(MonitorReceptEvent, timeout);
 801279a:	4b0a      	ldr	r3, [pc, #40]	; (80127c4 <MonitorGetChar+0x40>)
 801279c:	6819      	ldr	r1, [r3, #0]
 801279e:	f107 0314 	add.w	r3, r7, #20
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7f9 fd75 	bl	800c294 <osMessageGet>
		if(event.status == osEventMessage){
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	2b10      	cmp	r3, #16
 80127ae:	d103      	bne.n	80127b8 <MonitorGetChar+0x34>
			*data = (uint8_t)event.value.v;
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80127b8:	bf00      	nop
 80127ba:	3720      	adds	r7, #32
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	40004800 	.word	0x40004800
 80127c4:	20004040 	.word	0x20004040

080127c8 <StartMonitorTask>:
char str[120];
/* USER CODE END Header_StartMonitorTask*/
void StartMonitorTask(void const * argument)
{
 80127c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ca:	b091      	sub	sp, #68	; 0x44
 80127cc:	af02      	add	r7, sp, #8
 80127ce:	6078      	str	r0, [r7, #4]

	qMonitor = xQueueCreate(20, sizeof(occurenceMonitor));
 80127d0:	2200      	movs	r2, #0
 80127d2:	210c      	movs	r1, #12
 80127d4:	2014      	movs	r0, #20
 80127d6:	f7fa fe25 	bl	800d424 <xQueueGenericCreate>
 80127da:	4602      	mov	r2, r0
 80127dc:	4b26      	ldr	r3, [pc, #152]	; (8012878 <StartMonitorTask+0xb0>)
 80127de:	601a      	str	r2, [r3, #0]
	occurenceMonitor recieve;

	Lucros procc1;
	procc1.pecasB2 = 0;
 80127e0:	2300      	movs	r3, #0
 80127e2:	753b      	strb	r3, [r7, #20]
	procc1.pecasB3 = 0;
 80127e4:	2300      	movs	r3, #0
 80127e6:	757b      	strb	r3, [r7, #21]
	procc1.pecasB2_est = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	75bb      	strb	r3, [r7, #22]
	procc1.pecasB3_est = 0;
 80127ec:	2300      	movs	r3, #0
 80127ee:	75fb      	strb	r3, [r7, #23]

	uint8_t supervisoes=0;
 80127f0:	2300      	movs	r3, #0
 80127f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t otimizacoes=0;
 80127f6:	2300      	movs	r3, #0
 80127f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint32_t tempo_supervisor=0;
 80127fc:	2300      	movs	r3, #0
 80127fe:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t tempo_otimizador = 0;
 8012800:	2300      	movs	r3, #0
 8012802:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t maior_otm=0, menor_otm=UINT16_MAX;
 8012804:	2300      	movs	r3, #0
 8012806:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801280c:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t maior_supervisor=0, menor_supervisor=UINT16_MAX;
 801280e:	2300      	movs	r3, #0
 8012810:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012816:	84bb      	strh	r3, [r7, #36]	; 0x24

  for(;;)
  {
    xQueueReceive(qMonitor, &recieve, portMAX_DELAY);
 8012818:	4b17      	ldr	r3, [pc, #92]	; (8012878 <StartMonitorTask+0xb0>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f107 0118 	add.w	r1, r7, #24
 8012820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012824:	4618      	mov	r0, r3
 8012826:	f7fb f8c2 	bl	800d9ae <xQueueReceive>

    if (recieve.occurence == init_process){
 801282a:	7e3b      	ldrb	r3, [r7, #24]
 801282c:	2b03      	cmp	r3, #3
 801282e:	d118      	bne.n	8012862 <StartMonitorTask+0x9a>
    	sprintf (str, "O processo produtivo foi iniciado!\n\r");
 8012830:	4b12      	ldr	r3, [pc, #72]	; (801287c <StartMonitorTask+0xb4>)
 8012832:	4a13      	ldr	r2, [pc, #76]	; (8012880 <StartMonitorTask+0xb8>)
 8012834:	4614      	mov	r4, r2
 8012836:	469e      	mov	lr, r3
 8012838:	f104 0c20 	add.w	ip, r4, #32
 801283c:	4675      	mov	r5, lr
 801283e:	4626      	mov	r6, r4
 8012840:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012842:	6028      	str	r0, [r5, #0]
 8012844:	6069      	str	r1, [r5, #4]
 8012846:	60aa      	str	r2, [r5, #8]
 8012848:	60eb      	str	r3, [r5, #12]
 801284a:	3410      	adds	r4, #16
 801284c:	f10e 0e10 	add.w	lr, lr, #16
 8012850:	4564      	cmp	r4, ip
 8012852:	d1f3      	bne.n	801283c <StartMonitorTask+0x74>
 8012854:	4673      	mov	r3, lr
 8012856:	4622      	mov	r2, r4
 8012858:	6810      	ldr	r0, [r2, #0]
 801285a:	6018      	str	r0, [r3, #0]
 801285c:	7912      	ldrb	r2, [r2, #4]
 801285e:	711a      	strb	r2, [r3, #4]
 8012860:	e38a      	b.n	8012f78 <StartMonitorTask+0x7b0>
    } else if (recieve.occurence ==  ins_piece){
 8012862:	7e3b      	ldrb	r3, [r7, #24]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d10f      	bne.n	8012888 <StartMonitorTask+0xc0>
    	sprintf (str, "%u Peças foram inseridas no buffer B1\n\r", (uint16_t)recieve.id);
 8012868:	6a3b      	ldr	r3, [r7, #32]
 801286a:	b29b      	uxth	r3, r3
 801286c:	461a      	mov	r2, r3
 801286e:	4905      	ldr	r1, [pc, #20]	; (8012884 <StartMonitorTask+0xbc>)
 8012870:	4802      	ldr	r0, [pc, #8]	; (801287c <StartMonitorTask+0xb4>)
 8012872:	f000 fd67 	bl	8013344 <sprintf>
 8012876:	e37f      	b.n	8012f78 <StartMonitorTask+0x7b0>
 8012878:	20003fe8 	.word	0x20003fe8
 801287c:	20004288 	.word	0x20004288
 8012880:	08014bdc 	.word	0x08014bdc
 8012884:	08014c04 	.word	0x08014c04
    }
    else if (recieve.occurence == end_process){
 8012888:	7e3b      	ldrb	r3, [r7, #24]
 801288a:	2b04      	cmp	r3, #4
 801288c:	f040 8282 	bne.w	8012d94 <StartMonitorTask+0x5cc>

    	sprintf (str, " ********************** Relatório Final **********************\n\r");
 8012890:	4ab7      	ldr	r2, [pc, #732]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012892:	4bb8      	ldr	r3, [pc, #736]	; (8012b74 <StartMonitorTask+0x3ac>)
 8012894:	4610      	mov	r0, r2
 8012896:	4619      	mov	r1, r3
 8012898:	2342      	movs	r3, #66	; 0x42
 801289a:	461a      	mov	r2, r3
 801289c:	f002 f864 	bl	8014968 <memcpy>
    	MonitorPutString (str, strlen(str));
 80128a0:	48b3      	ldr	r0, [pc, #716]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128a2:	f001 fa69 	bl	8013d78 <strlen>
 80128a6:	4603      	mov	r3, r0
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	4619      	mov	r1, r3
 80128ac:	48b0      	ldr	r0, [pc, #704]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128ae:	f7ff ff3f 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Peças processadas por B2:           %u\n\r", procc1.pecasB2);
 80128b2:	7d3b      	ldrb	r3, [r7, #20]
 80128b4:	461a      	mov	r2, r3
 80128b6:	49b0      	ldr	r1, [pc, #704]	; (8012b78 <StartMonitorTask+0x3b0>)
 80128b8:	48ad      	ldr	r0, [pc, #692]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128ba:	f000 fd43 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 80128be:	48ac      	ldr	r0, [pc, #688]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128c0:	f001 fa5a 	bl	8013d78 <strlen>
 80128c4:	4603      	mov	r3, r0
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	4619      	mov	r1, r3
 80128ca:	48a9      	ldr	r0, [pc, #676]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128cc:	f7ff ff30 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Receita unitária de peças de B2:    R$ %u\n\r", (uint16_t)getReceitaB2());
 80128d0:	f7ff fab0 	bl	8011e34 <getReceitaB2>
 80128d4:	4603      	mov	r3, r0
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	461a      	mov	r2, r3
 80128da:	49a8      	ldr	r1, [pc, #672]	; (8012b7c <StartMonitorTask+0x3b4>)
 80128dc:	48a4      	ldr	r0, [pc, #656]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128de:	f000 fd31 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 80128e2:	48a3      	ldr	r0, [pc, #652]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128e4:	f001 fa48 	bl	8013d78 <strlen>
 80128e8:	4603      	mov	r3, r0
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	4619      	mov	r1, r3
 80128ee:	48a0      	ldr	r0, [pc, #640]	; (8012b70 <StartMonitorTask+0x3a8>)
 80128f0:	f7ff ff1e 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Receita total gerada por B2:        R$ %u\n\r", (uint16_t)(procc1.pecasB2 * getReceitaB2()));
 80128f4:	7d3b      	ldrb	r3, [r7, #20]
 80128f6:	b29c      	uxth	r4, r3
 80128f8:	f7ff fa9c 	bl	8011e34 <getReceitaB2>
 80128fc:	4603      	mov	r3, r0
 80128fe:	b29b      	uxth	r3, r3
 8012900:	fb14 f303 	smulbb	r3, r4, r3
 8012904:	b29b      	uxth	r3, r3
 8012906:	461a      	mov	r2, r3
 8012908:	499d      	ldr	r1, [pc, #628]	; (8012b80 <StartMonitorTask+0x3b8>)
 801290a:	4899      	ldr	r0, [pc, #612]	; (8012b70 <StartMonitorTask+0x3a8>)
 801290c:	f000 fd1a 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012910:	4897      	ldr	r0, [pc, #604]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012912:	f001 fa31 	bl	8013d78 <strlen>
 8012916:	4603      	mov	r3, r0
 8012918:	b29b      	uxth	r3, r3
 801291a:	4619      	mov	r1, r3
 801291c:	4894      	ldr	r0, [pc, #592]	; (8012b70 <StartMonitorTask+0x3a8>)
 801291e:	f7ff ff07 	bl	8012730 <MonitorPutString>
    	sprintf (str, "\n\r");
 8012922:	4b93      	ldr	r3, [pc, #588]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012924:	4a97      	ldr	r2, [pc, #604]	; (8012b84 <StartMonitorTask+0x3bc>)
 8012926:	8811      	ldrh	r1, [r2, #0]
 8012928:	7892      	ldrb	r2, [r2, #2]
 801292a:	8019      	strh	r1, [r3, #0]
 801292c:	709a      	strb	r2, [r3, #2]
    	MonitorPutString (str, strlen(str));
 801292e:	4890      	ldr	r0, [pc, #576]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012930:	f001 fa22 	bl	8013d78 <strlen>
 8012934:	4603      	mov	r3, r0
 8012936:	b29b      	uxth	r3, r3
 8012938:	4619      	mov	r1, r3
 801293a:	488d      	ldr	r0, [pc, #564]	; (8012b70 <StartMonitorTask+0x3a8>)
 801293c:	f7ff fef8 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Peças processadas por B3:           %u\n\r", (uint16_t)procc1.pecasB3);
 8012940:	7d7b      	ldrb	r3, [r7, #21]
 8012942:	461a      	mov	r2, r3
 8012944:	4990      	ldr	r1, [pc, #576]	; (8012b88 <StartMonitorTask+0x3c0>)
 8012946:	488a      	ldr	r0, [pc, #552]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012948:	f000 fcfc 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 801294c:	4888      	ldr	r0, [pc, #544]	; (8012b70 <StartMonitorTask+0x3a8>)
 801294e:	f001 fa13 	bl	8013d78 <strlen>
 8012952:	4603      	mov	r3, r0
 8012954:	b29b      	uxth	r3, r3
 8012956:	4619      	mov	r1, r3
 8012958:	4885      	ldr	r0, [pc, #532]	; (8012b70 <StartMonitorTask+0x3a8>)
 801295a:	f7ff fee9 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Receita unitária de peças de B3:    R$ %u\n\r", (uint16_t)getReceitaB3());
 801295e:	f7ff fa75 	bl	8011e4c <getReceitaB3>
 8012962:	4603      	mov	r3, r0
 8012964:	b29b      	uxth	r3, r3
 8012966:	461a      	mov	r2, r3
 8012968:	4988      	ldr	r1, [pc, #544]	; (8012b8c <StartMonitorTask+0x3c4>)
 801296a:	4881      	ldr	r0, [pc, #516]	; (8012b70 <StartMonitorTask+0x3a8>)
 801296c:	f000 fcea 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012970:	487f      	ldr	r0, [pc, #508]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012972:	f001 fa01 	bl	8013d78 <strlen>
 8012976:	4603      	mov	r3, r0
 8012978:	b29b      	uxth	r3, r3
 801297a:	4619      	mov	r1, r3
 801297c:	487c      	ldr	r0, [pc, #496]	; (8012b70 <StartMonitorTask+0x3a8>)
 801297e:	f7ff fed7 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Receita total gerada por B3:        R$ %u\n\r", (uint16_t)(procc1.pecasB3 * getReceitaB3()));
 8012982:	7d7b      	ldrb	r3, [r7, #21]
 8012984:	b29c      	uxth	r4, r3
 8012986:	f7ff fa61 	bl	8011e4c <getReceitaB3>
 801298a:	4603      	mov	r3, r0
 801298c:	b29b      	uxth	r3, r3
 801298e:	fb14 f303 	smulbb	r3, r4, r3
 8012992:	b29b      	uxth	r3, r3
 8012994:	461a      	mov	r2, r3
 8012996:	497e      	ldr	r1, [pc, #504]	; (8012b90 <StartMonitorTask+0x3c8>)
 8012998:	4875      	ldr	r0, [pc, #468]	; (8012b70 <StartMonitorTask+0x3a8>)
 801299a:	f000 fcd3 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 801299e:	4874      	ldr	r0, [pc, #464]	; (8012b70 <StartMonitorTask+0x3a8>)
 80129a0:	f001 f9ea 	bl	8013d78 <strlen>
 80129a4:	4603      	mov	r3, r0
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	4619      	mov	r1, r3
 80129aa:	4871      	ldr	r0, [pc, #452]	; (8012b70 <StartMonitorTask+0x3a8>)
 80129ac:	f7ff fec0 	bl	8012730 <MonitorPutString>
    	sprintf (str, "RECEITA TOTAL:                      R$ %u\n\r",(uint16_t)( procc1.pecasB2 * getReceitaB2() + procc1.pecasB3 * getReceitaB3()));
 80129b0:	7d3b      	ldrb	r3, [r7, #20]
 80129b2:	b29c      	uxth	r4, r3
 80129b4:	f7ff fa3e 	bl	8011e34 <getReceitaB2>
 80129b8:	4603      	mov	r3, r0
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	fb14 f303 	smulbb	r3, r4, r3
 80129c0:	b29c      	uxth	r4, r3
 80129c2:	7d7b      	ldrb	r3, [r7, #21]
 80129c4:	b29d      	uxth	r5, r3
 80129c6:	f7ff fa41 	bl	8011e4c <getReceitaB3>
 80129ca:	4603      	mov	r3, r0
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	fb15 f303 	smulbb	r3, r5, r3
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	4423      	add	r3, r4
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	461a      	mov	r2, r3
 80129da:	496e      	ldr	r1, [pc, #440]	; (8012b94 <StartMonitorTask+0x3cc>)
 80129dc:	4864      	ldr	r0, [pc, #400]	; (8012b70 <StartMonitorTask+0x3a8>)
 80129de:	f000 fcb1 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 80129e2:	4863      	ldr	r0, [pc, #396]	; (8012b70 <StartMonitorTask+0x3a8>)
 80129e4:	f001 f9c8 	bl	8013d78 <strlen>
 80129e8:	4603      	mov	r3, r0
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	4619      	mov	r1, r3
 80129ee:	4860      	ldr	r0, [pc, #384]	; (8012b70 <StartMonitorTask+0x3a8>)
 80129f0:	f7ff fe9e 	bl	8012730 <MonitorPutString>
    	sprintf (str, "\n\r");
 80129f4:	4b5e      	ldr	r3, [pc, #376]	; (8012b70 <StartMonitorTask+0x3a8>)
 80129f6:	4a63      	ldr	r2, [pc, #396]	; (8012b84 <StartMonitorTask+0x3bc>)
 80129f8:	8811      	ldrh	r1, [r2, #0]
 80129fa:	7892      	ldrb	r2, [r2, #2]
 80129fc:	8019      	strh	r1, [r3, #0]
 80129fe:	709a      	strb	r2, [r3, #2]
    	MonitorPutString (str, strlen(str));
 8012a00:	485b      	ldr	r0, [pc, #364]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a02:	f001 f9b9 	bl	8013d78 <strlen>
 8012a06:	4603      	mov	r3, r0
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4858      	ldr	r0, [pc, #352]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a0e:	f7ff fe8f 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Peças estragadas em B2:             %u\n\r", (uint16_t)procc1.pecasB2_est);
 8012a12:	7dbb      	ldrb	r3, [r7, #22]
 8012a14:	461a      	mov	r2, r3
 8012a16:	4960      	ldr	r1, [pc, #384]	; (8012b98 <StartMonitorTask+0x3d0>)
 8012a18:	4855      	ldr	r0, [pc, #340]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a1a:	f000 fc93 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012a1e:	4854      	ldr	r0, [pc, #336]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a20:	f001 f9aa 	bl	8013d78 <strlen>
 8012a24:	4603      	mov	r3, r0
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	4619      	mov	r1, r3
 8012a2a:	4851      	ldr	r0, [pc, #324]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a2c:	f7ff fe80 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Peças estragadas em B3:             %u\n\r", (uint16_t)procc1.pecasB3_est);
 8012a30:	7dfb      	ldrb	r3, [r7, #23]
 8012a32:	461a      	mov	r2, r3
 8012a34:	4959      	ldr	r1, [pc, #356]	; (8012b9c <StartMonitorTask+0x3d4>)
 8012a36:	484e      	ldr	r0, [pc, #312]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a38:	f000 fc84 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012a3c:	484c      	ldr	r0, [pc, #304]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a3e:	f001 f99b 	bl	8013d78 <strlen>
 8012a42:	4603      	mov	r3, r0
 8012a44:	b29b      	uxth	r3, r3
 8012a46:	4619      	mov	r1, r3
 8012a48:	4849      	ldr	r0, [pc, #292]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a4a:	f7ff fe71 	bl	8012730 <MonitorPutString>
    	sprintf (str, "\n\r");
 8012a4e:	4b48      	ldr	r3, [pc, #288]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a50:	4a4c      	ldr	r2, [pc, #304]	; (8012b84 <StartMonitorTask+0x3bc>)
 8012a52:	8811      	ldrh	r1, [r2, #0]
 8012a54:	7892      	ldrb	r2, [r2, #2]
 8012a56:	8019      	strh	r1, [r3, #0]
 8012a58:	709a      	strb	r2, [r3, #2]
    	MonitorPutString (str, strlen(str));
 8012a5a:	4845      	ldr	r0, [pc, #276]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a5c:	f001 f98c 	bl	8013d78 <strlen>
 8012a60:	4603      	mov	r3, r0
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	4619      	mov	r1, r3
 8012a66:	4842      	ldr	r0, [pc, #264]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a68:	f7ff fe62 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Peças Totais no processo:           %u\n\r", (uint16_t)(procc1.pecasB2 + procc1.pecasB3 + procc1.pecasB2_est + procc1.pecasB3_est));
 8012a6c:	7d3b      	ldrb	r3, [r7, #20]
 8012a6e:	b29a      	uxth	r2, r3
 8012a70:	7d7b      	ldrb	r3, [r7, #21]
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	4413      	add	r3, r2
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	7dbb      	ldrb	r3, [r7, #22]
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	4413      	add	r3, r2
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	7dfb      	ldrb	r3, [r7, #23]
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	4413      	add	r3, r2
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	461a      	mov	r2, r3
 8012a8a:	4945      	ldr	r1, [pc, #276]	; (8012ba0 <StartMonitorTask+0x3d8>)
 8012a8c:	4838      	ldr	r0, [pc, #224]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a8e:	f000 fc59 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012a92:	4837      	ldr	r0, [pc, #220]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012a94:	f001 f970 	bl	8013d78 <strlen>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	4834      	ldr	r0, [pc, #208]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012aa0:	f7ff fe46 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Custo por peça:                    R$ %u\n\r", (uint16_t)getCustoPeca());
 8012aa4:	f7ff f9ba 	bl	8011e1c <getCustoPeca>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	461a      	mov	r2, r3
 8012aae:	493d      	ldr	r1, [pc, #244]	; (8012ba4 <StartMonitorTask+0x3dc>)
 8012ab0:	482f      	ldr	r0, [pc, #188]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012ab2:	f000 fc47 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012ab6:	482e      	ldr	r0, [pc, #184]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012ab8:	f001 f95e 	bl	8013d78 <strlen>
 8012abc:	4603      	mov	r3, r0
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	482b      	ldr	r0, [pc, #172]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012ac4:	f7ff fe34 	bl	8012730 <MonitorPutString>
    	sprintf (str, "DESPESA TOTAL:                     R$ %u\n\r", (uint16_t)((procc1.pecasB2 + procc1.pecasB3 + procc1.pecasB2_est + procc1.pecasB3_est)*getCustoPeca()));
 8012ac8:	7d3b      	ldrb	r3, [r7, #20]
 8012aca:	461a      	mov	r2, r3
 8012acc:	7d7b      	ldrb	r3, [r7, #21]
 8012ace:	4413      	add	r3, r2
 8012ad0:	7dba      	ldrb	r2, [r7, #22]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	7dfa      	ldrb	r2, [r7, #23]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	b29c      	uxth	r4, r3
 8012ada:	f7ff f99f 	bl	8011e1c <getCustoPeca>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	fb14 f303 	smulbb	r3, r4, r3
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	461a      	mov	r2, r3
 8012aea:	492f      	ldr	r1, [pc, #188]	; (8012ba8 <StartMonitorTask+0x3e0>)
 8012aec:	4820      	ldr	r0, [pc, #128]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012aee:	f000 fc29 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012af2:	481f      	ldr	r0, [pc, #124]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012af4:	f001 f940 	bl	8013d78 <strlen>
 8012af8:	4603      	mov	r3, r0
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	4619      	mov	r1, r3
 8012afe:	481c      	ldr	r0, [pc, #112]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b00:	f7ff fe16 	bl	8012730 <MonitorPutString>
    	sprintf (str, "\n\r");
 8012b04:	4b1a      	ldr	r3, [pc, #104]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b06:	4a1f      	ldr	r2, [pc, #124]	; (8012b84 <StartMonitorTask+0x3bc>)
 8012b08:	8811      	ldrh	r1, [r2, #0]
 8012b0a:	7892      	ldrb	r2, [r2, #2]
 8012b0c:	8019      	strh	r1, [r3, #0]
 8012b0e:	709a      	strb	r2, [r3, #2]
    	MonitorPutString (str, strlen(str));
 8012b10:	4817      	ldr	r0, [pc, #92]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b12:	f001 f931 	bl	8013d78 <strlen>
 8012b16:	4603      	mov	r3, r0
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	4814      	ldr	r0, [pc, #80]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b1e:	f7ff fe07 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Tempo do processo:                 %u segundos\n\r", (uint16_t)recieve.moment);
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	461a      	mov	r2, r3
 8012b28:	4920      	ldr	r1, [pc, #128]	; (8012bac <StartMonitorTask+0x3e4>)
 8012b2a:	4811      	ldr	r0, [pc, #68]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b2c:	f000 fc0a 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012b30:	480f      	ldr	r0, [pc, #60]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b32:	f001 f921 	bl	8013d78 <strlen>
 8012b36:	4603      	mov	r3, r0
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	480c      	ldr	r0, [pc, #48]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b3e:	f7ff fdf7 	bl	8012730 <MonitorPutString>
    	sprintf (str, "\n\r");
 8012b42:	4b0b      	ldr	r3, [pc, #44]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b44:	4a0f      	ldr	r2, [pc, #60]	; (8012b84 <StartMonitorTask+0x3bc>)
 8012b46:	8811      	ldrh	r1, [r2, #0]
 8012b48:	7892      	ldrb	r2, [r2, #2]
 8012b4a:	8019      	strh	r1, [r3, #0]
 8012b4c:	709a      	strb	r2, [r3, #2]
    	MonitorPutString (str, strlen(str));
 8012b4e:	4808      	ldr	r0, [pc, #32]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b50:	f001 f912 	bl	8013d78 <strlen>
 8012b54:	4603      	mov	r3, r0
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	4619      	mov	r1, r3
 8012b5a:	4805      	ldr	r0, [pc, #20]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b5c:	f7ff fde8 	bl	8012730 <MonitorPutString>
    	sprintf (str, "-----------------------------------------\n\r");
 8012b60:	4b03      	ldr	r3, [pc, #12]	; (8012b70 <StartMonitorTask+0x3a8>)
 8012b62:	4a13      	ldr	r2, [pc, #76]	; (8012bb0 <StartMonitorTask+0x3e8>)
 8012b64:	4614      	mov	r4, r2
 8012b66:	469e      	mov	lr, r3
 8012b68:	f104 0c20 	add.w	ip, r4, #32
 8012b6c:	e022      	b.n	8012bb4 <StartMonitorTask+0x3ec>
 8012b6e:	bf00      	nop
 8012b70:	20004288 	.word	0x20004288
 8012b74:	08014c30 	.word	0x08014c30
 8012b78:	08014c74 	.word	0x08014c74
 8012b7c:	08014ca0 	.word	0x08014ca0
 8012b80:	08014cd0 	.word	0x08014cd0
 8012b84:	08014cfc 	.word	0x08014cfc
 8012b88:	08014d00 	.word	0x08014d00
 8012b8c:	08014d2c 	.word	0x08014d2c
 8012b90:	08014d5c 	.word	0x08014d5c
 8012b94:	08014d88 	.word	0x08014d88
 8012b98:	08014db4 	.word	0x08014db4
 8012b9c:	08014de0 	.word	0x08014de0
 8012ba0:	08014e0c 	.word	0x08014e0c
 8012ba4:	08014e38 	.word	0x08014e38
 8012ba8:	08014e64 	.word	0x08014e64
 8012bac:	08014e90 	.word	0x08014e90
 8012bb0:	08014ec4 	.word	0x08014ec4
 8012bb4:	4675      	mov	r5, lr
 8012bb6:	4626      	mov	r6, r4
 8012bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012bba:	6028      	str	r0, [r5, #0]
 8012bbc:	6069      	str	r1, [r5, #4]
 8012bbe:	60aa      	str	r2, [r5, #8]
 8012bc0:	60eb      	str	r3, [r5, #12]
 8012bc2:	3410      	adds	r4, #16
 8012bc4:	f10e 0e10 	add.w	lr, lr, #16
 8012bc8:	4564      	cmp	r4, ip
 8012bca:	d1f3      	bne.n	8012bb4 <StartMonitorTask+0x3ec>
 8012bcc:	4675      	mov	r5, lr
 8012bce:	4623      	mov	r3, r4
 8012bd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012bd2:	6028      	str	r0, [r5, #0]
 8012bd4:	6069      	str	r1, [r5, #4]
 8012bd6:	60aa      	str	r2, [r5, #8]
    	MonitorPutString (str, strlen(str));
 8012bd8:	48ad      	ldr	r0, [pc, #692]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012bda:	f001 f8cd 	bl	8013d78 <strlen>
 8012bde:	4603      	mov	r3, r0
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	4619      	mov	r1, r3
 8012be4:	48aa      	ldr	r0, [pc, #680]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012be6:	f7ff fda3 	bl	8012730 <MonitorPutString>
    	volatile float nn = (float)trunc(((double)((int32_t)(procc1.pecasB2 * getReceitaB2() + procc1.pecasB3 * getReceitaB3()) - (int32_t)((procc1.pecasB2 + procc1.pecasB3 + procc1.pecasB2_est + procc1.pecasB3_est)*getCustoPeca()))/(double)recieve.moment)*1000);
 8012bea:	7d3b      	ldrb	r3, [r7, #20]
 8012bec:	461c      	mov	r4, r3
 8012bee:	f7ff f921 	bl	8011e34 <getReceitaB2>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	fb03 f404 	mul.w	r4, r3, r4
 8012bf8:	7d7b      	ldrb	r3, [r7, #21]
 8012bfa:	461d      	mov	r5, r3
 8012bfc:	f7ff f926 	bl	8011e4c <getReceitaB3>
 8012c00:	4603      	mov	r3, r0
 8012c02:	fb03 f305 	mul.w	r3, r3, r5
 8012c06:	4423      	add	r3, r4
 8012c08:	461c      	mov	r4, r3
 8012c0a:	7d3b      	ldrb	r3, [r7, #20]
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	7d7b      	ldrb	r3, [r7, #21]
 8012c10:	4413      	add	r3, r2
 8012c12:	7dba      	ldrb	r2, [r7, #22]
 8012c14:	4413      	add	r3, r2
 8012c16:	7dfa      	ldrb	r2, [r7, #23]
 8012c18:	4413      	add	r3, r2
 8012c1a:	461d      	mov	r5, r3
 8012c1c:	f7ff f8fe 	bl	8011e1c <getCustoPeca>
 8012c20:	4603      	mov	r3, r0
 8012c22:	fb03 f305 	mul.w	r3, r3, r5
 8012c26:	1ae3      	subs	r3, r4, r3
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f001 f9ff 	bl	801402c <__aeabi_i2d>
 8012c2e:	4604      	mov	r4, r0
 8012c30:	460d      	mov	r5, r1
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	4618      	mov	r0, r3
 8012c36:	f001 f9e9 	bl	801400c <__aeabi_ui2d>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	4620      	mov	r0, r4
 8012c40:	4629      	mov	r1, r5
 8012c42:	f001 fb83 	bl	801434c <__aeabi_ddiv>
 8012c46:	4603      	mov	r3, r0
 8012c48:	460c      	mov	r4, r1
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	4621      	mov	r1, r4
 8012c4e:	f04f 0200 	mov.w	r2, #0
 8012c52:	4b90      	ldr	r3, [pc, #576]	; (8012e94 <StartMonitorTask+0x6cc>)
 8012c54:	f001 fa50 	bl	80140f8 <__aeabi_dmul>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	460c      	mov	r4, r1
 8012c5c:	ec44 3b17 	vmov	d7, r3, r4
 8012c60:	eeb0 0a47 	vmov.f32	s0, s14
 8012c64:	eef0 0a67 	vmov.f32	s1, s15
 8012c68:	f001 fe9a 	bl	80149a0 <trunc>
 8012c6c:	ec54 3b10 	vmov	r3, r4, d0
 8012c70:	4618      	mov	r0, r3
 8012c72:	4621      	mov	r1, r4
 8012c74:	f001 fc52 	bl	801451c <__aeabi_d2f>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	60fb      	str	r3, [r7, #12]
    	sprintf (str, "BENEFICIO TOTAL AO SISTEMA:        %u R$/s\n\r", (uint16_t)nn);
 8012c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8012c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c84:	edc7 7a00 	vstr	s15, [r7]
 8012c88:	883b      	ldrh	r3, [r7, #0]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	4982      	ldr	r1, [pc, #520]	; (8012e98 <StartMonitorTask+0x6d0>)
 8012c90:	487f      	ldr	r0, [pc, #508]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012c92:	f000 fb57 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012c96:	487e      	ldr	r0, [pc, #504]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012c98:	f001 f86e 	bl	8013d78 <strlen>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	487b      	ldr	r0, [pc, #492]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012ca4:	f7ff fd44 	bl	8012730 <MonitorPutString>
    	MonitorPutString ("\n\r", 2);
 8012ca8:	2102      	movs	r1, #2
 8012caa:	487c      	ldr	r0, [pc, #496]	; (8012e9c <StartMonitorTask+0x6d4>)
 8012cac:	f7ff fd40 	bl	8012730 <MonitorPutString>

    	sprintf (str, "Menor tempo de execução do Supervisor = %u\n\r", (uint16_t)menor_supervisor);
 8012cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	497a      	ldr	r1, [pc, #488]	; (8012ea0 <StartMonitorTask+0x6d8>)
 8012cb6:	4876      	ldr	r0, [pc, #472]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012cb8:	f000 fb44 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012cbc:	4874      	ldr	r0, [pc, #464]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012cbe:	f001 f85b 	bl	8013d78 <strlen>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	4871      	ldr	r0, [pc, #452]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012cca:	f7ff fd31 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Maior tempo de execução do Supervisor = %u\n\r", (uint16_t)maior_supervisor);
 8012cce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	4974      	ldr	r1, [pc, #464]	; (8012ea4 <StartMonitorTask+0x6dc>)
 8012cd4:	486e      	ldr	r0, [pc, #440]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012cd6:	f000 fb35 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012cda:	486d      	ldr	r0, [pc, #436]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012cdc:	f001 f84c 	bl	8013d78 <strlen>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	486a      	ldr	r0, [pc, #424]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012ce8:	f7ff fd22 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Tempo total de execução do Supervisor = %d\n\r", (int)tempo_supervisor);
 8012cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cee:	461a      	mov	r2, r3
 8012cf0:	496d      	ldr	r1, [pc, #436]	; (8012ea8 <StartMonitorTask+0x6e0>)
 8012cf2:	4867      	ldr	r0, [pc, #412]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012cf4:	f000 fb26 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012cf8:	4865      	ldr	r0, [pc, #404]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012cfa:	f001 f83d 	bl	8013d78 <strlen>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	4619      	mov	r1, r3
 8012d04:	4862      	ldr	r0, [pc, #392]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d06:	f7ff fd13 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Número de execuções do Supervisor = %u\n\r", (uint16_t)supervisoes);
 8012d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d0e:	461a      	mov	r2, r3
 8012d10:	4966      	ldr	r1, [pc, #408]	; (8012eac <StartMonitorTask+0x6e4>)
 8012d12:	485f      	ldr	r0, [pc, #380]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d14:	f000 fb16 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012d18:	485d      	ldr	r0, [pc, #372]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d1a:	f001 f82d 	bl	8013d78 <strlen>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	4619      	mov	r1, r3
 8012d24:	485a      	ldr	r0, [pc, #360]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d26:	f7ff fd03 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Menor tempo de execução do Otimizador = %u\n\r", (uint16_t)menor_otm);
 8012d2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	4960      	ldr	r1, [pc, #384]	; (8012eb0 <StartMonitorTask+0x6e8>)
 8012d30:	4857      	ldr	r0, [pc, #348]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d32:	f000 fb07 	bl	8013344 <sprintf>
    	MonitorPutString (str, strlen(str));
 8012d36:	4856      	ldr	r0, [pc, #344]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d38:	f001 f81e 	bl	8013d78 <strlen>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	4619      	mov	r1, r3
 8012d42:	4853      	ldr	r0, [pc, #332]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d44:	f7ff fcf4 	bl	8012730 <MonitorPutString>
   	  	sprintf (str, "Maior tempo de execução do Otimizador = %u\n\r", (uint16_t)maior_otm);
 8012d48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	4959      	ldr	r1, [pc, #356]	; (8012eb4 <StartMonitorTask+0x6ec>)
 8012d4e:	4850      	ldr	r0, [pc, #320]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d50:	f000 faf8 	bl	8013344 <sprintf>
   	  	MonitorPutString (str, strlen(str));
 8012d54:	484e      	ldr	r0, [pc, #312]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d56:	f001 f80f 	bl	8013d78 <strlen>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	4619      	mov	r1, r3
 8012d60:	484b      	ldr	r0, [pc, #300]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d62:	f7ff fce5 	bl	8012730 <MonitorPutString>
    	sprintf (str, "Tempo total de execução do Otimizador = %d\n\r", (int)tempo_otimizador);
 8012d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d68:	461a      	mov	r2, r3
 8012d6a:	4953      	ldr	r1, [pc, #332]	; (8012eb8 <StartMonitorTask+0x6f0>)
 8012d6c:	4848      	ldr	r0, [pc, #288]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d6e:	f000 fae9 	bl	8013344 <sprintf>
      	MonitorPutString (str, strlen(str));
 8012d72:	4847      	ldr	r0, [pc, #284]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d74:	f001 f800 	bl	8013d78 <strlen>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	4844      	ldr	r0, [pc, #272]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d80:	f7ff fcd6 	bl	8012730 <MonitorPutString>
      	sprintf (str, "Número de execuções do Otimizador = %u\n\r", (uint16_t)otimizacoes);
 8012d84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012d88:	461a      	mov	r2, r3
 8012d8a:	494c      	ldr	r1, [pc, #304]	; (8012ebc <StartMonitorTask+0x6f4>)
 8012d8c:	4840      	ldr	r0, [pc, #256]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012d8e:	f000 fad9 	bl	8013344 <sprintf>
 8012d92:	e0f1      	b.n	8012f78 <StartMonitorTask+0x7b0>


    }
    else if (recieve.occurence == B1_cai){
 8012d94:	7e3b      	ldrb	r3, [r7, #24]
 8012d96:	2b0a      	cmp	r3, #10
 8012d98:	d108      	bne.n	8012dac <StartMonitorTask+0x5e4>
    	sprintf (str, "t=%6d - A peça %u foi inserida no buffer B1\n\r",(int)recieve.moment, (uint16_t)recieve.id);
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	6a3b      	ldr	r3, [r7, #32]
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	4947      	ldr	r1, [pc, #284]	; (8012ec0 <StartMonitorTask+0x6f8>)
 8012da4:	483a      	ldr	r0, [pc, #232]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012da6:	f000 facd 	bl	8013344 <sprintf>
 8012daa:	e0e5      	b.n	8012f78 <StartMonitorTask+0x7b0>
    }
    else if (recieve.occurence == B2_retira){
 8012dac:	7e3b      	ldrb	r3, [r7, #24]
 8012dae:	2b05      	cmp	r3, #5
 8012db0:	d112      	bne.n	8012dd8 <StartMonitorTask+0x610>
    	sprintf (str, "t=%6d - A peça %d foi removida do buffer B2 - Houve uma receita de R$ %d \n\r",(int)recieve.moment, (int)recieve.id, (int)getReceitaB2());
 8012db2:	69fb      	ldr	r3, [r7, #28]
 8012db4:	461c      	mov	r4, r3
 8012db6:	6a3b      	ldr	r3, [r7, #32]
 8012db8:	461d      	mov	r5, r3
 8012dba:	f7ff f83b 	bl	8011e34 <getReceitaB2>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	462b      	mov	r3, r5
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	493f      	ldr	r1, [pc, #252]	; (8012ec4 <StartMonitorTask+0x6fc>)
 8012dc8:	4831      	ldr	r0, [pc, #196]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012dca:	f000 fabb 	bl	8013344 <sprintf>
    	procc1.pecasB2++;
 8012dce:	7d3b      	ldrb	r3, [r7, #20]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	753b      	strb	r3, [r7, #20]
 8012dd6:	e0cf      	b.n	8012f78 <StartMonitorTask+0x7b0>
    }
    else if (recieve.occurence == B3_retira){
 8012dd8:	7e3b      	ldrb	r3, [r7, #24]
 8012dda:	2b06      	cmp	r3, #6
 8012ddc:	d114      	bne.n	8012e08 <StartMonitorTask+0x640>
    	sprintf (str, "t=%6d - A peça %u foi removida do buffer B3 - Houve uma receita de R$ %u \n\r",(int)recieve.moment, (uint16_t)recieve.id, (uint16_t)getReceitaB3());
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	461c      	mov	r4, r3
 8012de2:	6a3b      	ldr	r3, [r7, #32]
 8012de4:	b29b      	uxth	r3, r3
 8012de6:	461d      	mov	r5, r3
 8012de8:	f7ff f830 	bl	8011e4c <getReceitaB3>
 8012dec:	4603      	mov	r3, r0
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	9300      	str	r3, [sp, #0]
 8012df2:	462b      	mov	r3, r5
 8012df4:	4622      	mov	r2, r4
 8012df6:	4934      	ldr	r1, [pc, #208]	; (8012ec8 <StartMonitorTask+0x700>)
 8012df8:	4825      	ldr	r0, [pc, #148]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012dfa:	f000 faa3 	bl	8013344 <sprintf>
    	procc1.pecasB3++;
 8012dfe:	7d7b      	ldrb	r3, [r7, #21]
 8012e00:	3301      	adds	r3, #1
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	757b      	strb	r3, [r7, #21]
 8012e06:	e0b7      	b.n	8012f78 <StartMonitorTask+0x7b0>
    }
    else if (recieve.occurence == B2_estraga){
 8012e08:	7e3b      	ldrb	r3, [r7, #24]
 8012e0a:	2b07      	cmp	r3, #7
 8012e0c:	d10c      	bne.n	8012e28 <StartMonitorTask+0x660>
    	sprintf (str, "t=%6d - A peça %u foi removida do buffer B2, porém estava estragada - Deixou-se de obter receita com esta peça\n\r",(int)recieve.moment, (uint16_t)recieve.id);
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	461a      	mov	r2, r3
 8012e12:	6a3b      	ldr	r3, [r7, #32]
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	492d      	ldr	r1, [pc, #180]	; (8012ecc <StartMonitorTask+0x704>)
 8012e18:	481d      	ldr	r0, [pc, #116]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012e1a:	f000 fa93 	bl	8013344 <sprintf>
    	procc1.pecasB2_est++;
 8012e1e:	7dbb      	ldrb	r3, [r7, #22]
 8012e20:	3301      	adds	r3, #1
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	75bb      	strb	r3, [r7, #22]
 8012e26:	e0a7      	b.n	8012f78 <StartMonitorTask+0x7b0>
    }
    else if (recieve.occurence == B3_estraga){
 8012e28:	7e3b      	ldrb	r3, [r7, #24]
 8012e2a:	2b08      	cmp	r3, #8
 8012e2c:	d10c      	bne.n	8012e48 <StartMonitorTask+0x680>
    	sprintf (str, "t=%6d - A peça %u foi removida do buffer B3, porém estava estragada - Deixou-se de obter receita com esta peça\n\r", (int)recieve.moment, (uint16_t)recieve.id);
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	461a      	mov	r2, r3
 8012e32:	6a3b      	ldr	r3, [r7, #32]
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	4926      	ldr	r1, [pc, #152]	; (8012ed0 <StartMonitorTask+0x708>)
 8012e38:	4815      	ldr	r0, [pc, #84]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012e3a:	f000 fa83 	bl	8013344 <sprintf>
    	procc1.pecasB3_est++;
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
 8012e40:	3301      	adds	r3, #1
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	75fb      	strb	r3, [r7, #23]
 8012e46:	e097      	b.n	8012f78 <StartMonitorTask+0x7b0>
    }
    else if (recieve.occurence == peca_inicio){
 8012e48:	7e3b      	ldrb	r3, [r7, #24]
 8012e4a:	2b09      	cmp	r3, #9
 8012e4c:	d108      	bne.n	8012e60 <StartMonitorTask+0x698>
    	sprintf (str, "t=%6d - A Peça %u foi identificada no início do processo produtivo\n\r",(int)recieve.moment, (uint16_t)recieve.id);
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	461a      	mov	r2, r3
 8012e52:	6a3b      	ldr	r3, [r7, #32]
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	491f      	ldr	r1, [pc, #124]	; (8012ed4 <StartMonitorTask+0x70c>)
 8012e58:	480d      	ldr	r0, [pc, #52]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012e5a:	f000 fa73 	bl	8013344 <sprintf>
 8012e5e:	e08b      	b.n	8012f78 <StartMonitorTask+0x7b0>
    }
    else if (recieve.occurence == B2_cai){
 8012e60:	7e3b      	ldrb	r3, [r7, #24]
 8012e62:	2b0b      	cmp	r3, #11
 8012e64:	d108      	bne.n	8012e78 <StartMonitorTask+0x6b0>
    	sprintf (str, "t=%6d - A peça %u foi inserida no buffer B2\n\r",(int)recieve.moment, (uint16_t)recieve.id);
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	461a      	mov	r2, r3
 8012e6a:	6a3b      	ldr	r3, [r7, #32]
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	491a      	ldr	r1, [pc, #104]	; (8012ed8 <StartMonitorTask+0x710>)
 8012e70:	4807      	ldr	r0, [pc, #28]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012e72:	f000 fa67 	bl	8013344 <sprintf>
 8012e76:	e07f      	b.n	8012f78 <StartMonitorTask+0x7b0>
    }
    else if (recieve.occurence == B3_cai){
 8012e78:	7e3b      	ldrb	r3, [r7, #24]
 8012e7a:	2b0c      	cmp	r3, #12
 8012e7c:	d130      	bne.n	8012ee0 <StartMonitorTask+0x718>
    	sprintf (str, "t=%6d - A peça %u foi inserida no buffer B3\n\r",(int)recieve.moment, (uint16_t)recieve.id);
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	461a      	mov	r2, r3
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	4915      	ldr	r1, [pc, #84]	; (8012edc <StartMonitorTask+0x714>)
 8012e88:	4801      	ldr	r0, [pc, #4]	; (8012e90 <StartMonitorTask+0x6c8>)
 8012e8a:	f000 fa5b 	bl	8013344 <sprintf>
 8012e8e:	e073      	b.n	8012f78 <StartMonitorTask+0x7b0>
 8012e90:	20004288 	.word	0x20004288
 8012e94:	408f4000 	.word	0x408f4000
 8012e98:	08014ef0 	.word	0x08014ef0
 8012e9c:	08014cfc 	.word	0x08014cfc
 8012ea0:	08014f20 	.word	0x08014f20
 8012ea4:	08014f50 	.word	0x08014f50
 8012ea8:	08014f80 	.word	0x08014f80
 8012eac:	08014fb0 	.word	0x08014fb0
 8012eb0:	08014fdc 	.word	0x08014fdc
 8012eb4:	0801500c 	.word	0x0801500c
 8012eb8:	0801503c 	.word	0x0801503c
 8012ebc:	0801506c 	.word	0x0801506c
 8012ec0:	08015098 	.word	0x08015098
 8012ec4:	080150c8 	.word	0x080150c8
 8012ec8:	08015118 	.word	0x08015118
 8012ecc:	08015168 	.word	0x08015168
 8012ed0:	080151dc 	.word	0x080151dc
 8012ed4:	08015250 	.word	0x08015250
 8012ed8:	08015298 	.word	0x08015298
 8012edc:	080152c8 	.word	0x080152c8
    }else if (recieve.occurence == otm_time){
 8012ee0:	7e3b      	ldrb	r3, [r7, #24]
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d11c      	bne.n	8012f20 <StartMonitorTask+0x758>
    	sprintf (str, "O processo de otimização demorou cerca de %u microssegundos para executar\n\r", (uint16_t)recieve.moment);
 8012ee6:	69fb      	ldr	r3, [r7, #28]
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	461a      	mov	r2, r3
 8012eec:	4927      	ldr	r1, [pc, #156]	; (8012f8c <StartMonitorTask+0x7c4>)
 8012eee:	4828      	ldr	r0, [pc, #160]	; (8012f90 <StartMonitorTask+0x7c8>)
 8012ef0:	f000 fa28 	bl	8013344 <sprintf>
    	tempo_otimizador+= recieve.moment;
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ef8:	4413      	add	r3, r2
 8012efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    	supervisoes++;
 8012efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f00:	3301      	adds	r3, #1
 8012f02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	if (recieve.moment > maior_otm){
 8012f06:	69fa      	ldr	r2, [r7, #28]
 8012f08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d901      	bls.n	8012f12 <StartMonitorTask+0x74a>
    		maior_otm = recieve.moment;
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	857b      	strh	r3, [r7, #42]	; 0x2a
    	}
    	if (recieve.moment < menor_otm){
 8012f12:	69fa      	ldr	r2, [r7, #28]
 8012f14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d22e      	bcs.n	8012f78 <StartMonitorTask+0x7b0>
    		menor_otm = recieve.moment;
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	853b      	strh	r3, [r7, #40]	; 0x28
 8012f1e:	e02b      	b.n	8012f78 <StartMonitorTask+0x7b0>
    	}
    }else if (recieve. occurence == sm_time){
 8012f20:	7e3b      	ldrb	r3, [r7, #24]
 8012f22:	2b02      	cmp	r3, #2
 8012f24:	d11b      	bne.n	8012f5e <StartMonitorTask+0x796>
    	sprintf (str, "O supervisor demorou cerca de %u microssegundos para executar\n\r", (int)recieve.moment);
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	491a      	ldr	r1, [pc, #104]	; (8012f94 <StartMonitorTask+0x7cc>)
 8012f2c:	4818      	ldr	r0, [pc, #96]	; (8012f90 <StartMonitorTask+0x7c8>)
 8012f2e:	f000 fa09 	bl	8013344 <sprintf>
    	tempo_supervisor+=recieve.moment;
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f36:	4413      	add	r3, r2
 8012f38:	633b      	str	r3, [r7, #48]	; 0x30
    	otimizacoes++;
 8012f3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f3e:	3301      	adds	r3, #1
 8012f40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    	if (recieve.moment > maior_supervisor){
 8012f44:	69fa      	ldr	r2, [r7, #28]
 8012f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d901      	bls.n	8012f50 <StartMonitorTask+0x788>
    		maior_supervisor = recieve.moment;
 8012f4c:	69fb      	ldr	r3, [r7, #28]
 8012f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
    	}
    	if (recieve.moment < menor_supervisor){
 8012f50:	69fa      	ldr	r2, [r7, #28]
 8012f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d20f      	bcs.n	8012f78 <StartMonitorTask+0x7b0>
    		menor_supervisor = recieve.moment;
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012f5c:	e00c      	b.n	8012f78 <StartMonitorTask+0x7b0>
    	}

    } else {
    	sprintf (str, "Mensagem não reconhecida\n\r");
 8012f5e:	4a0c      	ldr	r2, [pc, #48]	; (8012f90 <StartMonitorTask+0x7c8>)
 8012f60:	4b0d      	ldr	r3, [pc, #52]	; (8012f98 <StartMonitorTask+0x7d0>)
 8012f62:	4615      	mov	r5, r2
 8012f64:	461c      	mov	r4, r3
 8012f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f68:	6028      	str	r0, [r5, #0]
 8012f6a:	6069      	str	r1, [r5, #4]
 8012f6c:	60aa      	str	r2, [r5, #8]
 8012f6e:	60eb      	str	r3, [r5, #12]
 8012f70:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012f72:	6128      	str	r0, [r5, #16]
 8012f74:	6169      	str	r1, [r5, #20]
 8012f76:	61aa      	str	r2, [r5, #24]
    }

    MonitorPutString (str, strlen(str));
 8012f78:	4805      	ldr	r0, [pc, #20]	; (8012f90 <StartMonitorTask+0x7c8>)
 8012f7a:	f000 fefd 	bl	8013d78 <strlen>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	4619      	mov	r1, r3
 8012f84:	4802      	ldr	r0, [pc, #8]	; (8012f90 <StartMonitorTask+0x7c8>)
 8012f86:	f7ff fbd3 	bl	8012730 <MonitorPutString>
    xQueueReceive(qMonitor, &recieve, portMAX_DELAY);
 8012f8a:	e445      	b.n	8012818 <StartMonitorTask+0x50>
 8012f8c:	080152f8 	.word	0x080152f8
 8012f90:	20004288 	.word	0x20004288
 8012f94:	08015348 	.word	0x08015348
 8012f98:	08015388 	.word	0x08015388

08012f9c <printchar>:
*/

#include "printf-stdarg.h"

void printchar(char **str, int c)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6039      	str	r1, [r7, #0]
	//extern void putchar(char c);

	if (str) {
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00a      	beq.n	8012fc2 <printchar+0x26>
		**str = (char)c;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	683a      	ldr	r2, [r7, #0]
 8012fb2:	b2d2      	uxtb	r2, r2
 8012fb4:	701a      	strb	r2, [r3, #0]
		++(*str);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	1c5a      	adds	r2, r3, #1
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		(void)putchar(c);
	}
}
 8012fc0:	e002      	b.n	8012fc8 <printchar+0x2c>
		(void)putchar(c);
 8012fc2:	6838      	ldr	r0, [r7, #0]
 8012fc4:	f7ff fb94 	bl	80126f0 <MonitorPutChar>
}
 8012fc8:	bf00      	nop
 8012fca:	3708      	adds	r7, #8
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}

08012fd0 <prints>:


int prints(char **out, const char *string, int width, int pad)
{
 8012fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd4:	b084      	sub	sp, #16
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	60f8      	str	r0, [r7, #12]
 8012fda:	60b9      	str	r1, [r7, #8]
 8012fdc:	607a      	str	r2, [r7, #4]
 8012fde:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8012fe0:	2400      	movs	r4, #0
 8012fe2:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	dd17      	ble.n	801301c <prints+0x4c>
		register int len = 0;
 8012fec:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8012fee:	68be      	ldr	r6, [r7, #8]
 8012ff0:	e001      	b.n	8012ff6 <prints+0x26>
 8012ff2:	3501      	adds	r5, #1
 8012ff4:	3601      	adds	r6, #1
 8012ff6:	7833      	ldrb	r3, [r6, #0]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d1fa      	bne.n	8012ff2 <prints+0x22>
		if (len >= width) width = 0;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	429d      	cmp	r5, r3
 8013000:	db02      	blt.n	8013008 <prints+0x38>
 8013002:	2300      	movs	r3, #0
 8013004:	607b      	str	r3, [r7, #4]
 8013006:	e002      	b.n	801300e <prints+0x3e>
		else width -= len;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	1b5b      	subs	r3, r3, r5
 801300c:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	f003 0302 	and.w	r3, r3, #2
 8013014:	2b00      	cmp	r3, #0
 8013016:	d001      	beq.n	801301c <prints+0x4c>
 8013018:	f04f 0830 	mov.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	f003 0301 	and.w	r3, r3, #1
 8013022:	2b00      	cmp	r3, #0
 8013024:	d116      	bne.n	8013054 <prints+0x84>
		for ( ; width > 0; --width) {
 8013026:	e007      	b.n	8013038 <prints+0x68>
			printchar (out, padchar);
 8013028:	4641      	mov	r1, r8
 801302a:	68f8      	ldr	r0, [r7, #12]
 801302c:	f7ff ffb6 	bl	8012f9c <printchar>
			++pc;
 8013030:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	3b01      	subs	r3, #1
 8013036:	607b      	str	r3, [r7, #4]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	dcf4      	bgt.n	8013028 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 801303e:	e009      	b.n	8013054 <prints+0x84>
		printchar (out, *string);
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	4619      	mov	r1, r3
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f7ff ffa8 	bl	8012f9c <printchar>
		++pc;
 801304c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	3301      	adds	r3, #1
 8013052:	60bb      	str	r3, [r7, #8]
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d1f1      	bne.n	8013040 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 801305c:	e007      	b.n	801306e <prints+0x9e>
		printchar (out, padchar);
 801305e:	4641      	mov	r1, r8
 8013060:	68f8      	ldr	r0, [r7, #12]
 8013062:	f7ff ff9b 	bl	8012f9c <printchar>
		++pc;
 8013066:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	3b01      	subs	r3, #1
 801306c:	607b      	str	r3, [r7, #4]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	dcf4      	bgt.n	801305e <prints+0x8e>
	}

	return pc;
 8013074:	4623      	mov	r3, r4
}
 8013076:	4618      	mov	r0, r3
 8013078:	3710      	adds	r7, #16
 801307a:	46bd      	mov	sp, r7
 801307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013080 <printi>:

int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8013080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013084:	b089      	sub	sp, #36	; 0x24
 8013086:	af00      	add	r7, sp, #0
 8013088:	60f8      	str	r0, [r7, #12]
 801308a:	60b9      	str	r1, [r7, #8]
 801308c:	607a      	str	r2, [r7, #4]
 801308e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8013090:	f04f 0900 	mov.w	r9, #0
 8013094:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8013096:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d10c      	bne.n	80130b8 <printi+0x38>
		print_buf[0] = '0';
 801309e:	2330      	movs	r3, #48	; 0x30
 80130a0:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 80130a2:	2300      	movs	r3, #0
 80130a4:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 80130a6:	f107 0114 	add.w	r1, r7, #20
 80130aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f7ff ff8e 	bl	8012fd0 <prints>
 80130b4:	4603      	mov	r3, r0
 80130b6:	e04a      	b.n	801314e <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d00a      	beq.n	80130d4 <printi+0x54>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2b0a      	cmp	r3, #10
 80130c2:	d107      	bne.n	80130d4 <printi+0x54>
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	da04      	bge.n	80130d4 <printi+0x54>
		neg = 1;
 80130ca:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	425b      	negs	r3, r3
 80130d2:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80130d4:	f107 0414 	add.w	r4, r7, #20
 80130d8:	340b      	adds	r4, #11
	*s = '\0';
 80130da:	2300      	movs	r3, #0
 80130dc:	7023      	strb	r3, [r4, #0]

	while (u) {
 80130de:	e015      	b.n	801310c <printi+0x8c>
		t = (unsigned int)u % b;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	fbb5 f2f3 	udiv	r2, r5, r3
 80130e6:	fb03 f302 	mul.w	r3, r3, r2
 80130ea:	1aeb      	subs	r3, r5, r3
 80130ec:	4698      	mov	r8, r3
		if( t >= 10 )
 80130ee:	f1b8 0f09 	cmp.w	r8, #9
 80130f2:	dd02      	ble.n	80130fa <printi+0x7a>
			t += letbase - '0' - 10;
 80130f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130f6:	3b3a      	subs	r3, #58	; 0x3a
 80130f8:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 80130fa:	3c01      	subs	r4, #1
 80130fc:	fa5f f388 	uxtb.w	r3, r8
 8013100:	3330      	adds	r3, #48	; 0x30
 8013102:	b2db      	uxtb	r3, r3
 8013104:	7023      	strb	r3, [r4, #0]
		u /= b;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 801310c:	2d00      	cmp	r5, #0
 801310e:	d1e7      	bne.n	80130e0 <printi+0x60>
	}

	if (neg) {
 8013110:	f1b9 0f00 	cmp.w	r9, #0
 8013114:	d013      	beq.n	801313e <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8013116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013118:	2b00      	cmp	r3, #0
 801311a:	d00d      	beq.n	8013138 <printi+0xb8>
 801311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801311e:	f003 0302 	and.w	r3, r3, #2
 8013122:	2b00      	cmp	r3, #0
 8013124:	d008      	beq.n	8013138 <printi+0xb8>
			printchar (out, '-');
 8013126:	212d      	movs	r1, #45	; 0x2d
 8013128:	68f8      	ldr	r0, [r7, #12]
 801312a:	f7ff ff37 	bl	8012f9c <printchar>
			++pc;
 801312e:	3601      	adds	r6, #1
			--width;
 8013130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013132:	3b01      	subs	r3, #1
 8013134:	643b      	str	r3, [r7, #64]	; 0x40
 8013136:	e002      	b.n	801313e <printi+0xbe>
		}
		else {
			*--s = '-';
 8013138:	3c01      	subs	r4, #1
 801313a:	232d      	movs	r3, #45	; 0x2d
 801313c:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 801313e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013142:	4621      	mov	r1, r4
 8013144:	68f8      	ldr	r0, [r7, #12]
 8013146:	f7ff ff43 	bl	8012fd0 <prints>
 801314a:	4603      	mov	r3, r0
 801314c:	4433      	add	r3, r6
}
 801314e:	4618      	mov	r0, r3
 8013150:	3724      	adds	r7, #36	; 0x24
 8013152:	46bd      	mov	sp, r7
 8013154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013158 <print>:

int print( char **out, const char *format, va_list args )
{
 8013158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801315c:	b08a      	sub	sp, #40	; 0x28
 801315e:	af04      	add	r7, sp, #16
 8013160:	60f8      	str	r0, [r7, #12]
 8013162:	60b9      	str	r1, [r7, #8]
 8013164:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8013166:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8013168:	e0c2      	b.n	80132f0 <print+0x198>
		if (*format == '%') {
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	2b25      	cmp	r3, #37	; 0x25
 8013170:	f040 80b4 	bne.w	80132dc <print+0x184>
			++format;
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	3301      	adds	r3, #1
 8013178:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 801317a:	2600      	movs	r6, #0
 801317c:	4635      	mov	r5, r6
			if (*format == '\0') break;
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	f000 80ba 	beq.w	80132fc <print+0x1a4>
			if (*format == '%') goto out;
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	2b25      	cmp	r3, #37	; 0x25
 801318e:	f000 80a4 	beq.w	80132da <print+0x182>
			if (*format == '-') {
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	2b2d      	cmp	r3, #45	; 0x2d
 8013198:	d109      	bne.n	80131ae <print+0x56>
				++format;
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	3301      	adds	r3, #1
 801319e:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80131a0:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80131a2:	e004      	b.n	80131ae <print+0x56>
				++format;
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	3301      	adds	r3, #1
 80131a8:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80131aa:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	2b30      	cmp	r3, #48	; 0x30
 80131b4:	d0f6      	beq.n	80131a4 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80131b6:	e00b      	b.n	80131d0 <print+0x78>
				width *= 10;
 80131b8:	462b      	mov	r3, r5
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	442b      	add	r3, r5
 80131be:	005b      	lsls	r3, r3, #1
 80131c0:	461d      	mov	r5, r3
				width += *format - '0';
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	3b30      	subs	r3, #48	; 0x30
 80131c8:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	3301      	adds	r3, #1
 80131ce:	60bb      	str	r3, [r7, #8]
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	2b2f      	cmp	r3, #47	; 0x2f
 80131d6:	d903      	bls.n	80131e0 <print+0x88>
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	2b39      	cmp	r3, #57	; 0x39
 80131de:	d9eb      	bls.n	80131b8 <print+0x60>
			}
			if( *format == 's' ) {
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	2b73      	cmp	r3, #115	; 0x73
 80131e6:	d112      	bne.n	801320e <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	1d1a      	adds	r2, r3, #4
 80131ec:	607a      	str	r2, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 80131f2:	f1b8 0f00 	cmp.w	r8, #0
 80131f6:	d001      	beq.n	80131fc <print+0xa4>
 80131f8:	4641      	mov	r1, r8
 80131fa:	e000      	b.n	80131fe <print+0xa6>
 80131fc:	4946      	ldr	r1, [pc, #280]	; (8013318 <print+0x1c0>)
 80131fe:	4633      	mov	r3, r6
 8013200:	462a      	mov	r2, r5
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	f7ff fee4 	bl	8012fd0 <prints>
 8013208:	4603      	mov	r3, r0
 801320a:	441c      	add	r4, r3
				continue;
 801320c:	e06d      	b.n	80132ea <print+0x192>
			}
			if( *format == 'd' ) {
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	2b64      	cmp	r3, #100	; 0x64
 8013214:	d10f      	bne.n	8013236 <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	1d1a      	adds	r2, r3, #4
 801321a:	607a      	str	r2, [r7, #4]
 801321c:	6819      	ldr	r1, [r3, #0]
 801321e:	2361      	movs	r3, #97	; 0x61
 8013220:	9302      	str	r3, [sp, #8]
 8013222:	9601      	str	r6, [sp, #4]
 8013224:	9500      	str	r5, [sp, #0]
 8013226:	2301      	movs	r3, #1
 8013228:	220a      	movs	r2, #10
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f7ff ff28 	bl	8013080 <printi>
 8013230:	4603      	mov	r3, r0
 8013232:	441c      	add	r4, r3
				continue;
 8013234:	e059      	b.n	80132ea <print+0x192>
			}
			if( *format == 'x' ) {
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	2b78      	cmp	r3, #120	; 0x78
 801323c:	d10f      	bne.n	801325e <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	1d1a      	adds	r2, r3, #4
 8013242:	607a      	str	r2, [r7, #4]
 8013244:	6819      	ldr	r1, [r3, #0]
 8013246:	2361      	movs	r3, #97	; 0x61
 8013248:	9302      	str	r3, [sp, #8]
 801324a:	9601      	str	r6, [sp, #4]
 801324c:	9500      	str	r5, [sp, #0]
 801324e:	2300      	movs	r3, #0
 8013250:	2210      	movs	r2, #16
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f7ff ff14 	bl	8013080 <printi>
 8013258:	4603      	mov	r3, r0
 801325a:	441c      	add	r4, r3
				continue;
 801325c:	e045      	b.n	80132ea <print+0x192>
			}
			if( *format == 'X' ) {
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	2b58      	cmp	r3, #88	; 0x58
 8013264:	d10f      	bne.n	8013286 <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	1d1a      	adds	r2, r3, #4
 801326a:	607a      	str	r2, [r7, #4]
 801326c:	6819      	ldr	r1, [r3, #0]
 801326e:	2341      	movs	r3, #65	; 0x41
 8013270:	9302      	str	r3, [sp, #8]
 8013272:	9601      	str	r6, [sp, #4]
 8013274:	9500      	str	r5, [sp, #0]
 8013276:	2300      	movs	r3, #0
 8013278:	2210      	movs	r2, #16
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f7ff ff00 	bl	8013080 <printi>
 8013280:	4603      	mov	r3, r0
 8013282:	441c      	add	r4, r3
				continue;
 8013284:	e031      	b.n	80132ea <print+0x192>
			}
			if( *format == 'u' ) {
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	2b75      	cmp	r3, #117	; 0x75
 801328c:	d10f      	bne.n	80132ae <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	1d1a      	adds	r2, r3, #4
 8013292:	607a      	str	r2, [r7, #4]
 8013294:	6819      	ldr	r1, [r3, #0]
 8013296:	2361      	movs	r3, #97	; 0x61
 8013298:	9302      	str	r3, [sp, #8]
 801329a:	9601      	str	r6, [sp, #4]
 801329c:	9500      	str	r5, [sp, #0]
 801329e:	2300      	movs	r3, #0
 80132a0:	220a      	movs	r2, #10
 80132a2:	68f8      	ldr	r0, [r7, #12]
 80132a4:	f7ff feec 	bl	8013080 <printi>
 80132a8:	4603      	mov	r3, r0
 80132aa:	441c      	add	r4, r3
				continue;
 80132ac:	e01d      	b.n	80132ea <print+0x192>
			}
			if( *format == 'c' ) {
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	2b63      	cmp	r3, #99	; 0x63
 80132b4:	d119      	bne.n	80132ea <print+0x192>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	1d1a      	adds	r2, r3, #4
 80132ba:	607a      	str	r2, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 80132c2:	2300      	movs	r3, #0
 80132c4:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 80132c6:	f107 0114 	add.w	r1, r7, #20
 80132ca:	4633      	mov	r3, r6
 80132cc:	462a      	mov	r2, r5
 80132ce:	68f8      	ldr	r0, [r7, #12]
 80132d0:	f7ff fe7e 	bl	8012fd0 <prints>
 80132d4:	4603      	mov	r3, r0
 80132d6:	441c      	add	r4, r3
				continue;
 80132d8:	e007      	b.n	80132ea <print+0x192>
			if (*format == '%') goto out;
 80132da:	bf00      	nop
			}
		}
		else {
		out:
			printchar (out, *format);
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	4619      	mov	r1, r3
 80132e2:	68f8      	ldr	r0, [r7, #12]
 80132e4:	f7ff fe5a 	bl	8012f9c <printchar>
			++pc;
 80132e8:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	3301      	adds	r3, #1
 80132ee:	60bb      	str	r3, [r7, #8]
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	f47f af38 	bne.w	801316a <print+0x12>
 80132fa:	e000      	b.n	80132fe <print+0x1a6>
			if (*format == '\0') break;
 80132fc:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d003      	beq.n	801330c <print+0x1b4>
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2200      	movs	r2, #0
 801330a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 801330c:	4623      	mov	r3, r4
}
 801330e:	4618      	mov	r0, r3
 8013310:	3718      	adds	r7, #24
 8013312:	46bd      	mov	sp, r7
 8013314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013318:	080153a4 	.word	0x080153a4

0801331c <printf_UART>:

int printf_UART(const char *format, ...)
{
 801331c:	b40f      	push	{r0, r1, r2, r3}
 801331e:	b580      	push	{r7, lr}
 8013320:	b082      	sub	sp, #8
 8013322:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8013324:	f107 0314 	add.w	r3, r7, #20
 8013328:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	6939      	ldr	r1, [r7, #16]
 801332e:	2000      	movs	r0, #0
 8013330:	f7ff ff12 	bl	8013158 <print>
 8013334:	4603      	mov	r3, r0
}
 8013336:	4618      	mov	r0, r3
 8013338:	3708      	adds	r7, #8
 801333a:	46bd      	mov	sp, r7
 801333c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013340:	b004      	add	sp, #16
 8013342:	4770      	bx	lr

08013344 <sprintf>:


int sprintf(char *out, const char *format, ...)
{
 8013344:	b40e      	push	{r1, r2, r3}
 8013346:	b580      	push	{r7, lr}
 8013348:	b085      	sub	sp, #20
 801334a:	af00      	add	r7, sp, #0
 801334c:	6078      	str	r0, [r7, #4]
        va_list args;

        va_start( args, format );
 801334e:	f107 0320 	add.w	r3, r7, #32
 8013352:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 8013354:	1d3b      	adds	r3, r7, #4
 8013356:	68fa      	ldr	r2, [r7, #12]
 8013358:	69f9      	ldr	r1, [r7, #28]
 801335a:	4618      	mov	r0, r3
 801335c:	f7ff fefc 	bl	8013158 <print>
 8013360:	4603      	mov	r3, r0
}
 8013362:	4618      	mov	r0, r3
 8013364:	3714      	adds	r7, #20
 8013366:	46bd      	mov	sp, r7
 8013368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801336c:	b003      	add	sp, #12
 801336e:	4770      	bx	lr

08013370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b082      	sub	sp, #8
 8013374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013376:	2300      	movs	r3, #0
 8013378:	607b      	str	r3, [r7, #4]
 801337a:	4a12      	ldr	r2, [pc, #72]	; (80133c4 <HAL_MspInit+0x54>)
 801337c:	4b11      	ldr	r3, [pc, #68]	; (80133c4 <HAL_MspInit+0x54>)
 801337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013384:	6453      	str	r3, [r2, #68]	; 0x44
 8013386:	4b0f      	ldr	r3, [pc, #60]	; (80133c4 <HAL_MspInit+0x54>)
 8013388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801338e:	607b      	str	r3, [r7, #4]
 8013390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013392:	2300      	movs	r3, #0
 8013394:	603b      	str	r3, [r7, #0]
 8013396:	4a0b      	ldr	r2, [pc, #44]	; (80133c4 <HAL_MspInit+0x54>)
 8013398:	4b0a      	ldr	r3, [pc, #40]	; (80133c4 <HAL_MspInit+0x54>)
 801339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133a0:	6413      	str	r3, [r2, #64]	; 0x40
 80133a2:	4b08      	ldr	r3, [pc, #32]	; (80133c4 <HAL_MspInit+0x54>)
 80133a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80133aa:	603b      	str	r3, [r7, #0]
 80133ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80133ae:	2200      	movs	r2, #0
 80133b0:	210f      	movs	r1, #15
 80133b2:	f06f 0001 	mvn.w	r0, #1
 80133b6:	f7ed fafc 	bl	80009b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80133ba:	bf00      	nop
 80133bc:	3708      	adds	r7, #8
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	bf00      	nop
 80133c4:	40023800 	.word	0x40023800

080133c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b08c      	sub	sp, #48	; 0x30
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80133d0:	2300      	movs	r3, #0
 80133d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80133d4:	2300      	movs	r3, #0
 80133d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80133d8:	2200      	movs	r2, #0
 80133da:	6879      	ldr	r1, [r7, #4]
 80133dc:	202d      	movs	r0, #45	; 0x2d
 80133de:	f7ed fae8 	bl	80009b2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80133e2:	202d      	movs	r0, #45	; 0x2d
 80133e4:	f7ed fb01 	bl	80009ea <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80133e8:	2300      	movs	r3, #0
 80133ea:	60fb      	str	r3, [r7, #12]
 80133ec:	4a1f      	ldr	r2, [pc, #124]	; (801346c <HAL_InitTick+0xa4>)
 80133ee:	4b1f      	ldr	r3, [pc, #124]	; (801346c <HAL_InitTick+0xa4>)
 80133f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133f6:	6413      	str	r3, [r2, #64]	; 0x40
 80133f8:	4b1c      	ldr	r3, [pc, #112]	; (801346c <HAL_InitTick+0xa4>)
 80133fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013400:	60fb      	str	r3, [r7, #12]
 8013402:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013404:	f107 0210 	add.w	r2, r7, #16
 8013408:	f107 0314 	add.w	r3, r7, #20
 801340c:	4611      	mov	r1, r2
 801340e:	4618      	mov	r0, r3
 8013410:	f7ef fab0 	bl	8002974 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8013414:	f7ef f9f2 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8013418:	4603      	mov	r3, r0
 801341a:	005b      	lsls	r3, r3, #1
 801341c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013420:	4a13      	ldr	r2, [pc, #76]	; (8013470 <HAL_InitTick+0xa8>)
 8013422:	fba2 2303 	umull	r2, r3, r2, r3
 8013426:	0c9b      	lsrs	r3, r3, #18
 8013428:	3b01      	subs	r3, #1
 801342a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 801342c:	4b11      	ldr	r3, [pc, #68]	; (8013474 <HAL_InitTick+0xac>)
 801342e:	4a12      	ldr	r2, [pc, #72]	; (8013478 <HAL_InitTick+0xb0>)
 8013430:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8013432:	4b10      	ldr	r3, [pc, #64]	; (8013474 <HAL_InitTick+0xac>)
 8013434:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013438:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 801343a:	4a0e      	ldr	r2, [pc, #56]	; (8013474 <HAL_InitTick+0xac>)
 801343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8013440:	4b0c      	ldr	r3, [pc, #48]	; (8013474 <HAL_InitTick+0xac>)
 8013442:	2200      	movs	r2, #0
 8013444:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013446:	4b0b      	ldr	r3, [pc, #44]	; (8013474 <HAL_InitTick+0xac>)
 8013448:	2200      	movs	r2, #0
 801344a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 801344c:	4809      	ldr	r0, [pc, #36]	; (8013474 <HAL_InitTick+0xac>)
 801344e:	f7f0 ff2b 	bl	80042a8 <HAL_TIM_Base_Init>
 8013452:	4603      	mov	r3, r0
 8013454:	2b00      	cmp	r3, #0
 8013456:	d104      	bne.n	8013462 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8013458:	4806      	ldr	r0, [pc, #24]	; (8013474 <HAL_InitTick+0xac>)
 801345a:	f7f0 ffe3 	bl	8004424 <HAL_TIM_Base_Start_IT>
 801345e:	4603      	mov	r3, r0
 8013460:	e000      	b.n	8013464 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8013462:	2301      	movs	r3, #1
}
 8013464:	4618      	mov	r0, r3
 8013466:	3730      	adds	r7, #48	; 0x30
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	40023800 	.word	0x40023800
 8013470:	431bde83 	.word	0x431bde83
 8013474:	20004300 	.word	0x20004300
 8013478:	40002000 	.word	0x40002000

0801347c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM14 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 801347c:	b480      	push	{r7}
 801347e:	af00      	add	r7, sp, #0
  /* Disable TIM14 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim14, TIM_IT_UPDATE);                                                  
 8013480:	4b06      	ldr	r3, [pc, #24]	; (801349c <HAL_SuspendTick+0x20>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4a05      	ldr	r2, [pc, #20]	; (801349c <HAL_SuspendTick+0x20>)
 8013486:	6812      	ldr	r2, [r2, #0]
 8013488:	68d2      	ldr	r2, [r2, #12]
 801348a:	f022 0201 	bic.w	r2, r2, #1
 801348e:	60da      	str	r2, [r3, #12]
}
 8013490:	bf00      	nop
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr
 801349a:	bf00      	nop
 801349c:	20004300 	.word	0x20004300

080134a0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM14 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80134a0:	b480      	push	{r7}
 80134a2:	af00      	add	r7, sp, #0
  /* Enable TIM14 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim14, TIM_IT_UPDATE);
 80134a4:	4b06      	ldr	r3, [pc, #24]	; (80134c0 <HAL_ResumeTick+0x20>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	4a05      	ldr	r2, [pc, #20]	; (80134c0 <HAL_ResumeTick+0x20>)
 80134aa:	6812      	ldr	r2, [r2, #0]
 80134ac:	68d2      	ldr	r2, [r2, #12]
 80134ae:	f042 0201 	orr.w	r2, r2, #1
 80134b2:	60da      	str	r2, [r3, #12]
}
 80134b4:	bf00      	nop
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	20004300 	.word	0x20004300

080134c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80134c4:	b480      	push	{r7}
 80134c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80134c8:	bf00      	nop
 80134ca:	46bd      	mov	sp, r7
 80134cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d0:	4770      	bx	lr

080134d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80134d2:	b480      	push	{r7}
 80134d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80134d6:	e7fe      	b.n	80134d6 <HardFault_Handler+0x4>

080134d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80134d8:	b480      	push	{r7}
 80134da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80134dc:	e7fe      	b.n	80134dc <MemManage_Handler+0x4>

080134de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80134de:	b480      	push	{r7}
 80134e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80134e2:	e7fe      	b.n	80134e2 <BusFault_Handler+0x4>

080134e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80134e4:	b480      	push	{r7}
 80134e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80134e8:	e7fe      	b.n	80134e8 <UsageFault_Handler+0x4>

080134ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80134ea:	b480      	push	{r7}
 80134ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80134ee:	bf00      	nop
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr

080134f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80134fc:	2001      	movs	r0, #1
 80134fe:	f7ee fceb 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8013502:	bf00      	nop
 8013504:	bd80      	pop	{r7, pc}

08013506 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8013506:	b580      	push	{r7, lr}
 8013508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 801350a:	2002      	movs	r0, #2
 801350c:	f7ee fce4 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8013510:	bf00      	nop
 8013512:	bd80      	pop	{r7, pc}

08013514 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8013518:	2004      	movs	r0, #4
 801351a:	f7ee fcdd 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 801351e:	bf00      	nop
 8013520:	bd80      	pop	{r7, pc}

08013522 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8013526:	2008      	movs	r0, #8
 8013528:	f7ee fcd6 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 801352c:	bf00      	nop
 801352e:	bd80      	pop	{r7, pc}

08013530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8013534:	4802      	ldr	r0, [pc, #8]	; (8013540 <TIM2_IRQHandler+0x10>)
 8013536:	f7f3 f87b 	bl	8006630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801353a:	bf00      	nop
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	200043c0 	.word	0x200043c0

08013544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8013548:	4802      	ldr	r0, [pc, #8]	; (8013554 <USART2_IRQHandler+0x10>)
 801354a:	f7f7 fa9b 	bl	800aa84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801354e:	bf00      	nop
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	20004440 	.word	0x20004440

08013558 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 801355c:	4802      	ldr	r0, [pc, #8]	; (8013568 <USART3_IRQHandler+0x10>)
 801355e:	f7f7 fa91 	bl	800aa84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8013562:	bf00      	nop
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	20004400 	.word	0x20004400

0801356c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8013570:	4802      	ldr	r0, [pc, #8]	; (801357c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8013572:	f7f3 f85d 	bl	8006630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8013576:	bf00      	nop
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	20004300 	.word	0x20004300

08013580 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8013584:	4802      	ldr	r0, [pc, #8]	; (8013590 <TIM5_IRQHandler+0x10>)
 8013586:	f7f3 f853 	bl	8006630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 801358a:	bf00      	nop
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	20004340 	.word	0x20004340

08013594 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8013598:	4802      	ldr	r0, [pc, #8]	; (80135a4 <TIM6_DAC_IRQHandler+0x10>)
 801359a:	f7f3 f849 	bl	8006630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801359e:	bf00      	nop
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	20004380 	.word	0x20004380

080135a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80135a8:	b480      	push	{r7}
 80135aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80135ac:	4a16      	ldr	r2, [pc, #88]	; (8013608 <SystemInit+0x60>)
 80135ae:	4b16      	ldr	r3, [pc, #88]	; (8013608 <SystemInit+0x60>)
 80135b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80135b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80135b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80135bc:	4a13      	ldr	r2, [pc, #76]	; (801360c <SystemInit+0x64>)
 80135be:	4b13      	ldr	r3, [pc, #76]	; (801360c <SystemInit+0x64>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f043 0301 	orr.w	r3, r3, #1
 80135c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80135c8:	4b10      	ldr	r3, [pc, #64]	; (801360c <SystemInit+0x64>)
 80135ca:	2200      	movs	r2, #0
 80135cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80135ce:	4a0f      	ldr	r2, [pc, #60]	; (801360c <SystemInit+0x64>)
 80135d0:	4b0e      	ldr	r3, [pc, #56]	; (801360c <SystemInit+0x64>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80135d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80135dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80135de:	4b0b      	ldr	r3, [pc, #44]	; (801360c <SystemInit+0x64>)
 80135e0:	4a0b      	ldr	r2, [pc, #44]	; (8013610 <SystemInit+0x68>)
 80135e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80135e4:	4a09      	ldr	r2, [pc, #36]	; (801360c <SystemInit+0x64>)
 80135e6:	4b09      	ldr	r3, [pc, #36]	; (801360c <SystemInit+0x64>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80135ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80135f0:	4b06      	ldr	r3, [pc, #24]	; (801360c <SystemInit+0x64>)
 80135f2:	2200      	movs	r2, #0
 80135f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80135f6:	4b04      	ldr	r3, [pc, #16]	; (8013608 <SystemInit+0x60>)
 80135f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80135fc:	609a      	str	r2, [r3, #8]
#endif
}
 80135fe:	bf00      	nop
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr
 8013608:	e000ed00 	.word	0xe000ed00
 801360c:	40023800 	.word	0x40023800
 8013610:	24003010 	.word	0x24003010

08013614 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8013614:	b480      	push	{r7}
 8013616:	b087      	sub	sp, #28
 8013618:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 801361a:	2300      	movs	r3, #0
 801361c:	613b      	str	r3, [r7, #16]
 801361e:	2300      	movs	r3, #0
 8013620:	617b      	str	r3, [r7, #20]
 8013622:	2302      	movs	r3, #2
 8013624:	60fb      	str	r3, [r7, #12]
 8013626:	2300      	movs	r3, #0
 8013628:	60bb      	str	r3, [r7, #8]
 801362a:	2302      	movs	r3, #2
 801362c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 801362e:	4b31      	ldr	r3, [pc, #196]	; (80136f4 <SystemCoreClockUpdate+0xe0>)
 8013630:	689b      	ldr	r3, [r3, #8]
 8013632:	f003 030c 	and.w	r3, r3, #12
 8013636:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	2b04      	cmp	r3, #4
 801363c:	d007      	beq.n	801364e <SystemCoreClockUpdate+0x3a>
 801363e:	2b08      	cmp	r3, #8
 8013640:	d009      	beq.n	8013656 <SystemCoreClockUpdate+0x42>
 8013642:	2b00      	cmp	r3, #0
 8013644:	d13d      	bne.n	80136c2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8013646:	4b2c      	ldr	r3, [pc, #176]	; (80136f8 <SystemCoreClockUpdate+0xe4>)
 8013648:	4a2c      	ldr	r2, [pc, #176]	; (80136fc <SystemCoreClockUpdate+0xe8>)
 801364a:	601a      	str	r2, [r3, #0]
      break;
 801364c:	e03d      	b.n	80136ca <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 801364e:	4b2a      	ldr	r3, [pc, #168]	; (80136f8 <SystemCoreClockUpdate+0xe4>)
 8013650:	4a2b      	ldr	r2, [pc, #172]	; (8013700 <SystemCoreClockUpdate+0xec>)
 8013652:	601a      	str	r2, [r3, #0]
      break;
 8013654:	e039      	b.n	80136ca <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8013656:	4b27      	ldr	r3, [pc, #156]	; (80136f4 <SystemCoreClockUpdate+0xe0>)
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	0d9b      	lsrs	r3, r3, #22
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013662:	4b24      	ldr	r3, [pc, #144]	; (80136f4 <SystemCoreClockUpdate+0xe0>)
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801366a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d00c      	beq.n	801368c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8013672:	4a23      	ldr	r2, [pc, #140]	; (8013700 <SystemCoreClockUpdate+0xec>)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	fbb2 f3f3 	udiv	r3, r2, r3
 801367a:	4a1e      	ldr	r2, [pc, #120]	; (80136f4 <SystemCoreClockUpdate+0xe0>)
 801367c:	6852      	ldr	r2, [r2, #4]
 801367e:	0992      	lsrs	r2, r2, #6
 8013680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013684:	fb02 f303 	mul.w	r3, r2, r3
 8013688:	617b      	str	r3, [r7, #20]
 801368a:	e00b      	b.n	80136a4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 801368c:	4a1b      	ldr	r2, [pc, #108]	; (80136fc <SystemCoreClockUpdate+0xe8>)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	fbb2 f3f3 	udiv	r3, r2, r3
 8013694:	4a17      	ldr	r2, [pc, #92]	; (80136f4 <SystemCoreClockUpdate+0xe0>)
 8013696:	6852      	ldr	r2, [r2, #4]
 8013698:	0992      	lsrs	r2, r2, #6
 801369a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801369e:	fb02 f303 	mul.w	r3, r2, r3
 80136a2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80136a4:	4b13      	ldr	r3, [pc, #76]	; (80136f4 <SystemCoreClockUpdate+0xe0>)
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	0c1b      	lsrs	r3, r3, #16
 80136aa:	f003 0303 	and.w	r3, r3, #3
 80136ae:	3301      	adds	r3, #1
 80136b0:	005b      	lsls	r3, r3, #1
 80136b2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80136b4:	697a      	ldr	r2, [r7, #20]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80136bc:	4a0e      	ldr	r2, [pc, #56]	; (80136f8 <SystemCoreClockUpdate+0xe4>)
 80136be:	6013      	str	r3, [r2, #0]
      break;
 80136c0:	e003      	b.n	80136ca <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80136c2:	4b0d      	ldr	r3, [pc, #52]	; (80136f8 <SystemCoreClockUpdate+0xe4>)
 80136c4:	4a0d      	ldr	r2, [pc, #52]	; (80136fc <SystemCoreClockUpdate+0xe8>)
 80136c6:	601a      	str	r2, [r3, #0]
      break;
 80136c8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80136ca:	4b0a      	ldr	r3, [pc, #40]	; (80136f4 <SystemCoreClockUpdate+0xe0>)
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	091b      	lsrs	r3, r3, #4
 80136d0:	f003 030f 	and.w	r3, r3, #15
 80136d4:	4a0b      	ldr	r2, [pc, #44]	; (8013704 <SystemCoreClockUpdate+0xf0>)
 80136d6:	5cd3      	ldrb	r3, [r2, r3]
 80136d8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80136da:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <SystemCoreClockUpdate+0xe4>)
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	fa22 f303 	lsr.w	r3, r2, r3
 80136e4:	4a04      	ldr	r2, [pc, #16]	; (80136f8 <SystemCoreClockUpdate+0xe4>)
 80136e6:	6013      	str	r3, [r2, #0]
}
 80136e8:	bf00      	nop
 80136ea:	371c      	adds	r7, #28
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr
 80136f4:	40023800 	.word	0x40023800
 80136f8:	2000000c 	.word	0x2000000c
 80136fc:	00f42400 	.word	0x00f42400
 8013700:	017d7840 	.word	0x017d7840
 8013704:	080153ac 	.word	0x080153ac

08013708 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;


/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b086      	sub	sp, #24
 801370c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801370e:	f107 0308 	add.w	r3, r7, #8
 8013712:	2200      	movs	r2, #0
 8013714:	601a      	str	r2, [r3, #0]
 8013716:	605a      	str	r2, [r3, #4]
 8013718:	609a      	str	r2, [r3, #8]
 801371a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801371c:	463b      	mov	r3, r7
 801371e:	2200      	movs	r2, #0
 8013720:	601a      	str	r2, [r3, #0]
 8013722:	605a      	str	r2, [r3, #4]

  HAL_NVIC_SetPriority(TIM2_IRQn, 4 ,0);
 8013724:	2200      	movs	r2, #0
 8013726:	2104      	movs	r1, #4
 8013728:	201c      	movs	r0, #28
 801372a:	f7ed f942 	bl	80009b2 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801372e:	201c      	movs	r0, #28
 8013730:	f7ed f95b 	bl	80009ea <HAL_NVIC_EnableIRQ>

  htim2.Instance = TIM2;
 8013734:	4b22      	ldr	r3, [pc, #136]	; (80137c0 <MX_TIM2_Init+0xb8>)
 8013736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801373a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801373c:	4b20      	ldr	r3, [pc, #128]	; (80137c0 <MX_TIM2_Init+0xb8>)
 801373e:	2200      	movs	r2, #0
 8013740:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013742:	4b1f      	ldr	r3, [pc, #124]	; (80137c0 <MX_TIM2_Init+0xb8>)
 8013744:	2200      	movs	r2, #0
 8013746:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = getSpeakerPeriod()* 54000000;
 8013748:	f7fe fb5c 	bl	8011e04 <getSpeakerPeriod>
 801374c:	4603      	mov	r3, r0
 801374e:	461a      	mov	r2, r3
 8013750:	4b1c      	ldr	r3, [pc, #112]	; (80137c4 <MX_TIM2_Init+0xbc>)
 8013752:	fb03 f302 	mul.w	r3, r3, r2
 8013756:	461a      	mov	r2, r3
 8013758:	4b19      	ldr	r3, [pc, #100]	; (80137c0 <MX_TIM2_Init+0xb8>)
 801375a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801375c:	4b18      	ldr	r3, [pc, #96]	; (80137c0 <MX_TIM2_Init+0xb8>)
 801375e:	2200      	movs	r2, #0
 8013760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013762:	4b17      	ldr	r3, [pc, #92]	; (80137c0 <MX_TIM2_Init+0xb8>)
 8013764:	2200      	movs	r2, #0
 8013766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8013768:	4815      	ldr	r0, [pc, #84]	; (80137c0 <MX_TIM2_Init+0xb8>)
 801376a:	f7f0 fd9d 	bl	80042a8 <HAL_TIM_Base_Init>
 801376e:	4603      	mov	r3, r0
 8013770:	2b00      	cmp	r3, #0
 8013772:	d103      	bne.n	801377c <MX_TIM2_Init+0x74>
  {
	  HAL_TIM_Base_Start_IT(&htim2);
 8013774:	4812      	ldr	r0, [pc, #72]	; (80137c0 <MX_TIM2_Init+0xb8>)
 8013776:	f7f0 fe55 	bl	8004424 <HAL_TIM_Base_Start_IT>
 801377a:	e001      	b.n	8013780 <MX_TIM2_Init+0x78>
  }
  else{
	  Error_Handler();
 801377c:	f7fe ffa4 	bl	80126c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8013786:	f107 0308 	add.w	r3, r7, #8
 801378a:	4619      	mov	r1, r3
 801378c:	480c      	ldr	r0, [pc, #48]	; (80137c0 <MX_TIM2_Init+0xb8>)
 801378e:	f7f3 ff1d 	bl	80075cc <HAL_TIM_ConfigClockSource>
 8013792:	4603      	mov	r3, r0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d001      	beq.n	801379c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8013798:	f7fe ff96 	bl	80126c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801379c:	2300      	movs	r3, #0
 801379e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80137a0:	2300      	movs	r3, #0
 80137a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80137a4:	463b      	mov	r3, r7
 80137a6:	4619      	mov	r1, r3
 80137a8:	4805      	ldr	r0, [pc, #20]	; (80137c0 <MX_TIM2_Init+0xb8>)
 80137aa:	f7f6 f855 	bl	8009858 <HAL_TIMEx_MasterConfigSynchronization>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d001      	beq.n	80137b8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80137b4:	f7fe ff88 	bl	80126c8 <Error_Handler>
  }

}
 80137b8:	bf00      	nop
 80137ba:	3718      	adds	r7, #24
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	200043c0 	.word	0x200043c0
 80137c4:	0337f980 	.word	0x0337f980

080137c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b086      	sub	sp, #24
 80137cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80137ce:	f107 0308 	add.w	r3, r7, #8
 80137d2:	2200      	movs	r2, #0
 80137d4:	601a      	str	r2, [r3, #0]
 80137d6:	605a      	str	r2, [r3, #4]
 80137d8:	609a      	str	r2, [r3, #8]
 80137da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80137dc:	463b      	mov	r3, r7
 80137de:	2200      	movs	r2, #0
 80137e0:	601a      	str	r2, [r3, #0]
 80137e2:	605a      	str	r2, [r3, #4]

  HAL_NVIC_SetPriority(TIM5_IRQn, 4 ,0);
 80137e4:	2200      	movs	r2, #0
 80137e6:	2104      	movs	r1, #4
 80137e8:	2032      	movs	r0, #50	; 0x32
 80137ea:	f7ed f8e2 	bl	80009b2 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80137ee:	2032      	movs	r0, #50	; 0x32
 80137f0:	f7ed f8fb 	bl	80009ea <HAL_NVIC_EnableIRQ>

  htim5.Instance = TIM5;
 80137f4:	4b1e      	ldr	r3, [pc, #120]	; (8013870 <MX_TIM5_Init+0xa8>)
 80137f6:	4a1f      	ldr	r2, [pc, #124]	; (8013874 <MX_TIM5_Init+0xac>)
 80137f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80137fa:	4b1d      	ldr	r3, [pc, #116]	; (8013870 <MX_TIM5_Init+0xa8>)
 80137fc:	2200      	movs	r2, #0
 80137fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013800:	4b1b      	ldr	r3, [pc, #108]	; (8013870 <MX_TIM5_Init+0xa8>)
 8013802:	2200      	movs	r2, #0
 8013804:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 54000000;
 8013806:	4b1a      	ldr	r3, [pc, #104]	; (8013870 <MX_TIM5_Init+0xa8>)
 8013808:	4a1b      	ldr	r2, [pc, #108]	; (8013878 <MX_TIM5_Init+0xb0>)
 801380a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801380c:	4b18      	ldr	r3, [pc, #96]	; (8013870 <MX_TIM5_Init+0xa8>)
 801380e:	2200      	movs	r2, #0
 8013810:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013812:	4b17      	ldr	r3, [pc, #92]	; (8013870 <MX_TIM5_Init+0xa8>)
 8013814:	2200      	movs	r2, #0
 8013816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) == HAL_OK){
 8013818:	4815      	ldr	r0, [pc, #84]	; (8013870 <MX_TIM5_Init+0xa8>)
 801381a:	f7f0 fd45 	bl	80042a8 <HAL_TIM_Base_Init>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d103      	bne.n	801382c <MX_TIM5_Init+0x64>
	  HAL_TIM_Base_Start_IT(&htim5);
 8013824:	4812      	ldr	r0, [pc, #72]	; (8013870 <MX_TIM5_Init+0xa8>)
 8013826:	f7f0 fdfd 	bl	8004424 <HAL_TIM_Base_Start_IT>
 801382a:	e001      	b.n	8013830 <MX_TIM5_Init+0x68>
  }else{
    Error_Handler();
 801382c:	f7fe ff4c 	bl	80126c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8013836:	f107 0308 	add.w	r3, r7, #8
 801383a:	4619      	mov	r1, r3
 801383c:	480c      	ldr	r0, [pc, #48]	; (8013870 <MX_TIM5_Init+0xa8>)
 801383e:	f7f3 fec5 	bl	80075cc <HAL_TIM_ConfigClockSource>
 8013842:	4603      	mov	r3, r0
 8013844:	2b00      	cmp	r3, #0
 8013846:	d001      	beq.n	801384c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8013848:	f7fe ff3e 	bl	80126c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801384c:	2300      	movs	r3, #0
 801384e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013850:	2300      	movs	r3, #0
 8013852:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8013854:	463b      	mov	r3, r7
 8013856:	4619      	mov	r1, r3
 8013858:	4805      	ldr	r0, [pc, #20]	; (8013870 <MX_TIM5_Init+0xa8>)
 801385a:	f7f5 fffd 	bl	8009858 <HAL_TIMEx_MasterConfigSynchronization>
 801385e:	4603      	mov	r3, r0
 8013860:	2b00      	cmp	r3, #0
 8013862:	d001      	beq.n	8013868 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8013864:	f7fe ff30 	bl	80126c8 <Error_Handler>
  }

}
 8013868:	bf00      	nop
 801386a:	3718      	adds	r7, #24
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	20004340 	.word	0x20004340
 8013874:	40000c00 	.word	0x40000c00
 8013878:	0337f980 	.word	0x0337f980

0801387c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013882:	463b      	mov	r3, r7
 8013884:	2200      	movs	r2, #0
 8013886:	601a      	str	r2, [r3, #0]
 8013888:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 801388a:	4b15      	ldr	r3, [pc, #84]	; (80138e0 <MX_TIM6_Init+0x64>)
 801388c:	4a15      	ldr	r2, [pc, #84]	; (80138e4 <MX_TIM6_Init+0x68>)
 801388e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8013890:	4b13      	ldr	r3, [pc, #76]	; (80138e0 <MX_TIM6_Init+0x64>)
 8013892:	2200      	movs	r2, #0
 8013894:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013896:	4b12      	ldr	r3, [pc, #72]	; (80138e0 <MX_TIM6_Init+0x64>)
 8013898:	2200      	movs	r2, #0
 801389a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 540;//540
 801389c:	4b10      	ldr	r3, [pc, #64]	; (80138e0 <MX_TIM6_Init+0x64>)
 801389e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80138a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80138a4:	4b0e      	ldr	r3, [pc, #56]	; (80138e0 <MX_TIM6_Init+0x64>)
 80138a6:	2200      	movs	r2, #0
 80138a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) == HAL_OK){
 80138aa:	480d      	ldr	r0, [pc, #52]	; (80138e0 <MX_TIM6_Init+0x64>)
 80138ac:	f7f0 fcfc 	bl	80042a8 <HAL_TIM_Base_Init>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d102      	bne.n	80138bc <MX_TIM6_Init+0x40>
	  HAL_TIM_Base_Start_IT(&htim6);
 80138b6:	480a      	ldr	r0, [pc, #40]	; (80138e0 <MX_TIM6_Init+0x64>)
 80138b8:	f7f0 fdb4 	bl	8004424 <HAL_TIM_Base_Start_IT>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80138bc:	2300      	movs	r3, #0
 80138be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80138c0:	2300      	movs	r3, #0
 80138c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80138c4:	463b      	mov	r3, r7
 80138c6:	4619      	mov	r1, r3
 80138c8:	4805      	ldr	r0, [pc, #20]	; (80138e0 <MX_TIM6_Init+0x64>)
 80138ca:	f7f5 ffc5 	bl	8009858 <HAL_TIMEx_MasterConfigSynchronization>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d001      	beq.n	80138d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80138d4:	f7fe fef8 	bl	80126c8 <Error_Handler>
  }

}
 80138d8:	bf00      	nop
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	20004380 	.word	0x20004380
 80138e4:	40001000 	.word	0x40001000

080138e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b086      	sub	sp, #24
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138f8:	d116      	bne.n	8013928 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80138fa:	2300      	movs	r3, #0
 80138fc:	617b      	str	r3, [r7, #20]
 80138fe:	4a28      	ldr	r2, [pc, #160]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 8013900:	4b27      	ldr	r3, [pc, #156]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 8013902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013904:	f043 0301 	orr.w	r3, r3, #1
 8013908:	6413      	str	r3, [r2, #64]	; 0x40
 801390a:	4b25      	ldr	r3, [pc, #148]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 801390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801390e:	f003 0301 	and.w	r3, r3, #1
 8013912:	617b      	str	r3, [r7, #20]
 8013914:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8013916:	2200      	movs	r2, #0
 8013918:	2105      	movs	r1, #5
 801391a:	201c      	movs	r0, #28
 801391c:	f7ed f849 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8013920:	201c      	movs	r0, #28
 8013922:	f7ed f862 	bl	80009ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8013926:	e036      	b.n	8013996 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	4a1d      	ldr	r2, [pc, #116]	; (80139a4 <HAL_TIM_Base_MspInit+0xbc>)
 801392e:	4293      	cmp	r3, r2
 8013930:	d116      	bne.n	8013960 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8013932:	2300      	movs	r3, #0
 8013934:	613b      	str	r3, [r7, #16]
 8013936:	4a1a      	ldr	r2, [pc, #104]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 8013938:	4b19      	ldr	r3, [pc, #100]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 801393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801393c:	f043 0308 	orr.w	r3, r3, #8
 8013940:	6413      	str	r3, [r2, #64]	; 0x40
 8013942:	4b17      	ldr	r3, [pc, #92]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 8013944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013946:	f003 0308 	and.w	r3, r3, #8
 801394a:	613b      	str	r3, [r7, #16]
 801394c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 801394e:	2200      	movs	r2, #0
 8013950:	2105      	movs	r1, #5
 8013952:	2032      	movs	r0, #50	; 0x32
 8013954:	f7ed f82d 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8013958:	2032      	movs	r0, #50	; 0x32
 801395a:	f7ed f846 	bl	80009ea <HAL_NVIC_EnableIRQ>
}
 801395e:	e01a      	b.n	8013996 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM6)
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	4a10      	ldr	r2, [pc, #64]	; (80139a8 <HAL_TIM_Base_MspInit+0xc0>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d115      	bne.n	8013996 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 801396a:	2300      	movs	r3, #0
 801396c:	60fb      	str	r3, [r7, #12]
 801396e:	4a0c      	ldr	r2, [pc, #48]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 8013970:	4b0b      	ldr	r3, [pc, #44]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 8013972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013974:	f043 0310 	orr.w	r3, r3, #16
 8013978:	6413      	str	r3, [r2, #64]	; 0x40
 801397a:	4b09      	ldr	r3, [pc, #36]	; (80139a0 <HAL_TIM_Base_MspInit+0xb8>)
 801397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801397e:	f003 0310 	and.w	r3, r3, #16
 8013982:	60fb      	str	r3, [r7, #12]
 8013984:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8013986:	2200      	movs	r2, #0
 8013988:	2105      	movs	r1, #5
 801398a:	2036      	movs	r0, #54	; 0x36
 801398c:	f7ed f811 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8013990:	2036      	movs	r0, #54	; 0x36
 8013992:	f7ed f82a 	bl	80009ea <HAL_NVIC_EnableIRQ>
}
 8013996:	bf00      	nop
 8013998:	3718      	adds	r7, #24
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	40023800 	.word	0x40023800
 80139a4:	40000c00 	.word	0x40000c00
 80139a8:	40001000 	.word	0x40001000

080139ac <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139bc:	d109      	bne.n	80139d2 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80139be:	4a15      	ldr	r2, [pc, #84]	; (8013a14 <HAL_TIM_Base_MspDeInit+0x68>)
 80139c0:	4b14      	ldr	r3, [pc, #80]	; (8013a14 <HAL_TIM_Base_MspDeInit+0x68>)
 80139c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139c4:	f023 0301 	bic.w	r3, r3, #1
 80139c8:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80139ca:	201c      	movs	r0, #28
 80139cc:	f7ed f81b 	bl	8000a06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }
} 
 80139d0:	e01c      	b.n	8013a0c <HAL_TIM_Base_MspDeInit+0x60>
  else if(tim_baseHandle->Instance==TIM5)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	4a10      	ldr	r2, [pc, #64]	; (8013a18 <HAL_TIM_Base_MspDeInit+0x6c>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d109      	bne.n	80139f0 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM5_CLK_DISABLE();
 80139dc:	4a0d      	ldr	r2, [pc, #52]	; (8013a14 <HAL_TIM_Base_MspDeInit+0x68>)
 80139de:	4b0d      	ldr	r3, [pc, #52]	; (8013a14 <HAL_TIM_Base_MspDeInit+0x68>)
 80139e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139e2:	f023 0308 	bic.w	r3, r3, #8
 80139e6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80139e8:	2032      	movs	r0, #50	; 0x32
 80139ea:	f7ed f80c 	bl	8000a06 <HAL_NVIC_DisableIRQ>
} 
 80139ee:	e00d      	b.n	8013a0c <HAL_TIM_Base_MspDeInit+0x60>
  else if(tim_baseHandle->Instance==TIM6)
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4a09      	ldr	r2, [pc, #36]	; (8013a1c <HAL_TIM_Base_MspDeInit+0x70>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d108      	bne.n	8013a0c <HAL_TIM_Base_MspDeInit+0x60>
    __HAL_RCC_TIM6_CLK_DISABLE();
 80139fa:	4a06      	ldr	r2, [pc, #24]	; (8013a14 <HAL_TIM_Base_MspDeInit+0x68>)
 80139fc:	4b05      	ldr	r3, [pc, #20]	; (8013a14 <HAL_TIM_Base_MspDeInit+0x68>)
 80139fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a00:	f023 0310 	bic.w	r3, r3, #16
 8013a04:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8013a06:	2036      	movs	r0, #54	; 0x36
 8013a08:	f7ec fffd 	bl	8000a06 <HAL_NVIC_DisableIRQ>
} 
 8013a0c:	bf00      	nop
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}
 8013a14:	40023800 	.word	0x40023800
 8013a18:	40000c00 	.word	0x40000c00
 8013a1c:	40001000 	.word	0x40001000

08013a20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8013a24:	4b11      	ldr	r3, [pc, #68]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a26:	4a12      	ldr	r2, [pc, #72]	; (8013a70 <MX_USART2_UART_Init+0x50>)
 8013a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8013a2a:	4b10      	ldr	r3, [pc, #64]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013a32:	4b0e      	ldr	r3, [pc, #56]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a34:	2200      	movs	r2, #0
 8013a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8013a38:	4b0c      	ldr	r3, [pc, #48]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8013a3e:	4b0b      	ldr	r3, [pc, #44]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a40:	2200      	movs	r2, #0
 8013a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8013a44:	4b09      	ldr	r3, [pc, #36]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a46:	220c      	movs	r2, #12
 8013a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a4a:	4b08      	ldr	r3, [pc, #32]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a50:	4b06      	ldr	r3, [pc, #24]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a52:	2200      	movs	r2, #0
 8013a54:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013a56:	4805      	ldr	r0, [pc, #20]	; (8013a6c <MX_USART2_UART_Init+0x4c>)
 8013a58:	f7f6 f82a 	bl	8009ab0 <HAL_UART_Init>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d001      	beq.n	8013a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8013a62:	f7fe fe31 	bl	80126c8 <Error_Handler>
  }

}
 8013a66:	bf00      	nop
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	20004440 	.word	0x20004440
 8013a70:	40004400 	.word	0x40004400

08013a74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8013a78:	4b11      	ldr	r3, [pc, #68]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013a7a:	4a12      	ldr	r2, [pc, #72]	; (8013ac4 <MX_USART3_UART_Init+0x50>)
 8013a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8013a7e:	4b10      	ldr	r3, [pc, #64]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8013a86:	4b0e      	ldr	r3, [pc, #56]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013a88:	2200      	movs	r2, #0
 8013a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8013a8c:	4b0c      	ldr	r3, [pc, #48]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013a8e:	2200      	movs	r2, #0
 8013a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8013a92:	4b0b      	ldr	r3, [pc, #44]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013a94:	2200      	movs	r2, #0
 8013a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8013a98:	4b09      	ldr	r3, [pc, #36]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013a9a:	220c      	movs	r2, #12
 8013a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a9e:	4b08      	ldr	r3, [pc, #32]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8013aa4:	4b06      	ldr	r3, [pc, #24]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8013aaa:	4805      	ldr	r0, [pc, #20]	; (8013ac0 <MX_USART3_UART_Init+0x4c>)
 8013aac:	f7f6 f800 	bl	8009ab0 <HAL_UART_Init>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d001      	beq.n	8013aba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8013ab6:	f7fe fe07 	bl	80126c8 <Error_Handler>
  }

}
 8013aba:	bf00      	nop
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	20004400 	.word	0x20004400
 8013ac4:	40004800 	.word	0x40004800

08013ac8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b08c      	sub	sp, #48	; 0x30
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ad0:	f107 031c 	add.w	r3, r7, #28
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	601a      	str	r2, [r3, #0]
 8013ad8:	605a      	str	r2, [r3, #4]
 8013ada:	609a      	str	r2, [r3, #8]
 8013adc:	60da      	str	r2, [r3, #12]
 8013ade:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	4a3a      	ldr	r2, [pc, #232]	; (8013bd0 <HAL_UART_MspInit+0x108>)
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d134      	bne.n	8013b54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8013aea:	2300      	movs	r3, #0
 8013aec:	61bb      	str	r3, [r7, #24]
 8013aee:	4a39      	ldr	r2, [pc, #228]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013af0:	4b38      	ldr	r3, [pc, #224]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013af8:	6413      	str	r3, [r2, #64]	; 0x40
 8013afa:	4b36      	ldr	r3, [pc, #216]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b02:	61bb      	str	r3, [r7, #24]
 8013b04:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b06:	2300      	movs	r3, #0
 8013b08:	617b      	str	r3, [r7, #20]
 8013b0a:	4a32      	ldr	r2, [pc, #200]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b0c:	4b31      	ldr	r3, [pc, #196]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b10:	f043 0301 	orr.w	r3, r3, #1
 8013b14:	6313      	str	r3, [r2, #48]	; 0x30
 8013b16:	4b2f      	ldr	r3, [pc, #188]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b1a:	f003 0301 	and.w	r3, r3, #1
 8013b1e:	617b      	str	r3, [r7, #20]
 8013b20:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8013b22:	230c      	movs	r3, #12
 8013b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b26:	2302      	movs	r3, #2
 8013b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b2e:	2303      	movs	r3, #3
 8013b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8013b32:	2307      	movs	r3, #7
 8013b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b36:	f107 031c 	add.w	r3, r7, #28
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	4826      	ldr	r0, [pc, #152]	; (8013bd8 <HAL_UART_MspInit+0x110>)
 8013b3e:	f7ed fed1 	bl	80018e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8013b42:	2200      	movs	r2, #0
 8013b44:	2105      	movs	r1, #5
 8013b46:	2026      	movs	r0, #38	; 0x26
 8013b48:	f7ec ff33 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8013b4c:	2026      	movs	r0, #38	; 0x26
 8013b4e:	f7ec ff4c 	bl	80009ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8013b52:	e039      	b.n	8013bc8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4a20      	ldr	r2, [pc, #128]	; (8013bdc <HAL_UART_MspInit+0x114>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d134      	bne.n	8013bc8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8013b5e:	2300      	movs	r3, #0
 8013b60:	613b      	str	r3, [r7, #16]
 8013b62:	4a1c      	ldr	r2, [pc, #112]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b64:	4b1b      	ldr	r3, [pc, #108]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8013b6e:	4b19      	ldr	r3, [pc, #100]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013b76:	613b      	str	r3, [r7, #16]
 8013b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	60fb      	str	r3, [r7, #12]
 8013b7e:	4a15      	ldr	r2, [pc, #84]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b80:	4b14      	ldr	r3, [pc, #80]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b84:	f043 0304 	orr.w	r3, r3, #4
 8013b88:	6313      	str	r3, [r2, #48]	; 0x30
 8013b8a:	4b12      	ldr	r3, [pc, #72]	; (8013bd4 <HAL_UART_MspInit+0x10c>)
 8013b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b8e:	f003 0304 	and.w	r3, r3, #4
 8013b92:	60fb      	str	r3, [r7, #12]
 8013b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8013b96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8013b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b9c:	2302      	movs	r3, #2
 8013b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ba4:	2303      	movs	r3, #3
 8013ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8013ba8:	2307      	movs	r3, #7
 8013baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013bac:	f107 031c 	add.w	r3, r7, #28
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	480b      	ldr	r0, [pc, #44]	; (8013be0 <HAL_UART_MspInit+0x118>)
 8013bb4:	f7ed fe96 	bl	80018e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8013bb8:	2200      	movs	r2, #0
 8013bba:	2105      	movs	r1, #5
 8013bbc:	2027      	movs	r0, #39	; 0x27
 8013bbe:	f7ec fef8 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8013bc2:	2027      	movs	r0, #39	; 0x27
 8013bc4:	f7ec ff11 	bl	80009ea <HAL_NVIC_EnableIRQ>
}
 8013bc8:	bf00      	nop
 8013bca:	3730      	adds	r7, #48	; 0x30
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	40004400 	.word	0x40004400
 8013bd4:	40023800 	.word	0x40023800
 8013bd8:	40020000 	.word	0x40020000
 8013bdc:	40004800 	.word	0x40004800
 8013be0:	40020800 	.word	0x40020800

08013be4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4a13      	ldr	r2, [pc, #76]	; (8013c40 <HAL_UART_MspDeInit+0x5c>)
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d10d      	bne.n	8013c12 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8013bf6:	4a13      	ldr	r2, [pc, #76]	; (8013c44 <HAL_UART_MspDeInit+0x60>)
 8013bf8:	4b12      	ldr	r3, [pc, #72]	; (8013c44 <HAL_UART_MspDeInit+0x60>)
 8013bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013c00:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8013c02:	210c      	movs	r1, #12
 8013c04:	4810      	ldr	r0, [pc, #64]	; (8013c48 <HAL_UART_MspDeInit+0x64>)
 8013c06:	f7ed ffff 	bl	8001c08 <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8013c0a:	2026      	movs	r0, #38	; 0x26
 8013c0c:	f7ec fefb 	bl	8000a06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
} 
 8013c10:	e012      	b.n	8013c38 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART3)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4a0d      	ldr	r2, [pc, #52]	; (8013c4c <HAL_UART_MspDeInit+0x68>)
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	d10d      	bne.n	8013c38 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 8013c1c:	4a09      	ldr	r2, [pc, #36]	; (8013c44 <HAL_UART_MspDeInit+0x60>)
 8013c1e:	4b09      	ldr	r3, [pc, #36]	; (8013c44 <HAL_UART_MspDeInit+0x60>)
 8013c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013c26:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8013c28:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8013c2c:	4808      	ldr	r0, [pc, #32]	; (8013c50 <HAL_UART_MspDeInit+0x6c>)
 8013c2e:	f7ed ffeb 	bl	8001c08 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8013c32:	2027      	movs	r0, #39	; 0x27
 8013c34:	f7ec fee7 	bl	8000a06 <HAL_NVIC_DisableIRQ>
} 
 8013c38:	bf00      	nop
 8013c3a:	3708      	adds	r7, #8
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	40004400 	.word	0x40004400
 8013c44:	40023800 	.word	0x40023800
 8013c48:	40020000 	.word	0x40020000
 8013c4c:	40004800 	.word	0x40004800
 8013c50:	40020800 	.word	0x40020800

08013c54 <HAL_UART_RxCpltCallback>:

//Callback chamado quando a UART finaliza a recepção do fluxo de bytes
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	4a1d      	ldr	r2, [pc, #116]	; (8013cd8 <HAL_UART_RxCpltCallback+0x84>)
 8013c62:	4293      	cmp	r3, r2
 8013c64:	d117      	bne.n	8013c96 <HAL_UART_RxCpltCallback+0x42>

		signed portBASE_TYPE pxHigherPriorityTaskWokenRX = pdFALSE;
 8013c66:	2300      	movs	r3, #0
 8013c68:	60fb      	str	r3, [r7, #12]

		xQueueSendToBackFromISR(CLIReceptEvent, &huart->Instance->DR, &pxHigherPriorityTaskWokenRX);
 8013c6a:	4b1c      	ldr	r3, [pc, #112]	; (8013cdc <HAL_UART_RxCpltCallback+0x88>)
 8013c6c:	6818      	ldr	r0, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	1d19      	adds	r1, r3, #4
 8013c74:	f107 020c 	add.w	r2, r7, #12
 8013c78:	2300      	movs	r3, #0
 8013c7a:	f7f9 fd7b 	bl	800d774 <xQueueGenericSendFromISR>
		if (pxHigherPriorityTaskWokenRX == pdTRUE){
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d124      	bne.n	8013cce <HAL_UART_RxCpltCallback+0x7a>
			portYIELD();
 8013c84:	4b16      	ldr	r3, [pc, #88]	; (8013ce0 <HAL_UART_RxCpltCallback+0x8c>)
 8013c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c8a:	601a      	str	r2, [r3, #0]
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	f3bf 8f6f 	isb	sy
		if (pxHigherPriorityTaskWokenRX == pdTRUE){
			portYIELD();
		}
	}

}
 8013c94:	e01b      	b.n	8013cce <HAL_UART_RxCpltCallback+0x7a>
	} else if(huart->Instance == USART3){
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	4a12      	ldr	r2, [pc, #72]	; (8013ce4 <HAL_UART_RxCpltCallback+0x90>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d116      	bne.n	8013cce <HAL_UART_RxCpltCallback+0x7a>
		signed portBASE_TYPE pxHigherPriorityTaskWokenRX = pdFALSE;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	60bb      	str	r3, [r7, #8]
		xQueueSendToBackFromISR(MonitorReceptEvent, &huart->Instance->DR, &pxHigherPriorityTaskWokenRX);
 8013ca4:	4b10      	ldr	r3, [pc, #64]	; (8013ce8 <HAL_UART_RxCpltCallback+0x94>)
 8013ca6:	6818      	ldr	r0, [r3, #0]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	1d19      	adds	r1, r3, #4
 8013cae:	f107 0208 	add.w	r2, r7, #8
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	f7f9 fd5e 	bl	800d774 <xQueueGenericSendFromISR>
		if (pxHigherPriorityTaskWokenRX == pdTRUE){
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d107      	bne.n	8013cce <HAL_UART_RxCpltCallback+0x7a>
			portYIELD();
 8013cbe:	4b08      	ldr	r3, [pc, #32]	; (8013ce0 <HAL_UART_RxCpltCallback+0x8c>)
 8013cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cc4:	601a      	str	r2, [r3, #0]
 8013cc6:	f3bf 8f4f 	dsb	sy
 8013cca:	f3bf 8f6f 	isb	sy
}
 8013cce:	bf00      	nop
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	40004400 	.word	0x40004400
 8013cdc:	2000403c 	.word	0x2000403c
 8013ce0:	e000ed04 	.word	0xe000ed04
 8013ce4:	40004800 	.word	0x40004800
 8013ce8:	20004040 	.word	0x20004040

08013cec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
	BaseType_t pxHigherPriorityTaskWokenTX = pdFALSE;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	60fb      	str	r3, [r7, #12]
	if(huart->Instance == USART2){
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	4a19      	ldr	r2, [pc, #100]	; (8013d64 <HAL_UART_TxCpltCallback+0x78>)
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d113      	bne.n	8013d2a <HAL_UART_TxCpltCallback+0x3e>
		xSemaphoreGiveFromISR(semtxUSART2, &pxHigherPriorityTaskWokenTX);
 8013d02:	4b19      	ldr	r3, [pc, #100]	; (8013d68 <HAL_UART_TxCpltCallback+0x7c>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	f107 020c 	add.w	r2, r7, #12
 8013d0a:	4611      	mov	r1, r2
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7f9 fdc5 	bl	800d89c <xQueueGiveFromISR>
		if (pxHigherPriorityTaskWokenTX == pdTRUE){
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d120      	bne.n	8013d5a <HAL_UART_TxCpltCallback+0x6e>
			portYIELD();
 8013d18:	4b14      	ldr	r3, [pc, #80]	; (8013d6c <HAL_UART_TxCpltCallback+0x80>)
 8013d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d1e:	601a      	str	r2, [r3, #0]
 8013d20:	f3bf 8f4f 	dsb	sy
 8013d24:	f3bf 8f6f 	isb	sy
		xSemaphoreGiveFromISR(semtxUSART3, &pxHigherPriorityTaskWokenTX);
		if (pxHigherPriorityTaskWokenTX == pdTRUE){
			portYIELD();
		}
	}
}
 8013d28:	e017      	b.n	8013d5a <HAL_UART_TxCpltCallback+0x6e>
	else if(huart->Instance == USART3){
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	4a10      	ldr	r2, [pc, #64]	; (8013d70 <HAL_UART_TxCpltCallback+0x84>)
 8013d30:	4293      	cmp	r3, r2
 8013d32:	d112      	bne.n	8013d5a <HAL_UART_TxCpltCallback+0x6e>
		xSemaphoreGiveFromISR(semtxUSART3, &pxHigherPriorityTaskWokenTX);
 8013d34:	4b0f      	ldr	r3, [pc, #60]	; (8013d74 <HAL_UART_TxCpltCallback+0x88>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f107 020c 	add.w	r2, r7, #12
 8013d3c:	4611      	mov	r1, r2
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7f9 fdac 	bl	800d89c <xQueueGiveFromISR>
		if (pxHigherPriorityTaskWokenTX == pdTRUE){
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	d107      	bne.n	8013d5a <HAL_UART_TxCpltCallback+0x6e>
			portYIELD();
 8013d4a:	4b08      	ldr	r3, [pc, #32]	; (8013d6c <HAL_UART_TxCpltCallback+0x80>)
 8013d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d50:	601a      	str	r2, [r3, #0]
 8013d52:	f3bf 8f4f 	dsb	sy
 8013d56:	f3bf 8f6f 	isb	sy
}
 8013d5a:	bf00      	nop
 8013d5c:	3710      	adds	r7, #16
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	40004400 	.word	0x40004400
 8013d68:	20004038 	.word	0x20004038
 8013d6c:	e000ed04 	.word	0xe000ed04
 8013d70:	40004800 	.word	0x40004800
 8013d74:	20004034 	.word	0x20004034

08013d78 <strlen>:
 8013d78:	4603      	mov	r3, r0
 8013d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d7e:	2a00      	cmp	r2, #0
 8013d80:	d1fb      	bne.n	8013d7a <strlen+0x2>
 8013d82:	1a18      	subs	r0, r3, r0
 8013d84:	3801      	subs	r0, #1
 8013d86:	4770      	bx	lr

08013d88 <__aeabi_drsub>:
 8013d88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8013d8c:	e002      	b.n	8013d94 <__adddf3>
 8013d8e:	bf00      	nop

08013d90 <__aeabi_dsub>:
 8013d90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08013d94 <__adddf3>:
 8013d94:	b530      	push	{r4, r5, lr}
 8013d96:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8013d9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8013d9e:	ea94 0f05 	teq	r4, r5
 8013da2:	bf08      	it	eq
 8013da4:	ea90 0f02 	teqeq	r0, r2
 8013da8:	bf1f      	itttt	ne
 8013daa:	ea54 0c00 	orrsne.w	ip, r4, r0
 8013dae:	ea55 0c02 	orrsne.w	ip, r5, r2
 8013db2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8013db6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8013dba:	f000 80e2 	beq.w	8013f82 <__adddf3+0x1ee>
 8013dbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8013dc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8013dc6:	bfb8      	it	lt
 8013dc8:	426d      	neglt	r5, r5
 8013dca:	dd0c      	ble.n	8013de6 <__adddf3+0x52>
 8013dcc:	442c      	add	r4, r5
 8013dce:	ea80 0202 	eor.w	r2, r0, r2
 8013dd2:	ea81 0303 	eor.w	r3, r1, r3
 8013dd6:	ea82 0000 	eor.w	r0, r2, r0
 8013dda:	ea83 0101 	eor.w	r1, r3, r1
 8013dde:	ea80 0202 	eor.w	r2, r0, r2
 8013de2:	ea81 0303 	eor.w	r3, r1, r3
 8013de6:	2d36      	cmp	r5, #54	; 0x36
 8013de8:	bf88      	it	hi
 8013dea:	bd30      	pophi	{r4, r5, pc}
 8013dec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8013df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8013df4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8013df8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8013dfc:	d002      	beq.n	8013e04 <__adddf3+0x70>
 8013dfe:	4240      	negs	r0, r0
 8013e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8013e04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8013e08:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8013e0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8013e10:	d002      	beq.n	8013e18 <__adddf3+0x84>
 8013e12:	4252      	negs	r2, r2
 8013e14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8013e18:	ea94 0f05 	teq	r4, r5
 8013e1c:	f000 80a7 	beq.w	8013f6e <__adddf3+0x1da>
 8013e20:	f1a4 0401 	sub.w	r4, r4, #1
 8013e24:	f1d5 0e20 	rsbs	lr, r5, #32
 8013e28:	db0d      	blt.n	8013e46 <__adddf3+0xb2>
 8013e2a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8013e2e:	fa22 f205 	lsr.w	r2, r2, r5
 8013e32:	1880      	adds	r0, r0, r2
 8013e34:	f141 0100 	adc.w	r1, r1, #0
 8013e38:	fa03 f20e 	lsl.w	r2, r3, lr
 8013e3c:	1880      	adds	r0, r0, r2
 8013e3e:	fa43 f305 	asr.w	r3, r3, r5
 8013e42:	4159      	adcs	r1, r3
 8013e44:	e00e      	b.n	8013e64 <__adddf3+0xd0>
 8013e46:	f1a5 0520 	sub.w	r5, r5, #32
 8013e4a:	f10e 0e20 	add.w	lr, lr, #32
 8013e4e:	2a01      	cmp	r2, #1
 8013e50:	fa03 fc0e 	lsl.w	ip, r3, lr
 8013e54:	bf28      	it	cs
 8013e56:	f04c 0c02 	orrcs.w	ip, ip, #2
 8013e5a:	fa43 f305 	asr.w	r3, r3, r5
 8013e5e:	18c0      	adds	r0, r0, r3
 8013e60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8013e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8013e68:	d507      	bpl.n	8013e7a <__adddf3+0xe6>
 8013e6a:	f04f 0e00 	mov.w	lr, #0
 8013e6e:	f1dc 0c00 	rsbs	ip, ip, #0
 8013e72:	eb7e 0000 	sbcs.w	r0, lr, r0
 8013e76:	eb6e 0101 	sbc.w	r1, lr, r1
 8013e7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8013e7e:	d31b      	bcc.n	8013eb8 <__adddf3+0x124>
 8013e80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8013e84:	d30c      	bcc.n	8013ea0 <__adddf3+0x10c>
 8013e86:	0849      	lsrs	r1, r1, #1
 8013e88:	ea5f 0030 	movs.w	r0, r0, rrx
 8013e8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8013e90:	f104 0401 	add.w	r4, r4, #1
 8013e94:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8013e98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8013e9c:	f080 809a 	bcs.w	8013fd4 <__adddf3+0x240>
 8013ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8013ea4:	bf08      	it	eq
 8013ea6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8013eaa:	f150 0000 	adcs.w	r0, r0, #0
 8013eae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8013eb2:	ea41 0105 	orr.w	r1, r1, r5
 8013eb6:	bd30      	pop	{r4, r5, pc}
 8013eb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8013ebc:	4140      	adcs	r0, r0
 8013ebe:	eb41 0101 	adc.w	r1, r1, r1
 8013ec2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8013ec6:	f1a4 0401 	sub.w	r4, r4, #1
 8013eca:	d1e9      	bne.n	8013ea0 <__adddf3+0x10c>
 8013ecc:	f091 0f00 	teq	r1, #0
 8013ed0:	bf04      	itt	eq
 8013ed2:	4601      	moveq	r1, r0
 8013ed4:	2000      	moveq	r0, #0
 8013ed6:	fab1 f381 	clz	r3, r1
 8013eda:	bf08      	it	eq
 8013edc:	3320      	addeq	r3, #32
 8013ede:	f1a3 030b 	sub.w	r3, r3, #11
 8013ee2:	f1b3 0220 	subs.w	r2, r3, #32
 8013ee6:	da0c      	bge.n	8013f02 <__adddf3+0x16e>
 8013ee8:	320c      	adds	r2, #12
 8013eea:	dd08      	ble.n	8013efe <__adddf3+0x16a>
 8013eec:	f102 0c14 	add.w	ip, r2, #20
 8013ef0:	f1c2 020c 	rsb	r2, r2, #12
 8013ef4:	fa01 f00c 	lsl.w	r0, r1, ip
 8013ef8:	fa21 f102 	lsr.w	r1, r1, r2
 8013efc:	e00c      	b.n	8013f18 <__adddf3+0x184>
 8013efe:	f102 0214 	add.w	r2, r2, #20
 8013f02:	bfd8      	it	le
 8013f04:	f1c2 0c20 	rsble	ip, r2, #32
 8013f08:	fa01 f102 	lsl.w	r1, r1, r2
 8013f0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8013f10:	bfdc      	itt	le
 8013f12:	ea41 010c 	orrle.w	r1, r1, ip
 8013f16:	4090      	lslle	r0, r2
 8013f18:	1ae4      	subs	r4, r4, r3
 8013f1a:	bfa2      	ittt	ge
 8013f1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8013f20:	4329      	orrge	r1, r5
 8013f22:	bd30      	popge	{r4, r5, pc}
 8013f24:	ea6f 0404 	mvn.w	r4, r4
 8013f28:	3c1f      	subs	r4, #31
 8013f2a:	da1c      	bge.n	8013f66 <__adddf3+0x1d2>
 8013f2c:	340c      	adds	r4, #12
 8013f2e:	dc0e      	bgt.n	8013f4e <__adddf3+0x1ba>
 8013f30:	f104 0414 	add.w	r4, r4, #20
 8013f34:	f1c4 0220 	rsb	r2, r4, #32
 8013f38:	fa20 f004 	lsr.w	r0, r0, r4
 8013f3c:	fa01 f302 	lsl.w	r3, r1, r2
 8013f40:	ea40 0003 	orr.w	r0, r0, r3
 8013f44:	fa21 f304 	lsr.w	r3, r1, r4
 8013f48:	ea45 0103 	orr.w	r1, r5, r3
 8013f4c:	bd30      	pop	{r4, r5, pc}
 8013f4e:	f1c4 040c 	rsb	r4, r4, #12
 8013f52:	f1c4 0220 	rsb	r2, r4, #32
 8013f56:	fa20 f002 	lsr.w	r0, r0, r2
 8013f5a:	fa01 f304 	lsl.w	r3, r1, r4
 8013f5e:	ea40 0003 	orr.w	r0, r0, r3
 8013f62:	4629      	mov	r1, r5
 8013f64:	bd30      	pop	{r4, r5, pc}
 8013f66:	fa21 f004 	lsr.w	r0, r1, r4
 8013f6a:	4629      	mov	r1, r5
 8013f6c:	bd30      	pop	{r4, r5, pc}
 8013f6e:	f094 0f00 	teq	r4, #0
 8013f72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8013f76:	bf06      	itte	eq
 8013f78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8013f7c:	3401      	addeq	r4, #1
 8013f7e:	3d01      	subne	r5, #1
 8013f80:	e74e      	b.n	8013e20 <__adddf3+0x8c>
 8013f82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8013f86:	bf18      	it	ne
 8013f88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8013f8c:	d029      	beq.n	8013fe2 <__adddf3+0x24e>
 8013f8e:	ea94 0f05 	teq	r4, r5
 8013f92:	bf08      	it	eq
 8013f94:	ea90 0f02 	teqeq	r0, r2
 8013f98:	d005      	beq.n	8013fa6 <__adddf3+0x212>
 8013f9a:	ea54 0c00 	orrs.w	ip, r4, r0
 8013f9e:	bf04      	itt	eq
 8013fa0:	4619      	moveq	r1, r3
 8013fa2:	4610      	moveq	r0, r2
 8013fa4:	bd30      	pop	{r4, r5, pc}
 8013fa6:	ea91 0f03 	teq	r1, r3
 8013faa:	bf1e      	ittt	ne
 8013fac:	2100      	movne	r1, #0
 8013fae:	2000      	movne	r0, #0
 8013fb0:	bd30      	popne	{r4, r5, pc}
 8013fb2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8013fb6:	d105      	bne.n	8013fc4 <__adddf3+0x230>
 8013fb8:	0040      	lsls	r0, r0, #1
 8013fba:	4149      	adcs	r1, r1
 8013fbc:	bf28      	it	cs
 8013fbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8013fc2:	bd30      	pop	{r4, r5, pc}
 8013fc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8013fc8:	bf3c      	itt	cc
 8013fca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8013fce:	bd30      	popcc	{r4, r5, pc}
 8013fd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8013fd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8013fd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013fdc:	f04f 0000 	mov.w	r0, #0
 8013fe0:	bd30      	pop	{r4, r5, pc}
 8013fe2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8013fe6:	bf1a      	itte	ne
 8013fe8:	4619      	movne	r1, r3
 8013fea:	4610      	movne	r0, r2
 8013fec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8013ff0:	bf1c      	itt	ne
 8013ff2:	460b      	movne	r3, r1
 8013ff4:	4602      	movne	r2, r0
 8013ff6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8013ffa:	bf06      	itte	eq
 8013ffc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8014000:	ea91 0f03 	teqeq	r1, r3
 8014004:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8014008:	bd30      	pop	{r4, r5, pc}
 801400a:	bf00      	nop

0801400c <__aeabi_ui2d>:
 801400c:	f090 0f00 	teq	r0, #0
 8014010:	bf04      	itt	eq
 8014012:	2100      	moveq	r1, #0
 8014014:	4770      	bxeq	lr
 8014016:	b530      	push	{r4, r5, lr}
 8014018:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801401c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8014020:	f04f 0500 	mov.w	r5, #0
 8014024:	f04f 0100 	mov.w	r1, #0
 8014028:	e750      	b.n	8013ecc <__adddf3+0x138>
 801402a:	bf00      	nop

0801402c <__aeabi_i2d>:
 801402c:	f090 0f00 	teq	r0, #0
 8014030:	bf04      	itt	eq
 8014032:	2100      	moveq	r1, #0
 8014034:	4770      	bxeq	lr
 8014036:	b530      	push	{r4, r5, lr}
 8014038:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801403c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8014040:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8014044:	bf48      	it	mi
 8014046:	4240      	negmi	r0, r0
 8014048:	f04f 0100 	mov.w	r1, #0
 801404c:	e73e      	b.n	8013ecc <__adddf3+0x138>
 801404e:	bf00      	nop

08014050 <__aeabi_f2d>:
 8014050:	0042      	lsls	r2, r0, #1
 8014052:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8014056:	ea4f 0131 	mov.w	r1, r1, rrx
 801405a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801405e:	bf1f      	itttt	ne
 8014060:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8014064:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8014068:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 801406c:	4770      	bxne	lr
 801406e:	f092 0f00 	teq	r2, #0
 8014072:	bf14      	ite	ne
 8014074:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8014078:	4770      	bxeq	lr
 801407a:	b530      	push	{r4, r5, lr}
 801407c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8014080:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8014084:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014088:	e720      	b.n	8013ecc <__adddf3+0x138>
 801408a:	bf00      	nop

0801408c <__aeabi_ul2d>:
 801408c:	ea50 0201 	orrs.w	r2, r0, r1
 8014090:	bf08      	it	eq
 8014092:	4770      	bxeq	lr
 8014094:	b530      	push	{r4, r5, lr}
 8014096:	f04f 0500 	mov.w	r5, #0
 801409a:	e00a      	b.n	80140b2 <__aeabi_l2d+0x16>

0801409c <__aeabi_l2d>:
 801409c:	ea50 0201 	orrs.w	r2, r0, r1
 80140a0:	bf08      	it	eq
 80140a2:	4770      	bxeq	lr
 80140a4:	b530      	push	{r4, r5, lr}
 80140a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80140aa:	d502      	bpl.n	80140b2 <__aeabi_l2d+0x16>
 80140ac:	4240      	negs	r0, r0
 80140ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80140b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80140b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80140ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80140be:	f43f aedc 	beq.w	8013e7a <__adddf3+0xe6>
 80140c2:	f04f 0203 	mov.w	r2, #3
 80140c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80140ca:	bf18      	it	ne
 80140cc:	3203      	addne	r2, #3
 80140ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80140d2:	bf18      	it	ne
 80140d4:	3203      	addne	r2, #3
 80140d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80140da:	f1c2 0320 	rsb	r3, r2, #32
 80140de:	fa00 fc03 	lsl.w	ip, r0, r3
 80140e2:	fa20 f002 	lsr.w	r0, r0, r2
 80140e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80140ea:	ea40 000e 	orr.w	r0, r0, lr
 80140ee:	fa21 f102 	lsr.w	r1, r1, r2
 80140f2:	4414      	add	r4, r2
 80140f4:	e6c1      	b.n	8013e7a <__adddf3+0xe6>
 80140f6:	bf00      	nop

080140f8 <__aeabi_dmul>:
 80140f8:	b570      	push	{r4, r5, r6, lr}
 80140fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80140fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8014102:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8014106:	bf1d      	ittte	ne
 8014108:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801410c:	ea94 0f0c 	teqne	r4, ip
 8014110:	ea95 0f0c 	teqne	r5, ip
 8014114:	f000 f8de 	bleq	80142d4 <__aeabi_dmul+0x1dc>
 8014118:	442c      	add	r4, r5
 801411a:	ea81 0603 	eor.w	r6, r1, r3
 801411e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8014122:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8014126:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801412a:	bf18      	it	ne
 801412c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8014130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8014134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014138:	d038      	beq.n	80141ac <__aeabi_dmul+0xb4>
 801413a:	fba0 ce02 	umull	ip, lr, r0, r2
 801413e:	f04f 0500 	mov.w	r5, #0
 8014142:	fbe1 e502 	umlal	lr, r5, r1, r2
 8014146:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801414a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801414e:	f04f 0600 	mov.w	r6, #0
 8014152:	fbe1 5603 	umlal	r5, r6, r1, r3
 8014156:	f09c 0f00 	teq	ip, #0
 801415a:	bf18      	it	ne
 801415c:	f04e 0e01 	orrne.w	lr, lr, #1
 8014160:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8014164:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8014168:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801416c:	d204      	bcs.n	8014178 <__aeabi_dmul+0x80>
 801416e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8014172:	416d      	adcs	r5, r5
 8014174:	eb46 0606 	adc.w	r6, r6, r6
 8014178:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801417c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8014180:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8014184:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8014188:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801418c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8014190:	bf88      	it	hi
 8014192:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8014196:	d81e      	bhi.n	80141d6 <__aeabi_dmul+0xde>
 8014198:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801419c:	bf08      	it	eq
 801419e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80141a2:	f150 0000 	adcs.w	r0, r0, #0
 80141a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80141aa:	bd70      	pop	{r4, r5, r6, pc}
 80141ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80141b0:	ea46 0101 	orr.w	r1, r6, r1
 80141b4:	ea40 0002 	orr.w	r0, r0, r2
 80141b8:	ea81 0103 	eor.w	r1, r1, r3
 80141bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80141c0:	bfc2      	ittt	gt
 80141c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80141c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80141ca:	bd70      	popgt	{r4, r5, r6, pc}
 80141cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80141d0:	f04f 0e00 	mov.w	lr, #0
 80141d4:	3c01      	subs	r4, #1
 80141d6:	f300 80ab 	bgt.w	8014330 <__aeabi_dmul+0x238>
 80141da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80141de:	bfde      	ittt	le
 80141e0:	2000      	movle	r0, #0
 80141e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80141e6:	bd70      	pople	{r4, r5, r6, pc}
 80141e8:	f1c4 0400 	rsb	r4, r4, #0
 80141ec:	3c20      	subs	r4, #32
 80141ee:	da35      	bge.n	801425c <__aeabi_dmul+0x164>
 80141f0:	340c      	adds	r4, #12
 80141f2:	dc1b      	bgt.n	801422c <__aeabi_dmul+0x134>
 80141f4:	f104 0414 	add.w	r4, r4, #20
 80141f8:	f1c4 0520 	rsb	r5, r4, #32
 80141fc:	fa00 f305 	lsl.w	r3, r0, r5
 8014200:	fa20 f004 	lsr.w	r0, r0, r4
 8014204:	fa01 f205 	lsl.w	r2, r1, r5
 8014208:	ea40 0002 	orr.w	r0, r0, r2
 801420c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8014210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014214:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8014218:	fa21 f604 	lsr.w	r6, r1, r4
 801421c:	eb42 0106 	adc.w	r1, r2, r6
 8014220:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8014224:	bf08      	it	eq
 8014226:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801422a:	bd70      	pop	{r4, r5, r6, pc}
 801422c:	f1c4 040c 	rsb	r4, r4, #12
 8014230:	f1c4 0520 	rsb	r5, r4, #32
 8014234:	fa00 f304 	lsl.w	r3, r0, r4
 8014238:	fa20 f005 	lsr.w	r0, r0, r5
 801423c:	fa01 f204 	lsl.w	r2, r1, r4
 8014240:	ea40 0002 	orr.w	r0, r0, r2
 8014244:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8014248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801424c:	f141 0100 	adc.w	r1, r1, #0
 8014250:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8014254:	bf08      	it	eq
 8014256:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801425a:	bd70      	pop	{r4, r5, r6, pc}
 801425c:	f1c4 0520 	rsb	r5, r4, #32
 8014260:	fa00 f205 	lsl.w	r2, r0, r5
 8014264:	ea4e 0e02 	orr.w	lr, lr, r2
 8014268:	fa20 f304 	lsr.w	r3, r0, r4
 801426c:	fa01 f205 	lsl.w	r2, r1, r5
 8014270:	ea43 0302 	orr.w	r3, r3, r2
 8014274:	fa21 f004 	lsr.w	r0, r1, r4
 8014278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801427c:	fa21 f204 	lsr.w	r2, r1, r4
 8014280:	ea20 0002 	bic.w	r0, r0, r2
 8014284:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8014288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801428c:	bf08      	it	eq
 801428e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8014292:	bd70      	pop	{r4, r5, r6, pc}
 8014294:	f094 0f00 	teq	r4, #0
 8014298:	d10f      	bne.n	80142ba <__aeabi_dmul+0x1c2>
 801429a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801429e:	0040      	lsls	r0, r0, #1
 80142a0:	eb41 0101 	adc.w	r1, r1, r1
 80142a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80142a8:	bf08      	it	eq
 80142aa:	3c01      	subeq	r4, #1
 80142ac:	d0f7      	beq.n	801429e <__aeabi_dmul+0x1a6>
 80142ae:	ea41 0106 	orr.w	r1, r1, r6
 80142b2:	f095 0f00 	teq	r5, #0
 80142b6:	bf18      	it	ne
 80142b8:	4770      	bxne	lr
 80142ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80142be:	0052      	lsls	r2, r2, #1
 80142c0:	eb43 0303 	adc.w	r3, r3, r3
 80142c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80142c8:	bf08      	it	eq
 80142ca:	3d01      	subeq	r5, #1
 80142cc:	d0f7      	beq.n	80142be <__aeabi_dmul+0x1c6>
 80142ce:	ea43 0306 	orr.w	r3, r3, r6
 80142d2:	4770      	bx	lr
 80142d4:	ea94 0f0c 	teq	r4, ip
 80142d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80142dc:	bf18      	it	ne
 80142de:	ea95 0f0c 	teqne	r5, ip
 80142e2:	d00c      	beq.n	80142fe <__aeabi_dmul+0x206>
 80142e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80142e8:	bf18      	it	ne
 80142ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80142ee:	d1d1      	bne.n	8014294 <__aeabi_dmul+0x19c>
 80142f0:	ea81 0103 	eor.w	r1, r1, r3
 80142f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80142f8:	f04f 0000 	mov.w	r0, #0
 80142fc:	bd70      	pop	{r4, r5, r6, pc}
 80142fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8014302:	bf06      	itte	eq
 8014304:	4610      	moveq	r0, r2
 8014306:	4619      	moveq	r1, r3
 8014308:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801430c:	d019      	beq.n	8014342 <__aeabi_dmul+0x24a>
 801430e:	ea94 0f0c 	teq	r4, ip
 8014312:	d102      	bne.n	801431a <__aeabi_dmul+0x222>
 8014314:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8014318:	d113      	bne.n	8014342 <__aeabi_dmul+0x24a>
 801431a:	ea95 0f0c 	teq	r5, ip
 801431e:	d105      	bne.n	801432c <__aeabi_dmul+0x234>
 8014320:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8014324:	bf1c      	itt	ne
 8014326:	4610      	movne	r0, r2
 8014328:	4619      	movne	r1, r3
 801432a:	d10a      	bne.n	8014342 <__aeabi_dmul+0x24a>
 801432c:	ea81 0103 	eor.w	r1, r1, r3
 8014330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8014334:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8014338:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801433c:	f04f 0000 	mov.w	r0, #0
 8014340:	bd70      	pop	{r4, r5, r6, pc}
 8014342:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8014346:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801434a:	bd70      	pop	{r4, r5, r6, pc}

0801434c <__aeabi_ddiv>:
 801434c:	b570      	push	{r4, r5, r6, lr}
 801434e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8014352:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8014356:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801435a:	bf1d      	ittte	ne
 801435c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8014360:	ea94 0f0c 	teqne	r4, ip
 8014364:	ea95 0f0c 	teqne	r5, ip
 8014368:	f000 f8a7 	bleq	80144ba <__aeabi_ddiv+0x16e>
 801436c:	eba4 0405 	sub.w	r4, r4, r5
 8014370:	ea81 0e03 	eor.w	lr, r1, r3
 8014374:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8014378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801437c:	f000 8088 	beq.w	8014490 <__aeabi_ddiv+0x144>
 8014380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8014384:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8014388:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801438c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8014390:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8014394:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8014398:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801439c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80143a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80143a4:	429d      	cmp	r5, r3
 80143a6:	bf08      	it	eq
 80143a8:	4296      	cmpeq	r6, r2
 80143aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80143ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80143b2:	d202      	bcs.n	80143ba <__aeabi_ddiv+0x6e>
 80143b4:	085b      	lsrs	r3, r3, #1
 80143b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80143ba:	1ab6      	subs	r6, r6, r2
 80143bc:	eb65 0503 	sbc.w	r5, r5, r3
 80143c0:	085b      	lsrs	r3, r3, #1
 80143c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80143c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80143ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80143ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80143d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80143d6:	bf22      	ittt	cs
 80143d8:	1ab6      	subcs	r6, r6, r2
 80143da:	4675      	movcs	r5, lr
 80143dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80143e0:	085b      	lsrs	r3, r3, #1
 80143e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80143e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80143ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80143ee:	bf22      	ittt	cs
 80143f0:	1ab6      	subcs	r6, r6, r2
 80143f2:	4675      	movcs	r5, lr
 80143f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80143f8:	085b      	lsrs	r3, r3, #1
 80143fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80143fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8014402:	eb75 0e03 	sbcs.w	lr, r5, r3
 8014406:	bf22      	ittt	cs
 8014408:	1ab6      	subcs	r6, r6, r2
 801440a:	4675      	movcs	r5, lr
 801440c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8014410:	085b      	lsrs	r3, r3, #1
 8014412:	ea4f 0232 	mov.w	r2, r2, rrx
 8014416:	ebb6 0e02 	subs.w	lr, r6, r2
 801441a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801441e:	bf22      	ittt	cs
 8014420:	1ab6      	subcs	r6, r6, r2
 8014422:	4675      	movcs	r5, lr
 8014424:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8014428:	ea55 0e06 	orrs.w	lr, r5, r6
 801442c:	d018      	beq.n	8014460 <__aeabi_ddiv+0x114>
 801442e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8014432:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8014436:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801443a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801443e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8014442:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014446:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801444a:	d1c0      	bne.n	80143ce <__aeabi_ddiv+0x82>
 801444c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8014450:	d10b      	bne.n	801446a <__aeabi_ddiv+0x11e>
 8014452:	ea41 0100 	orr.w	r1, r1, r0
 8014456:	f04f 0000 	mov.w	r0, #0
 801445a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801445e:	e7b6      	b.n	80143ce <__aeabi_ddiv+0x82>
 8014460:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8014464:	bf04      	itt	eq
 8014466:	4301      	orreq	r1, r0
 8014468:	2000      	moveq	r0, #0
 801446a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801446e:	bf88      	it	hi
 8014470:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8014474:	f63f aeaf 	bhi.w	80141d6 <__aeabi_dmul+0xde>
 8014478:	ebb5 0c03 	subs.w	ip, r5, r3
 801447c:	bf04      	itt	eq
 801447e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8014482:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8014486:	f150 0000 	adcs.w	r0, r0, #0
 801448a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801448e:	bd70      	pop	{r4, r5, r6, pc}
 8014490:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8014494:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8014498:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801449c:	bfc2      	ittt	gt
 801449e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80144a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80144a6:	bd70      	popgt	{r4, r5, r6, pc}
 80144a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80144ac:	f04f 0e00 	mov.w	lr, #0
 80144b0:	3c01      	subs	r4, #1
 80144b2:	e690      	b.n	80141d6 <__aeabi_dmul+0xde>
 80144b4:	ea45 0e06 	orr.w	lr, r5, r6
 80144b8:	e68d      	b.n	80141d6 <__aeabi_dmul+0xde>
 80144ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80144be:	ea94 0f0c 	teq	r4, ip
 80144c2:	bf08      	it	eq
 80144c4:	ea95 0f0c 	teqeq	r5, ip
 80144c8:	f43f af3b 	beq.w	8014342 <__aeabi_dmul+0x24a>
 80144cc:	ea94 0f0c 	teq	r4, ip
 80144d0:	d10a      	bne.n	80144e8 <__aeabi_ddiv+0x19c>
 80144d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80144d6:	f47f af34 	bne.w	8014342 <__aeabi_dmul+0x24a>
 80144da:	ea95 0f0c 	teq	r5, ip
 80144de:	f47f af25 	bne.w	801432c <__aeabi_dmul+0x234>
 80144e2:	4610      	mov	r0, r2
 80144e4:	4619      	mov	r1, r3
 80144e6:	e72c      	b.n	8014342 <__aeabi_dmul+0x24a>
 80144e8:	ea95 0f0c 	teq	r5, ip
 80144ec:	d106      	bne.n	80144fc <__aeabi_ddiv+0x1b0>
 80144ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80144f2:	f43f aefd 	beq.w	80142f0 <__aeabi_dmul+0x1f8>
 80144f6:	4610      	mov	r0, r2
 80144f8:	4619      	mov	r1, r3
 80144fa:	e722      	b.n	8014342 <__aeabi_dmul+0x24a>
 80144fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8014500:	bf18      	it	ne
 8014502:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8014506:	f47f aec5 	bne.w	8014294 <__aeabi_dmul+0x19c>
 801450a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801450e:	f47f af0d 	bne.w	801432c <__aeabi_dmul+0x234>
 8014512:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8014516:	f47f aeeb 	bne.w	80142f0 <__aeabi_dmul+0x1f8>
 801451a:	e712      	b.n	8014342 <__aeabi_dmul+0x24a>

0801451c <__aeabi_d2f>:
 801451c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8014520:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8014524:	bf24      	itt	cs
 8014526:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801452a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801452e:	d90d      	bls.n	801454c <__aeabi_d2f+0x30>
 8014530:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8014534:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8014538:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801453c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8014540:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8014544:	bf08      	it	eq
 8014546:	f020 0001 	biceq.w	r0, r0, #1
 801454a:	4770      	bx	lr
 801454c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8014550:	d121      	bne.n	8014596 <__aeabi_d2f+0x7a>
 8014552:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8014556:	bfbc      	itt	lt
 8014558:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 801455c:	4770      	bxlt	lr
 801455e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8014562:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8014566:	f1c2 0218 	rsb	r2, r2, #24
 801456a:	f1c2 0c20 	rsb	ip, r2, #32
 801456e:	fa10 f30c 	lsls.w	r3, r0, ip
 8014572:	fa20 f002 	lsr.w	r0, r0, r2
 8014576:	bf18      	it	ne
 8014578:	f040 0001 	orrne.w	r0, r0, #1
 801457c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8014580:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8014584:	fa03 fc0c 	lsl.w	ip, r3, ip
 8014588:	ea40 000c 	orr.w	r0, r0, ip
 801458c:	fa23 f302 	lsr.w	r3, r3, r2
 8014590:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014594:	e7cc      	b.n	8014530 <__aeabi_d2f+0x14>
 8014596:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801459a:	d107      	bne.n	80145ac <__aeabi_d2f+0x90>
 801459c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80145a0:	bf1e      	ittt	ne
 80145a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80145a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80145aa:	4770      	bxne	lr
 80145ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80145b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80145b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80145b8:	4770      	bx	lr
 80145ba:	bf00      	nop

080145bc <__aeabi_uldivmod>:
 80145bc:	b953      	cbnz	r3, 80145d4 <__aeabi_uldivmod+0x18>
 80145be:	b94a      	cbnz	r2, 80145d4 <__aeabi_uldivmod+0x18>
 80145c0:	2900      	cmp	r1, #0
 80145c2:	bf08      	it	eq
 80145c4:	2800      	cmpeq	r0, #0
 80145c6:	bf1c      	itt	ne
 80145c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80145cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80145d0:	f000 b97a 	b.w	80148c8 <__aeabi_idiv0>
 80145d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80145d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80145dc:	f000 f806 	bl	80145ec <__udivmoddi4>
 80145e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80145e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80145e8:	b004      	add	sp, #16
 80145ea:	4770      	bx	lr

080145ec <__udivmoddi4>:
 80145ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145f0:	468c      	mov	ip, r1
 80145f2:	460d      	mov	r5, r1
 80145f4:	4604      	mov	r4, r0
 80145f6:	9e08      	ldr	r6, [sp, #32]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d151      	bne.n	80146a0 <__udivmoddi4+0xb4>
 80145fc:	428a      	cmp	r2, r1
 80145fe:	4617      	mov	r7, r2
 8014600:	d96d      	bls.n	80146de <__udivmoddi4+0xf2>
 8014602:	fab2 fe82 	clz	lr, r2
 8014606:	f1be 0f00 	cmp.w	lr, #0
 801460a:	d00b      	beq.n	8014624 <__udivmoddi4+0x38>
 801460c:	f1ce 0c20 	rsb	ip, lr, #32
 8014610:	fa01 f50e 	lsl.w	r5, r1, lr
 8014614:	fa20 fc0c 	lsr.w	ip, r0, ip
 8014618:	fa02 f70e 	lsl.w	r7, r2, lr
 801461c:	ea4c 0c05 	orr.w	ip, ip, r5
 8014620:	fa00 f40e 	lsl.w	r4, r0, lr
 8014624:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8014628:	0c25      	lsrs	r5, r4, #16
 801462a:	fbbc f8fa 	udiv	r8, ip, sl
 801462e:	fa1f f987 	uxth.w	r9, r7
 8014632:	fb0a cc18 	mls	ip, sl, r8, ip
 8014636:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 801463a:	fb08 f309 	mul.w	r3, r8, r9
 801463e:	42ab      	cmp	r3, r5
 8014640:	d90a      	bls.n	8014658 <__udivmoddi4+0x6c>
 8014642:	19ed      	adds	r5, r5, r7
 8014644:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8014648:	f080 8123 	bcs.w	8014892 <__udivmoddi4+0x2a6>
 801464c:	42ab      	cmp	r3, r5
 801464e:	f240 8120 	bls.w	8014892 <__udivmoddi4+0x2a6>
 8014652:	f1a8 0802 	sub.w	r8, r8, #2
 8014656:	443d      	add	r5, r7
 8014658:	1aed      	subs	r5, r5, r3
 801465a:	b2a4      	uxth	r4, r4
 801465c:	fbb5 f0fa 	udiv	r0, r5, sl
 8014660:	fb0a 5510 	mls	r5, sl, r0, r5
 8014664:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8014668:	fb00 f909 	mul.w	r9, r0, r9
 801466c:	45a1      	cmp	r9, r4
 801466e:	d909      	bls.n	8014684 <__udivmoddi4+0x98>
 8014670:	19e4      	adds	r4, r4, r7
 8014672:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014676:	f080 810a 	bcs.w	801488e <__udivmoddi4+0x2a2>
 801467a:	45a1      	cmp	r9, r4
 801467c:	f240 8107 	bls.w	801488e <__udivmoddi4+0x2a2>
 8014680:	3802      	subs	r0, #2
 8014682:	443c      	add	r4, r7
 8014684:	eba4 0409 	sub.w	r4, r4, r9
 8014688:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801468c:	2100      	movs	r1, #0
 801468e:	2e00      	cmp	r6, #0
 8014690:	d061      	beq.n	8014756 <__udivmoddi4+0x16a>
 8014692:	fa24 f40e 	lsr.w	r4, r4, lr
 8014696:	2300      	movs	r3, #0
 8014698:	6034      	str	r4, [r6, #0]
 801469a:	6073      	str	r3, [r6, #4]
 801469c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146a0:	428b      	cmp	r3, r1
 80146a2:	d907      	bls.n	80146b4 <__udivmoddi4+0xc8>
 80146a4:	2e00      	cmp	r6, #0
 80146a6:	d054      	beq.n	8014752 <__udivmoddi4+0x166>
 80146a8:	2100      	movs	r1, #0
 80146aa:	e886 0021 	stmia.w	r6, {r0, r5}
 80146ae:	4608      	mov	r0, r1
 80146b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b4:	fab3 f183 	clz	r1, r3
 80146b8:	2900      	cmp	r1, #0
 80146ba:	f040 808e 	bne.w	80147da <__udivmoddi4+0x1ee>
 80146be:	42ab      	cmp	r3, r5
 80146c0:	d302      	bcc.n	80146c8 <__udivmoddi4+0xdc>
 80146c2:	4282      	cmp	r2, r0
 80146c4:	f200 80fa 	bhi.w	80148bc <__udivmoddi4+0x2d0>
 80146c8:	1a84      	subs	r4, r0, r2
 80146ca:	eb65 0503 	sbc.w	r5, r5, r3
 80146ce:	2001      	movs	r0, #1
 80146d0:	46ac      	mov	ip, r5
 80146d2:	2e00      	cmp	r6, #0
 80146d4:	d03f      	beq.n	8014756 <__udivmoddi4+0x16a>
 80146d6:	e886 1010 	stmia.w	r6, {r4, ip}
 80146da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146de:	b912      	cbnz	r2, 80146e6 <__udivmoddi4+0xfa>
 80146e0:	2701      	movs	r7, #1
 80146e2:	fbb7 f7f2 	udiv	r7, r7, r2
 80146e6:	fab7 fe87 	clz	lr, r7
 80146ea:	f1be 0f00 	cmp.w	lr, #0
 80146ee:	d134      	bne.n	801475a <__udivmoddi4+0x16e>
 80146f0:	1beb      	subs	r3, r5, r7
 80146f2:	0c3a      	lsrs	r2, r7, #16
 80146f4:	fa1f fc87 	uxth.w	ip, r7
 80146f8:	2101      	movs	r1, #1
 80146fa:	fbb3 f8f2 	udiv	r8, r3, r2
 80146fe:	0c25      	lsrs	r5, r4, #16
 8014700:	fb02 3318 	mls	r3, r2, r8, r3
 8014704:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8014708:	fb0c f308 	mul.w	r3, ip, r8
 801470c:	42ab      	cmp	r3, r5
 801470e:	d907      	bls.n	8014720 <__udivmoddi4+0x134>
 8014710:	19ed      	adds	r5, r5, r7
 8014712:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8014716:	d202      	bcs.n	801471e <__udivmoddi4+0x132>
 8014718:	42ab      	cmp	r3, r5
 801471a:	f200 80d1 	bhi.w	80148c0 <__udivmoddi4+0x2d4>
 801471e:	4680      	mov	r8, r0
 8014720:	1aed      	subs	r5, r5, r3
 8014722:	b2a3      	uxth	r3, r4
 8014724:	fbb5 f0f2 	udiv	r0, r5, r2
 8014728:	fb02 5510 	mls	r5, r2, r0, r5
 801472c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8014730:	fb0c fc00 	mul.w	ip, ip, r0
 8014734:	45a4      	cmp	ip, r4
 8014736:	d907      	bls.n	8014748 <__udivmoddi4+0x15c>
 8014738:	19e4      	adds	r4, r4, r7
 801473a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801473e:	d202      	bcs.n	8014746 <__udivmoddi4+0x15a>
 8014740:	45a4      	cmp	ip, r4
 8014742:	f200 80b8 	bhi.w	80148b6 <__udivmoddi4+0x2ca>
 8014746:	4618      	mov	r0, r3
 8014748:	eba4 040c 	sub.w	r4, r4, ip
 801474c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8014750:	e79d      	b.n	801468e <__udivmoddi4+0xa2>
 8014752:	4631      	mov	r1, r6
 8014754:	4630      	mov	r0, r6
 8014756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801475a:	f1ce 0420 	rsb	r4, lr, #32
 801475e:	fa05 f30e 	lsl.w	r3, r5, lr
 8014762:	fa07 f70e 	lsl.w	r7, r7, lr
 8014766:	fa20 f804 	lsr.w	r8, r0, r4
 801476a:	0c3a      	lsrs	r2, r7, #16
 801476c:	fa25 f404 	lsr.w	r4, r5, r4
 8014770:	ea48 0803 	orr.w	r8, r8, r3
 8014774:	fbb4 f1f2 	udiv	r1, r4, r2
 8014778:	ea4f 4518 	mov.w	r5, r8, lsr #16
 801477c:	fb02 4411 	mls	r4, r2, r1, r4
 8014780:	fa1f fc87 	uxth.w	ip, r7
 8014784:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8014788:	fb01 f30c 	mul.w	r3, r1, ip
 801478c:	42ab      	cmp	r3, r5
 801478e:	fa00 f40e 	lsl.w	r4, r0, lr
 8014792:	d909      	bls.n	80147a8 <__udivmoddi4+0x1bc>
 8014794:	19ed      	adds	r5, r5, r7
 8014796:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 801479a:	f080 808a 	bcs.w	80148b2 <__udivmoddi4+0x2c6>
 801479e:	42ab      	cmp	r3, r5
 80147a0:	f240 8087 	bls.w	80148b2 <__udivmoddi4+0x2c6>
 80147a4:	3902      	subs	r1, #2
 80147a6:	443d      	add	r5, r7
 80147a8:	1aeb      	subs	r3, r5, r3
 80147aa:	fa1f f588 	uxth.w	r5, r8
 80147ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80147b2:	fb02 3310 	mls	r3, r2, r0, r3
 80147b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80147ba:	fb00 f30c 	mul.w	r3, r0, ip
 80147be:	42ab      	cmp	r3, r5
 80147c0:	d907      	bls.n	80147d2 <__udivmoddi4+0x1e6>
 80147c2:	19ed      	adds	r5, r5, r7
 80147c4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80147c8:	d26f      	bcs.n	80148aa <__udivmoddi4+0x2be>
 80147ca:	42ab      	cmp	r3, r5
 80147cc:	d96d      	bls.n	80148aa <__udivmoddi4+0x2be>
 80147ce:	3802      	subs	r0, #2
 80147d0:	443d      	add	r5, r7
 80147d2:	1aeb      	subs	r3, r5, r3
 80147d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80147d8:	e78f      	b.n	80146fa <__udivmoddi4+0x10e>
 80147da:	f1c1 0720 	rsb	r7, r1, #32
 80147de:	fa22 f807 	lsr.w	r8, r2, r7
 80147e2:	408b      	lsls	r3, r1
 80147e4:	fa05 f401 	lsl.w	r4, r5, r1
 80147e8:	ea48 0303 	orr.w	r3, r8, r3
 80147ec:	fa20 fe07 	lsr.w	lr, r0, r7
 80147f0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80147f4:	40fd      	lsrs	r5, r7
 80147f6:	ea4e 0e04 	orr.w	lr, lr, r4
 80147fa:	fbb5 f9fc 	udiv	r9, r5, ip
 80147fe:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8014802:	fb0c 5519 	mls	r5, ip, r9, r5
 8014806:	fa1f f883 	uxth.w	r8, r3
 801480a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 801480e:	fb09 f408 	mul.w	r4, r9, r8
 8014812:	42ac      	cmp	r4, r5
 8014814:	fa02 f201 	lsl.w	r2, r2, r1
 8014818:	fa00 fa01 	lsl.w	sl, r0, r1
 801481c:	d908      	bls.n	8014830 <__udivmoddi4+0x244>
 801481e:	18ed      	adds	r5, r5, r3
 8014820:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8014824:	d243      	bcs.n	80148ae <__udivmoddi4+0x2c2>
 8014826:	42ac      	cmp	r4, r5
 8014828:	d941      	bls.n	80148ae <__udivmoddi4+0x2c2>
 801482a:	f1a9 0902 	sub.w	r9, r9, #2
 801482e:	441d      	add	r5, r3
 8014830:	1b2d      	subs	r5, r5, r4
 8014832:	fa1f fe8e 	uxth.w	lr, lr
 8014836:	fbb5 f0fc 	udiv	r0, r5, ip
 801483a:	fb0c 5510 	mls	r5, ip, r0, r5
 801483e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8014842:	fb00 f808 	mul.w	r8, r0, r8
 8014846:	45a0      	cmp	r8, r4
 8014848:	d907      	bls.n	801485a <__udivmoddi4+0x26e>
 801484a:	18e4      	adds	r4, r4, r3
 801484c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8014850:	d229      	bcs.n	80148a6 <__udivmoddi4+0x2ba>
 8014852:	45a0      	cmp	r8, r4
 8014854:	d927      	bls.n	80148a6 <__udivmoddi4+0x2ba>
 8014856:	3802      	subs	r0, #2
 8014858:	441c      	add	r4, r3
 801485a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801485e:	eba4 0408 	sub.w	r4, r4, r8
 8014862:	fba0 8902 	umull	r8, r9, r0, r2
 8014866:	454c      	cmp	r4, r9
 8014868:	46c6      	mov	lr, r8
 801486a:	464d      	mov	r5, r9
 801486c:	d315      	bcc.n	801489a <__udivmoddi4+0x2ae>
 801486e:	d012      	beq.n	8014896 <__udivmoddi4+0x2aa>
 8014870:	b156      	cbz	r6, 8014888 <__udivmoddi4+0x29c>
 8014872:	ebba 030e 	subs.w	r3, sl, lr
 8014876:	eb64 0405 	sbc.w	r4, r4, r5
 801487a:	fa04 f707 	lsl.w	r7, r4, r7
 801487e:	40cb      	lsrs	r3, r1
 8014880:	431f      	orrs	r7, r3
 8014882:	40cc      	lsrs	r4, r1
 8014884:	6037      	str	r7, [r6, #0]
 8014886:	6074      	str	r4, [r6, #4]
 8014888:	2100      	movs	r1, #0
 801488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801488e:	4618      	mov	r0, r3
 8014890:	e6f8      	b.n	8014684 <__udivmoddi4+0x98>
 8014892:	4690      	mov	r8, r2
 8014894:	e6e0      	b.n	8014658 <__udivmoddi4+0x6c>
 8014896:	45c2      	cmp	sl, r8
 8014898:	d2ea      	bcs.n	8014870 <__udivmoddi4+0x284>
 801489a:	ebb8 0e02 	subs.w	lr, r8, r2
 801489e:	eb69 0503 	sbc.w	r5, r9, r3
 80148a2:	3801      	subs	r0, #1
 80148a4:	e7e4      	b.n	8014870 <__udivmoddi4+0x284>
 80148a6:	4628      	mov	r0, r5
 80148a8:	e7d7      	b.n	801485a <__udivmoddi4+0x26e>
 80148aa:	4640      	mov	r0, r8
 80148ac:	e791      	b.n	80147d2 <__udivmoddi4+0x1e6>
 80148ae:	4681      	mov	r9, r0
 80148b0:	e7be      	b.n	8014830 <__udivmoddi4+0x244>
 80148b2:	4601      	mov	r1, r0
 80148b4:	e778      	b.n	80147a8 <__udivmoddi4+0x1bc>
 80148b6:	3802      	subs	r0, #2
 80148b8:	443c      	add	r4, r7
 80148ba:	e745      	b.n	8014748 <__udivmoddi4+0x15c>
 80148bc:	4608      	mov	r0, r1
 80148be:	e708      	b.n	80146d2 <__udivmoddi4+0xe6>
 80148c0:	f1a8 0802 	sub.w	r8, r8, #2
 80148c4:	443d      	add	r5, r7
 80148c6:	e72b      	b.n	8014720 <__udivmoddi4+0x134>

080148c8 <__aeabi_idiv0>:
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop

080148cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80148cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014904 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80148d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80148d2:	e003      	b.n	80148dc <LoopCopyDataInit>

080148d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80148d4:	4b0c      	ldr	r3, [pc, #48]	; (8014908 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80148d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80148d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80148da:	3104      	adds	r1, #4

080148dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80148dc:	480b      	ldr	r0, [pc, #44]	; (801490c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80148de:	4b0c      	ldr	r3, [pc, #48]	; (8014910 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80148e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80148e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80148e4:	d3f6      	bcc.n	80148d4 <CopyDataInit>
  ldr  r2, =_sbss
 80148e6:	4a0b      	ldr	r2, [pc, #44]	; (8014914 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80148e8:	e002      	b.n	80148f0 <LoopFillZerobss>

080148ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80148ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80148ec:	f842 3b04 	str.w	r3, [r2], #4

080148f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80148f0:	4b09      	ldr	r3, [pc, #36]	; (8014918 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80148f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80148f4:	d3f9      	bcc.n	80148ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80148f6:	f7fe fe57 	bl	80135a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80148fa:	f000 f811 	bl	8014920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80148fe:	f7fd fde5 	bl	80124cc <main>
  bx  lr    
 8014902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8014904:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8014908:	080153d4 	.word	0x080153d4
  ldr  r0, =_sdata
 801490c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014910:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8014914:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8014918:	20004480 	.word	0x20004480

0801491c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801491c:	e7fe      	b.n	801491c <ADC_IRQHandler>
	...

08014920 <__libc_init_array>:
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	4e0d      	ldr	r6, [pc, #52]	; (8014958 <__libc_init_array+0x38>)
 8014924:	4c0d      	ldr	r4, [pc, #52]	; (801495c <__libc_init_array+0x3c>)
 8014926:	1ba4      	subs	r4, r4, r6
 8014928:	10a4      	asrs	r4, r4, #2
 801492a:	2500      	movs	r5, #0
 801492c:	42a5      	cmp	r5, r4
 801492e:	d109      	bne.n	8014944 <__libc_init_array+0x24>
 8014930:	4e0b      	ldr	r6, [pc, #44]	; (8014960 <__libc_init_array+0x40>)
 8014932:	4c0c      	ldr	r4, [pc, #48]	; (8014964 <__libc_init_array+0x44>)
 8014934:	f000 f86a 	bl	8014a0c <_init>
 8014938:	1ba4      	subs	r4, r4, r6
 801493a:	10a4      	asrs	r4, r4, #2
 801493c:	2500      	movs	r5, #0
 801493e:	42a5      	cmp	r5, r4
 8014940:	d105      	bne.n	801494e <__libc_init_array+0x2e>
 8014942:	bd70      	pop	{r4, r5, r6, pc}
 8014944:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014948:	4798      	blx	r3
 801494a:	3501      	adds	r5, #1
 801494c:	e7ee      	b.n	801492c <__libc_init_array+0xc>
 801494e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014952:	4798      	blx	r3
 8014954:	3501      	adds	r5, #1
 8014956:	e7f2      	b.n	801493e <__libc_init_array+0x1e>
 8014958:	080153cc 	.word	0x080153cc
 801495c:	080153cc 	.word	0x080153cc
 8014960:	080153cc 	.word	0x080153cc
 8014964:	080153d0 	.word	0x080153d0

08014968 <memcpy>:
 8014968:	b510      	push	{r4, lr}
 801496a:	1e43      	subs	r3, r0, #1
 801496c:	440a      	add	r2, r1
 801496e:	4291      	cmp	r1, r2
 8014970:	d100      	bne.n	8014974 <memcpy+0xc>
 8014972:	bd10      	pop	{r4, pc}
 8014974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014978:	f803 4f01 	strb.w	r4, [r3, #1]!
 801497c:	e7f7      	b.n	801496e <memcpy+0x6>

0801497e <memset>:
 801497e:	4402      	add	r2, r0
 8014980:	4603      	mov	r3, r0
 8014982:	4293      	cmp	r3, r2
 8014984:	d100      	bne.n	8014988 <memset+0xa>
 8014986:	4770      	bx	lr
 8014988:	f803 1b01 	strb.w	r1, [r3], #1
 801498c:	e7f9      	b.n	8014982 <memset+0x4>

0801498e <strcpy>:
 801498e:	4603      	mov	r3, r0
 8014990:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014994:	f803 2b01 	strb.w	r2, [r3], #1
 8014998:	2a00      	cmp	r2, #0
 801499a:	d1f9      	bne.n	8014990 <strcpy+0x2>
 801499c:	4770      	bx	lr
	...

080149a0 <trunc>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	ec53 2b10 	vmov	r2, r3, d0
 80149a6:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80149aa:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80149ae:	2913      	cmp	r1, #19
 80149b0:	ee10 5a10 	vmov	r5, s0
 80149b4:	461c      	mov	r4, r3
 80149b6:	dc10      	bgt.n	80149da <trunc+0x3a>
 80149b8:	2900      	cmp	r1, #0
 80149ba:	bfa5      	ittet	ge
 80149bc:	4b12      	ldrge	r3, [pc, #72]	; (8014a08 <trunc+0x68>)
 80149be:	fa43 f101 	asrge.w	r1, r3, r1
 80149c2:	2300      	movlt	r3, #0
 80149c4:	2300      	movge	r3, #0
 80149c6:	bfb9      	ittee	lt
 80149c8:	2200      	movlt	r2, #0
 80149ca:	f004 4300 	andlt.w	r3, r4, #2147483648	; 0x80000000
 80149ce:	2200      	movge	r2, #0
 80149d0:	ea24 0301 	bicge.w	r3, r4, r1
 80149d4:	ec43 2b10 	vmov	d0, r2, r3
 80149d8:	bd38      	pop	{r3, r4, r5, pc}
 80149da:	2933      	cmp	r1, #51	; 0x33
 80149dc:	dd0a      	ble.n	80149f4 <trunc+0x54>
 80149de:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80149e2:	d1f7      	bne.n	80149d4 <trunc+0x34>
 80149e4:	4619      	mov	r1, r3
 80149e6:	ee10 0a10 	vmov	r0, s0
 80149ea:	f7ff f9d3 	bl	8013d94 <__adddf3>
 80149ee:	4602      	mov	r2, r0
 80149f0:	460b      	mov	r3, r1
 80149f2:	e7ef      	b.n	80149d4 <trunc+0x34>
 80149f4:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80149f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80149fc:	fa21 f000 	lsr.w	r0, r1, r0
 8014a00:	4623      	mov	r3, r4
 8014a02:	ea25 0200 	bic.w	r2, r5, r0
 8014a06:	e7e5      	b.n	80149d4 <trunc+0x34>
 8014a08:	000fffff 	.word	0x000fffff

08014a0c <_init>:
 8014a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a0e:	bf00      	nop
 8014a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a12:	bc08      	pop	{r3}
 8014a14:	469e      	mov	lr, r3
 8014a16:	4770      	bx	lr

08014a18 <_fini>:
 8014a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1a:	bf00      	nop
 8014a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a1e:	bc08      	pop	{r3}
 8014a20:	469e      	mov	lr, r3
 8014a22:	4770      	bx	lr
